{
  "name": "mbpp_745_divisible_by_digits",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisible(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisible).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509881,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisible$1$$anonfun$1(tmp7ficcctx.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisible$1(tmp7ficcctx.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp7ficcctx.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp7ficcctx.scala:10)\n\tat Problem$.main(tmp7ficcctx.scala:13)\n\tat Problem.main(tmp7ficcctx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runA",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                if (i % (num % 10) != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp9gwk3uw5.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmp9gwk3uw5.scala:18)\n\tat Problem$.main(tmp9gwk3uw5.scala:22)\n\tat Problem.main(tmp9gwk3uw5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(n : Long) : Boolean = {\n            val digits = n.toString.map(_.toString.toInt).toList\n            digits.forall(d => n % d == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509881,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.isDivisibleByDigits$1$$anonfun$1(tmp2xlzgka1.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.isDivisibleByDigits$1(tmp2xlzgka1.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp2xlzgka1.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp2xlzgka1.scala:10)\n\tat Problem$.main(tmp2xlzgka1.scala:13)\n\tat Problem.main(tmp2xlzgka1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runn",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            digits match {\n                case Nil => true\n                case x :: xs => if (num % x == 0) divisibleByDigitsHelper(num, xs) else false\n            }\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.map(x => x.asDigit.toLong).toList)\n        }\n        (startnum to endnum).filter(x => divisibleByDigitsHelper2(x)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmpowf7m7av.scala:9)\n\tat Problem$.divisibleByDigitsHelper2$1(tmpowf7m7av.scala:13)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpowf7m7av.scala:15)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpowf7m7av.scala:15)\n\tat Problem$.main(tmpowf7m7av.scala:18)\n\tat Problem.main(tmpowf7m7av.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2(_)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmpxowo386b.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmpxowo386b.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpxowo386b.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpxowo386b.scala:14)\n\tat Problem$.main(tmpxowo386b.scala:17)\n\tat Problem.main(tmpxowo386b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisible(num : Long, digit : Long) : Boolean = {\n                if (digit == 0) true\n                else if (num % digit == 0) isDivisible(num, digit / 10)\n                else false\n            }\n            isDivisible(num, num)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgd437d2k.scala:17)\n\tat Problem.main(tmpgd437d2k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(d => d != 0 && num % d == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.toString.toInt) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdfi69of6.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = ListBuffer[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.toString.toInt) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkhrbn4s3.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.toString.toInt)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509881,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.isDivisibleByDigits$1$$anonfun$1(tmp41vcfhhs.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.isDivisibleByDigits$1(tmp41vcfhhs.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp41vcfhhs.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp41vcfhhs.scala:10)\n\tat Problem$.main(tmp41vcfhhs.scala:13)\n\tat Problem.main(tmp41vcfhhs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runn",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = ListBuffer[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.toString.toInt != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                result += i\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509881,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmp2tz1g70n.scala:10)\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$adapted$1(tmp2tz1g70n.scala:13)\n\tat scala.collection.StringOps$.foreach$extension(StringOps.scala:1044)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp2tz1g70n.scala:13)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmp2tz1g70n.scala:17)\n\tat Problem$.main(tmp2tz1g70n.scala:21)\n\tat Problem.main(tmp2tz1g70n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, divisor : Long) : Boolean = {\n            if (divisor == 0) true\n            else if (num % divisor == 0) divisibleByDigitsHelper(num, divisor / 10)\n            else false\n        }\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            if (divisibleByDigitsHelper(i, i)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1iwo4ild.scala:18)\n\tat Problem.main(tmp1iwo4ild.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            var digits = num.toString.toList\n            digits.forall(digit => num % digit.asDigit == 0)\n        }\n        (startnum to endnum).filter(num => divisibleByDigitsHelper(num)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpca97anal.scala:8)\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$adapted$1(tmpca97anal.scala:8)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigitsHelper$1(tmpca97anal.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpca97anal.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpca97anal.scala:10)\n\tat Problem$.main(tmpca97anal.scala:13)\n\tat Problem.main(tmpca97anal.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.t",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val l = (startnum to endnum).toList.filter(x => x.toString.forall(y => x % y.asDigit == 0))\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.$anonfun$1$$anonfun$1(tmpvja_ir_e.scala:6)\n\tat Problem$.$anonfun$1$$anonfun$adapted$1(tmpvja_ir_e.scala:6)\n\tat scala.collection.StringOps$.forall$extension(StringOps.scala:1059)\n\tat Problem$.$anonfun$1(tmpvja_ir_e.scala:6)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.immutable.List.filter(List.scala:529)\n\tat Problem$.divisibleByDigits(tmpvja_ir_e.scala:6)\n\tat Problem$.main(tmpvja_ir_e.scala:10)\n\tat Problem.main(tmpvja_ir_e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisibleByDigit(digit : Char) : Boolean = {\n                val digitInt = digit.asDigit\n                digitInt != 0 && num % digitInt == 0\n            }\n            num.toString.forall(isDivisibleByDigit)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toLong)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmpwwf9j6vh.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpwwf9j6vh.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpwwf9j6vh.scala:10)\n\tat Problem$.main(tmpwwf9j6vh.scala:14)\n\tat Problem.main(tmpwwf9j6vh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            def divisibleByDigitsHelperHelper(num : Long, digits : List[Long]) : Boolean = {\n                if (digits.isEmpty) true\n                else if (num % digits.head != 0) false\n                else divisibleByDigitsHelperHelper(num, digits.tail)\n            }\n            divisibleByDigitsHelperHelper(num, num.toString.map(_.asDigit.toLong).toList)\n        }\n        (startnum to endnum).toList.filter(divisibleByDigitsHelper)\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelperHelper$1(tmpxjrly7c7.scala:9)\n\tat Problem$.divisibleByDigitsHelper$1(tmpxjrly7c7.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpxjrly7c7.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.immutable.List.filter(List.scala:529)\n\tat Problem$.divisibleByDigits(tmpxjrly7c7.scala:14)\n\tat Problem$.main(tmpxjrly7c7.scala:17)\n\tat Problem.main(tmpxjrly7c7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509881,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpj0r5hfuh.scala:13)\n\tat Problem.main(tmpj0r5hfuh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                if (i % (num % 10) != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) result = result :+ i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpuczsx72i.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpuczsx72i.scala:18)\n\tat Problem$.main(tmpuczsx72i.scala:22)\n\tat Problem.main(tmpuczsx72i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toInt)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmpla7n5kxa.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpla7n5kxa.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpla7n5kxa.scala:10)\n\tat Problem$.main(tmpla7n5kxa.scala:14)\n\tat Problem.main(tmpla7n5kxa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.map(x => x.asDigit.toLong).toList)\n        }\n        (startnum to endnum).filter(x => divisibleByDigitsHelper2(x)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmpbxanr494.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmpbxanr494.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpbxanr494.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpbxanr494.scala:14)\n\tat Problem$.main(tmpbxanr494.scala:17)\n\tat Problem.main(tmpbxanr494.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.toString.toInt != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122682,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxgp9h2rl.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var digits = i.toString.toCharArray\n            for (j <- 0 until digits.length) {\n                if (i % (digits(j) - '0') != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122682,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgj3ac8k7.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpozgyz3ib.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigitsHelper$1(tmpozgyz3ib.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpozgyz3ib.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpozgyz3ib.scala:10)\n\tat Problem$.main(tmpozgyz3ib.scala:13)\n\tat Problem.main(tmpozgyz3ib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:2",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122682,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2oi56erm.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmp6ahff_lm.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmp6ahff_lm.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp6ahff_lm.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp6ahff_lm.scala:14)\n\tat Problem$.main(tmp6ahff_lm.scala:17)\n\tat Problem.main(tmp6ahff_lm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122682,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2oi56erm.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpozgyz3ib.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigitsHelper$1(tmpozgyz3ib.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpozgyz3ib.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpozgyz3ib.scala:10)\n\tat Problem$.main(tmpozgyz3ib.scala:13)\n\tat Problem.main(tmpozgyz3ib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:2",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toCharArray.map(_.toString.toLong)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmpr759bu6d.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.ArrayOps$.forall$extension(ArrayOps.scala:753)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpr759bu6d.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpr759bu6d.scala:10)\n\tat Problem$.main(tmpr759bu6d.scala:14)\n\tat Problem.main(tmpr759bu6d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.toString.toInt != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122682,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxgp9h2rl.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8ibqc3vj.scala:13)\n\tat Problem.main(tmp8ibqc3vj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toLong))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmpsq3301_j.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmpsq3301_j.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpsq3301_j.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpsq3301_j.scala:14)\n\tat Problem$.main(tmpsq3301_j.scala:17)\n\tat Problem.main(tmpsq3301_j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.map(_.asDigit).toList)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmpz_ijorr0.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmpz_ijorr0.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpz_ijorr0.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpz_ijorr0.scala:14)\n\tat Problem$.main(tmpz_ijorr0.scala:17)\n\tat Problem.main(tmpz_ijorr0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.toString.toLong)\n            digits.forall(d => d != 0 && num % d == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else {\n                if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n                else false\n            }\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toLong))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122685,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmp0pz9g20n.scala:9)\n\tat Problem$.divisibleByDigitsHelper2$1(tmp0pz9g20n.scala:14)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp0pz9g20n.scala:16)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp0pz9g20n.scala:16)\n\tat Problem$.main(tmp0pz9g20n.scala:19)\n\tat Problem.main(tmp0pz9g20n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(x => num % x == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpr8kc4_yr.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigitsHelper$1(tmpr8kc4_yr.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpr8kc4_yr.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpr8kc4_yr.scala:10)\n\tat Problem$.main(tmpr8kc4_yr.scala:13)\n\tat Problem.main(tmpr8kc4_yr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.to",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8ibqc3vj.scala:13)\n\tat Problem.main(tmp8ibqc3vj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmp6ahff_lm.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmp6ahff_lm.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp6ahff_lm.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp6ahff_lm.scala:14)\n\tat Problem$.main(tmp6ahff_lm.scala:17)\n\tat Problem.main(tmp6ahff_lm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(n : Long) : Boolean = {\n            val digits = n.toString.toList.map(_.asDigit)\n            digits.forall(d => d != 0 && n % d == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpozgyz3ib.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigitsHelper$1(tmpozgyz3ib.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpozgyz3ib.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpozgyz3ib.scala:10)\n\tat Problem$.main(tmpozgyz3ib.scala:13)\n\tat Problem.main(tmpozgyz3ib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:2",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpozgyz3ib.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigitsHelper$1(tmpozgyz3ib.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpozgyz3ib.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpozgyz3ib.scala:10)\n\tat Problem$.main(tmpozgyz3ib.scala:13)\n\tat Problem.main(tmpozgyz3ib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:2",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisibleByDigit(num : Long, digit : Long) : Boolean = {\n                if (digit == 0) true\n                else if (num % digit == 0) isDivisibleByDigit(num, digit / 10)\n                else false\n            }\n            isDivisibleByDigit(num, num)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnfm0n236.scala:17)\n\tat Problem.main(tmpnfm0n236.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcgja1ivc.scala:13)\n\tat Problem.main(tmpcgja1ivc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var isDivisible = true\n            var num = i\n            while (num > 0) {\n                val digit = num % 10\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (isDivisible) result = result :+ i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcgja1ivc.scala:13)\n\tat Problem.main(tmpcgja1ivc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcgja1ivc.scala:13)\n\tat Problem.main(tmpcgja1ivc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            val digits = i.toString.map(_.asDigit)\n            if (digits.forall(i % _ == 0)) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmpcp_9d_e7.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpcp_9d_e7.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpcp_9d_e7.scala:10)\n\tat Problem$.main(tmpcp_9d_e7.scala:14)\n\tat Problem.main(tmpcp_9d_e7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunn",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7vth39wu.scala:13)\n\tat Problem.main(tmp7vth39wu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpjhe8nnom.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigitsHelper$1(tmpjhe8nnom.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpjhe8nnom.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpjhe8nnom.scala:10)\n\tat Problem$.main(tmpjhe8nnom.scala:13)\n\tat Problem.main(tmpjhe8nnom.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.to",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toInt))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmp4_c6qi3z.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmp4_c6qi3z.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp4_c6qi3z.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp4_c6qi3z.scala:14)\n\tat Problem$.main(tmp4_c6qi3z.scala:17)\n\tat Problem.main(tmp4_c6qi3z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.map(_.asDigit).toList)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmpz_ijorr0.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmpz_ijorr0.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpz_ijorr0.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpz_ijorr0.scala:14)\n\tat Problem$.main(tmpz_ijorr0.scala:17)\n\tat Problem.main(tmpz_ijorr0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.map(_.asDigit).toList\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmp00sqiv_o.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp00sqiv_o.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmp00sqiv_o.scala:10)\n\tat Problem$.main(tmp00sqiv_o.scala:14)\n\tat Problem.main(tmp00sqiv_o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.toString.toInt)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.isDivisibleByDigits$1$$anonfun$1(tmpu3yvzfis.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.isDivisibleByDigits$1(tmpu3yvzfis.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpu3yvzfis.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpu3yvzfis.scala:10)\n\tat Problem$.main(tmpu3yvzfis.scala:13)\n\tat Problem.main(tmpu3yvzfis.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat d",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.toString.toInt) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdfi69of6.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                val digit = num % 10\n                if (digit == 0 || i % digit != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps59g1zrv.scala:23)\n\tat Problem.main(tmps59g1zrv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.map(_.asDigit)\n            var flag = true\n            for (digit <- digits) {\n                if (i % digit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq6ayfdp0.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpjhe8nnom.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigitsHelper$1(tmpjhe8nnom.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpjhe8nnom.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpjhe8nnom.scala:10)\n\tat Problem$.main(tmpjhe8nnom.scala:13)\n\tat Problem.main(tmpjhe8nnom.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.to",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toInt)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmpla7n5kxa.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpla7n5kxa.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpla7n5kxa.scala:10)\n\tat Problem$.main(tmpla7n5kxa.scala:14)\n\tat Problem.main(tmpla7n5kxa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit.toLong))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122696,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmptizp3zy5.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmptizp3zy5.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmptizp3zy5.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmptizp3zy5.scala:14)\n\tat Problem$.main(tmptizp3zy5.scala:17)\n\tat Problem.main(tmptizp3zy5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.map(_.asDigit.toLong).toList)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmp0wej9o6o.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmp0wej9o6o.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp0wej9o6o.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp0wej9o6o.scala:14)\n\tat Problem$.main(tmp0wej9o6o.scala:17)\n\tat Problem.main(tmp0wej9o6o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisibleByDigit(digit : Long) : Boolean = {\n                if (digit == 0) false\n                else if (num % digit == 0) true\n                else isDivisibleByDigit(digit / 10)\n            }\n            isDivisibleByDigit(num)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_ojpue01.scala:17)\n\tat Problem.main(tmp_ojpue01.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            if (i.toString.forall(c => i % (c - '0') == 0)) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122696,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmplf85os5y.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$adapted$1(tmplf85os5y.scala:8)\n\tat scala.collection.StringOps$.forall$extension(StringOps.scala:1059)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmplf85os5y.scala:8)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmplf85os5y.scala:9)\n\tat Problem$.main(tmplf85os5y.scala:13)\n\tat Problem.main(tmplf85os5y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, divisor : Long) : Boolean = {\n            if (divisor == 0) true\n            else if (num % divisor == 0) divisibleByDigitsHelper(num, divisor / 10)\n            else false\n        }\n        val result = new ListBuffer[Long]()\n        for (i <- startnum to endnum) {\n            if (divisibleByDigitsHelper(i, i)) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz7dedui7.scala:18)\n\tat Problem.main(tmpz7dedui7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                val digit = num % 10\n                if (digit == 0) {\n                    flag = false\n                    num = 0\n                } else if (i % digit != 0) {\n                    flag = false\n                    num = 0\n                } else {\n                    num /= 10\n                }\n            }\n            if (flag) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg65geuok.scala:27)\n\tat Problem.main(tmpg65geuok.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.toString.toInt != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7tm3gvbg.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.map(_.asDigit).toList\n            if (digits.forall(i % _ == 0)) result = result :+ i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmpqvjladp1.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpqvjladp1.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpqvjladp1.scala:10)\n\tat Problem$.main(tmpqvjladp1.scala:14)\n\tat Problem.main(tmpqvjladp1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpjhe8nnom.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigitsHelper$1(tmpjhe8nnom.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpjhe8nnom.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpjhe8nnom.scala:10)\n\tat Problem$.main(tmpjhe8nnom.scala:13)\n\tat Problem.main(tmpjhe8nnom.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.to",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(x => x.asDigit)\n            digits.forall(x => num % x == 0)\n        }\n        (startnum to endnum).filter(x => divisibleByDigitsHelper(x)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmppv8oofqu.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigitsHelper$1(tmppv8oofqu.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmppv8oofqu.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmppv8oofqu.scala:10)\n\tat Problem$.main(tmppv8oofqu.scala:13)\n\tat Problem.main(tmppv8oofqu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:2",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toInt)\n            var divisible = true\n            for (d <- digits) {\n                if (i % d != 0) {\n                    divisible = false\n                    break\n                }\n            }\n            if (divisible) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphjo1ge6r.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpozgyz3ib.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigitsHelper$1(tmpozgyz3ib.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpozgyz3ib.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpozgyz3ib.scala:10)\n\tat Problem$.main(tmpozgyz3ib.scala:13)\n\tat Problem.main(tmpozgyz3ib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:2",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpozgyz3ib.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigitsHelper$1(tmpozgyz3ib.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpozgyz3ib.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpozgyz3ib.scala:10)\n\tat Problem$.main(tmpozgyz3ib.scala:13)\n\tat Problem.main(tmpozgyz3ib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:2",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            def divisibleByDigitsHelperHelper(num : Long, digit : Long) : Boolean = {\n                if (digit == 0) true\n                else if (num % digit == 0) divisibleByDigitsHelperHelper(num, digit / 10)\n                else false\n            }\n            divisibleByDigitsHelperHelper(num, num)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp45irrwnl.scala:17)\n\tat Problem.main(tmp45irrwnl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.toString.toInt).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.isDivisibleByDigits$1$$anonfun$1(tmpc28aoeqt.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.isDivisibleByDigits$1(tmpc28aoeqt.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpc28aoeqt.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpc28aoeqt.scala:10)\n\tat Problem$.main(tmpc28aoeqt.scala:13)\n\tat Problem.main(tmpc28aoeqt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runn",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var isDivisible = true\n            var num = i\n            while (num > 0) {\n                val digit = num % 10\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (isDivisible) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.map(_.asDigit.toLong).toList)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmp0wej9o6o.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmp0wej9o6o.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp0wej9o6o.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp0wej9o6o.scala:14)\n\tat Problem$.main(tmp0wej9o6o.scala:17)\n\tat Problem.main(tmp0wej9o6o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122682,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2oi56erm.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisible(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisible).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisible$1$$anonfun$1(tmp5rcxdq4f.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisible$1(tmp5rcxdq4f.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp5rcxdq4f.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp5rcxdq4f.scala:10)\n\tat Problem$.main(tmp5rcxdq4f.scala:13)\n\tat Problem.main(tmp5rcxdq4f.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runA",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        (startnum to endnum).filter(x => x.toString.forall(y => x % y.asDigit == 0)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmp_dagv6nj.scala:6)\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$adapted$1(tmp_dagv6nj.scala:6)\n\tat scala.collection.StringOps$.forall$extension(StringOps.scala:1059)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp_dagv6nj.scala:6)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp_dagv6nj.scala:6)\n\tat Problem$.main(tmp_dagv6nj.scala:9)\n\tat Problem.main(tmp_dagv6nj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRu",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var divisible = true\n            var num = i\n            while (num > 0) {\n                val digit = num % 10\n                if (digit == 0 || i % digit != 0) {\n                    divisible = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (divisible) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisible(num : Long) : Boolean = {\n            def isDivisible(num : Long, divisor : Long) : Boolean = {\n                if (divisor == 0) true\n                else if (num % divisor == 0) isDivisible(num, divisor / 10)\n                else false\n            }\n            isDivisible(num, num)\n        }\n        (startnum to endnum).filter(isDivisible).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0hof5iw0.scala:17)\n\tat Problem.main(tmp0hof5iw0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7vth39wu.scala:13)\n\tat Problem.main(tmp7vth39wu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            if (num == 0) return true\n            val digit = num % 10\n            if (digit == 0) return false\n            if (digit % 10 == 0) return false\n            if (digit % (num / 10) != 0) return false\n            divisibleByDigitsHelper(num / 10)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmpgbheiuoc.scala:11)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpgbheiuoc.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpgbheiuoc.scala:14)\n\tat Problem$.main(tmpgbheiuoc.scala:17)\n\tat Problem.main(tmpgbheiuoc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat ",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcgja1ivc.scala:13)\n\tat Problem.main(tmpcgja1ivc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList\n            var divisible = true\n            for (j <- digits) {\n                if (i % j.toString.toInt != 0) {\n                    divisible = false\n                    break\n                }\n            }\n            if (divisible) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122698,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs8j4ek5.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toInt))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmp4_c6qi3z.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmp4_c6qi3z.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp4_c6qi3z.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp4_c6qi3z.scala:14)\n\tat Problem$.main(tmp4_c6qi3z.scala:17)\n\tat Problem.main(tmp4_c6qi3z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.asDigit) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122700,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp11wg_08l.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toInt)\n            if (digits.forall(x => i % x == 0)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmp4vvw0nm5.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp4vvw0nm5.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmp4vvw0nm5.scala:10)\n\tat Problem$.main(tmp4vvw0nm5.scala:14)\n\tat Problem.main(tmp4vvw0nm5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsRecur(num : Long, acc : List[Long]) : List[Long] = {\n            if (num > endnum) acc\n            else if (divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit))) divisibleByDigitsRecur(num + 1, num :: acc)\n            else divisibleByDigitsRecur(num + 1, acc)\n        }\n        divisibleByDigitsRecur(startnum, List())\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmphvxedvrw.scala:8)\n\tat Problem$.divisibleByDigitsRecur$1(tmphvxedvrw.scala:13)\n\tat Problem$.divisibleByDigits(tmphvxedvrw.scala:16)\n\tat Problem$.main(tmphvxedvrw.scala:19)\n\tat Problem.main(tmphvxedvrw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var temp = i\n            while (temp > 0) {\n                var digit = temp % 10\n                if (digit == 0 || i % digit != 0) {\n                    flag = false\n                    temp = 0\n                }\n                temp /= 10\n            }\n            if (flag) result = result :+ i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            var temp = i\n            while (temp > 0) {\n                val digit = temp % 10\n                if (digit == 0 || i % digit != 0) {\n                    flag = false\n                    temp = 0\n                }\n                temp /= 10\n            }\n            if (flag) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122705,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122682,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2oi56erm.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.asDigit)\n            if (digits.contains(0)) return false\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.isDivisibleByDigits$1$$anonfun$1(tmp9oathjlk.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.isDivisibleByDigits$1(tmp9oathjlk.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp9oathjlk.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp9oathjlk.scala:10)\n\tat Problem$.main(tmp9oathjlk.scala:13)\n\tat Problem.main(tmp9oathjlk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runn",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.asDigit)\n            if (digits.forall(i % _ == 0)) result = result :+ i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122707,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmpk580_03h.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpk580_03h.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpk580_03h.scala:10)\n\tat Problem$.main(tmpk580_03h.scala:14)\n\tat Problem.main(tmpk580_03h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpozgyz3ib.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigitsHelper$1(tmpozgyz3ib.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpozgyz3ib.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpozgyz3ib.scala:10)\n\tat Problem$.main(tmpozgyz3ib.scala:13)\n\tat Problem.main(tmpozgyz3ib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:2",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1j1nh1di.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisible(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(d => d != 0 && num % d == 0)\n        }\n        (startnum to endnum).filter(isDivisible).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head != 0) false\n            else divisibleByDigitsHelper(num, digits.tail)\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.map(_.asDigit.toLong).toList)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmp3aolvqnd.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmp3aolvqnd.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp3aolvqnd.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp3aolvqnd.scala:14)\n\tat Problem$.main(tmp3aolvqnd.scala:17)\n\tat Problem.main(tmp3aolvqnd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            num.toString.map(_.asDigit).forall(num % _ == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$2(tmpm93i1lhv.scala:7)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigitsHelper$1(tmpm93i1lhv.scala:7)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpm93i1lhv.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpm93i1lhv.scala:9)\n\tat Problem$.main(tmpm93i1lhv.scala:12)\n\tat Problem.main(tmpm93i1lhv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            if (num == 0) true\n            else if (num % (num % 10) == 0) divisibleByDigitsHelper(num / 10)\n            else false\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmpsmjvq6v0.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpsmjvq6v0.scala:11)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpsmjvq6v0.scala:11)\n\tat Problem$.main(tmpsmjvq6v0.scala:14)\n\tat Problem.main(tmpsmjvq6v0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat d",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.map(_.asDigit).toList\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmp00sqiv_o.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp00sqiv_o.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmp00sqiv_o.scala:10)\n\tat Problem$.main(tmp00sqiv_o.scala:14)\n\tat Problem.main(tmp00sqiv_o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toInt))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmp4_c6qi3z.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmp4_c6qi3z.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp4_c6qi3z.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp4_c6qi3z.scala:14)\n\tat Problem$.main(tmp4_c6qi3z.scala:17)\n\tat Problem.main(tmp4_c6qi3z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(x => x.toString.toInt)\n            if (digits.forall(x => i % x == 0)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmpoy8neou6.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpoy8neou6.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpoy8neou6.scala:10)\n\tat Problem$.main(tmpoy8neou6.scala:14)\n\tat Problem.main(tmpoy8neou6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcgja1ivc.scala:13)\n\tat Problem.main(tmpcgja1ivc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.toString.toInt != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122682,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxgp9h2rl.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            def divisibleByDigitsHelperHelper(num : Long, digit : Long) : Boolean = {\n                if (num == 0) true\n                else if (num % 10 == 0) false\n                else if (digit % (num % 10) != 0) false\n                else divisibleByDigitsHelperHelper(num / 10, digit)\n            }\n            if (num == 0) false\n            else divisibleByDigitsHelperHelper(num, num)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, divisor : Long) : Boolean = {\n            if (divisor == 0) true\n            else if (num % divisor == 0) divisibleByDigitsHelper(num, divisor / 10)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpynuqohvz.scala:17)\n\tat Problem.main(tmpynuqohvz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_mybl3mg.scala:13)\n\tat Problem.main(tmp_mybl3mg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, divisor : Long) : Boolean = {\n            if (num == 0) true\n            else if (num % 10 == 0) false\n            else if (divisor % (num % 10) != 0) false\n            else divisibleByDigitsHelper(num / 10, divisor)\n        }\n        (startnum to endnum).filter(x => divisibleByDigitsHelper(x, x)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            val digits = i.toString.map(_.asDigit)\n            if (digits.forall(i % _ == 0)) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmpcp_9d_e7.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpcp_9d_e7.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpcp_9d_e7.scala:10)\n\tat Problem$.main(tmpcp_9d_e7.scala:14)\n\tat Problem.main(tmpcp_9d_e7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunn",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var num = i\n            var digits = List[Long]()\n            while (num > 0) {\n                digits = (num % 10) :: digits\n                num /= 10\n            }\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmpa_1k20pi.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpa_1k20pi.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpa_1k20pi.scala:15)\n\tat Problem$.main(tmpa_1k20pi.scala:19)\n\tat Problem.main(tmpa_1k20pi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toInt))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmp4_c6qi3z.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmp4_c6qi3z.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp4_c6qi3z.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp4_c6qi3z.scala:14)\n\tat Problem$.main(tmp4_c6qi3z.scala:17)\n\tat Problem.main(tmp4_c6qi3z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpjhe8nnom.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigitsHelper$1(tmpjhe8nnom.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpjhe8nnom.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpjhe8nnom.scala:10)\n\tat Problem$.main(tmpjhe8nnom.scala:13)\n\tat Problem.main(tmpjhe8nnom.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.to",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcgja1ivc.scala:13)\n\tat Problem.main(tmpcgja1ivc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            num.toString.map(x => x.asDigit).forall(x => num % x == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.isDivisibleByDigits$1$$anonfun$2(tmpoj4guxj2.scala:7)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.isDivisibleByDigits$1(tmpoj4guxj2.scala:7)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpoj4guxj2.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpoj4guxj2.scala:9)\n\tat Problem$.main(tmpoj4guxj2.scala:12)\n\tat Problem.main(tmpoj4guxj2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dot",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.toString.toInt)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmp0ine0ofq.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigitsHelper$1(tmp0ine0ofq.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp0ine0ofq.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp0ine0ofq.scala:10)\n\tat Problem$.main(tmp0ine0ofq.scala:13)\n\tat Problem.main(tmp0ine0ofq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.to",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisibleByDigit(num : Long, digit : Long) : Boolean = {\n                if (digit == 0) true\n                else if (num % digit == 0) isDivisibleByDigit(num, digit / 10)\n                else false\n            }\n            isDivisibleByDigit(num, num)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnfm0n236.scala:17)\n\tat Problem.main(tmpnfm0n236.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                if (i % (num % 10) != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) result = result :+ i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpuczsx72i.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpuczsx72i.scala:18)\n\tat Problem$.main(tmpuczsx72i.scala:22)\n\tat Problem.main(tmpuczsx72i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head != 0) false\n            else divisibleByDigitsHelper(num, digits.tail)\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmpaiqo7v_m.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmpaiqo7v_m.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpaiqo7v_m.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpaiqo7v_m.scala:14)\n\tat Problem$.main(tmpaiqo7v_m.scala:17)\n\tat Problem.main(tmpaiqo7v_m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.asDigit)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122710,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmpdwq7w30v.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpdwq7w30v.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpdwq7w30v.scala:10)\n\tat Problem$.main(tmpdwq7w30v.scala:14)\n\tat Problem.main(tmpdwq7w30v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmp6ahff_lm.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmp6ahff_lm.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp6ahff_lm.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp6ahff_lm.scala:14)\n\tat Problem$.main(tmp6ahff_lm.scala:17)\n\tat Problem.main(tmp6ahff_lm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpjhe8nnom.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigitsHelper$1(tmpjhe8nnom.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpjhe8nnom.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpjhe8nnom.scala:10)\n\tat Problem$.main(tmpjhe8nnom.scala:13)\n\tat Problem.main(tmpjhe8nnom.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.to",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            var digits = num.toString.toList.map(x => x.toString.toInt)\n            digits.forall(x => num % x == 0)\n        }\n        (startnum to endnum).filter(x => divisibleByDigitsHelper(x)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122711,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmphgehyxjl.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigitsHelper$1(tmphgehyxjl.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmphgehyxjl.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmphgehyxjl.scala:10)\n\tat Problem$.main(tmphgehyxjl.scala:13)\n\tat Problem.main(tmphgehyxjl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.to",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpozgyz3ib.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigitsHelper$1(tmpozgyz3ib.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpozgyz3ib.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpozgyz3ib.scala:10)\n\tat Problem$.main(tmpozgyz3ib.scala:13)\n\tat Problem.main(tmpozgyz3ib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:2",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toInt)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmpla7n5kxa.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpla7n5kxa.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpla7n5kxa.scala:10)\n\tat Problem$.main(tmpla7n5kxa.scala:14)\n\tat Problem.main(tmpla7n5kxa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var isDivisible = true\n            var num = i\n            while (num > 0) {\n                val digit = num % 10\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (isDivisible) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.toString.toLong).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122716,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmplrxtlqas.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigitsHelper$1(tmplrxtlqas.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmplrxtlqas.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmplrxtlqas.scala:10)\n\tat Problem$.main(tmplrxtlqas.scala:13)\n\tat Problem.main(tmplrxtlqas.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.to",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisible(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(d => num % d == 0)\n        }\n        (startnum to endnum).filter(divisible).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122716,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisible$1$$anonfun$1(tmpz4215pj8.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisible$1(tmpz4215pj8.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpz4215pj8.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpz4215pj8.scala:10)\n\tat Problem$.main(tmpz4215pj8.scala:13)\n\tat Problem.main(tmpz4215pj8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.Co",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toLong))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmpsq3301_j.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmpsq3301_j.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpsq3301_j.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpsq3301_j.scala:14)\n\tat Problem$.main(tmpsq3301_j.scala:17)\n\tat Problem.main(tmpsq3301_j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.toString.toInt).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122716,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpe2ywdbgs.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigitsHelper$1(tmpe2ywdbgs.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpe2ywdbgs.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpe2ywdbgs.scala:10)\n\tat Problem$.main(tmpe2ywdbgs.scala:13)\n\tat Problem.main(tmpe2ywdbgs.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.to",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var num = i\n            var divisible = true\n            while (num > 0) {\n                val digit = num % 10\n                if (digit == 0 || i % digit != 0) {\n                    divisible = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (divisible) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122716,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq44ft6nz.scala:23)\n\tat Problem.main(tmpq44ft6nz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.toString.toInt) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdfi69of6.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var isDivisible = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    isDivisible = false\n                    break\n                }\n            }\n            if (isDivisible) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122712,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwpkm6j2f.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            if (i.toString.toList.forall(x => i % x.asDigit == 0)) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122719,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmpc6ammenr.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$adapted$1(tmpc6ammenr.scala:8)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpc6ammenr.scala:8)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpc6ammenr.scala:9)\n\tat Problem$.main(tmpc6ammenr.scala:13)\n\tat Problem.main(tmpc6ammenr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toInt)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmpla7n5kxa.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpla7n5kxa.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpla7n5kxa.scala:10)\n\tat Problem$.main(tmpla7n5kxa.scala:14)\n\tat Problem.main(tmpla7n5kxa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122682,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2oi56erm.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122719,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$1$$anonfun$1(tmp1li8993a.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigits$1(tmp1li8993a.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp1li8993a.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp1li8993a.scala:10)\n\tat Problem$.main(tmp1li8993a.scala:13)\n\tat Problem.main(tmp1li8993a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var list = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                if (i % (num % 10) != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) list = list :+ i\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122719,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1(tmphcozkn0m.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmphcozkn0m.scala:18)\n\tat Problem$.main(tmphcozkn0m.scala:22)\n\tat Problem.main(tmphcozkn0m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.map(_.asDigit).toList\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122694,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmp00sqiv_o.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp00sqiv_o.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmp00sqiv_o.scala:10)\n\tat Problem$.main(tmp00sqiv_o.scala:14)\n\tat Problem.main(tmp00sqiv_o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, divisor : Long) : Boolean = {\n            if (divisor == 0) true\n            else if (num % divisor == 0) divisibleByDigitsHelper(num, divisor / 10)\n            else false\n        }\n        (startnum to endnum).filter(x => divisibleByDigitsHelper(x, x)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122719,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsfn13j3m.scala:14)\n\tat Problem.main(tmpsfn13j3m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            var n = num\n            while (n > 0) {\n                val digit = n % 10\n                if (digit == 0 || num % digit != 0) return false\n                n /= 10\n            }\n            true\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head != 0) false\n            else divisibleByDigitsHelper(num, digits.tail)\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmpaiqo7v_m.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmpaiqo7v_m.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpaiqo7v_m.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpaiqo7v_m.scala:14)\n\tat Problem$.main(tmpaiqo7v_m.scala:17)\n\tat Problem.main(tmpaiqo7v_m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpjhe8nnom.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigitsHelper$1(tmpjhe8nnom.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpjhe8nnom.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpjhe8nnom.scala:10)\n\tat Problem$.main(tmpjhe8nnom.scala:13)\n\tat Problem.main(tmpjhe8nnom.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.to",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val l = ListBuffer[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) l += i\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122716,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwqmdby2l.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toLong))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmpsq3301_j.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmpsq3301_j.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpsq3301_j.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpsq3301_j.scala:14)\n\tat Problem$.main(tmpsq3301_j.scala:17)\n\tat Problem.main(tmpsq3301_j.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList\n            var flag = true\n            for (j <- digits) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122716,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpal2zm_4g.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var num = i\n            var isDivisible = true\n            while (num > 0) {\n                val digit = num % 10\n                if (digit != 0 && i % digit != 0) {\n                    isDivisible = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (isDivisible) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122719,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr7rsbwc_.scala:23)\n\tat Problem.main(tmpr7rsbwc_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122719,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$1$$anonfun$1(tmp4d5ehmo2.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$1(tmp4d5ehmo2.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp4d5ehmo2.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp4d5ehmo2.scala:10)\n\tat Problem$.main(tmp4d5ehmo2.scala:13)\n\tat Problem.main(tmp4d5ehmo2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.C",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                val digit = num % 10\n                if (digit == 0 || i % digit != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) result ::= i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr5lzqk_i.scala:23)\n\tat Problem.main(tmpr5lzqk_i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmp6ahff_lm.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmp6ahff_lm.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp6ahff_lm.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp6ahff_lm.scala:14)\n\tat Problem$.main(tmp6ahff_lm.scala:17)\n\tat Problem.main(tmp6ahff_lm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            var n = num\n            while (n > 0) {\n                val digit = n % 10\n                if (digit == 0 || num % digit != 0) return false\n                n /= 10\n            }\n            true\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122719,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpozgyz3ib.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigitsHelper$1(tmpozgyz3ib.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpozgyz3ib.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpozgyz3ib.scala:10)\n\tat Problem$.main(tmpozgyz3ib.scala:13)\n\tat Problem.main(tmpozgyz3ib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:2",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(n : Long) : Boolean = {\n            n.toString.map(x => x.asDigit).forall(x => n % x == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122719,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$2(tmphy1s0tyu.scala:7)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigitsHelper$1(tmphy1s0tyu.scala:7)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmphy1s0tyu.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmphy1s0tyu.scala:9)\n\tat Problem$.main(tmphy1s0tyu.scala:12)\n\tat Problem.main(tmphy1s0tyu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            if (i.toString.forall(c => i % (c - '0') == 0)) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122696,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmplf85os5y.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$adapted$1(tmplf85os5y.scala:8)\n\tat scala.collection.StringOps$.forall$extension(StringOps.scala:1059)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmplf85os5y.scala:8)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmplf85os5y.scala:9)\n\tat Problem$.main(tmplf85os5y.scala:13)\n\tat Problem.main(tmplf85os5y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1j1nh1di.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigits(num : Long) : Boolean = {\n            num.toString.map(_.asDigit).forall(num % _ == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122719,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$1$$anonfun$2(tmp50l9_61d.scala:7)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigits$1(tmp50l9_61d.scala:7)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp50l9_61d.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp50l9_61d.scala:9)\n\tat Problem$.main(tmp50l9_61d.scala:12)\n\tat Problem.main(tmp50l9_61d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.t",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toInt)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmpla7n5kxa.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpla7n5kxa.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpla7n5kxa.scala:10)\n\tat Problem$.main(tmpla7n5kxa.scala:14)\n\tat Problem.main(tmpla7n5kxa.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.isDivisibleByDigits$1$$anonfun$1(tmp9oathjlk.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.isDivisibleByDigits$1(tmp9oathjlk.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp9oathjlk.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp9oathjlk.scala:10)\n\tat Problem$.main(tmp9oathjlk.scala:13)\n\tat Problem.main(tmp9oathjlk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runn",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(x => x.asDigit)\n            if (digits.forall(x => i % x == 0)) result = result :+ i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmpj7_v57s9.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpj7_v57s9.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpj7_v57s9.scala:10)\n\tat Problem$.main(tmpj7_v57s9.scala:14)\n\tat Problem.main(tmpj7_v57s9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.toString.toInt)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmp0ine0ofq.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigitsHelper$1(tmp0ine0ofq.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp0ine0ofq.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp0ine0ofq.scala:10)\n\tat Problem$.main(tmp0ine0ofq.scala:13)\n\tat Problem.main(tmp0ine0ofq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.to",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var num = i\n            var flag = true\n            while (num > 0) {\n                var digit = num % 10\n                if (digit == 0 || i % digit != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) result = result :+ i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.toString.toInt) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdfi69of6.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisible(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisible).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509881,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisible$1$$anonfun$1(tmp7ficcctx.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisible$1(tmp7ficcctx.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp7ficcctx.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp7ficcctx.scala:10)\n\tat Problem$.main(tmp7ficcctx.scala:13)\n\tat Problem.main(tmp7ficcctx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runA",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpozgyz3ib.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigitsHelper$1(tmpozgyz3ib.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpozgyz3ib.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpozgyz3ib.scala:10)\n\tat Problem$.main(tmpozgyz3ib.scala:13)\n\tat Problem.main(tmpozgyz3ib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:2",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122685,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var res = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.toString.toInt) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) res = res :+ i\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122716,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr08bnhrx.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            def divisibleByDigitsHelperHelper(num : Long, digit : Int) : Boolean = {\n                if (digit == 0) true\n                else if (num % digit == 0) divisibleByDigitsHelperHelper(num, digit / 10)\n                else false\n            }\n            divisibleByDigitsHelperHelper(num, num.toString.toInt)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122720,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp58xlotia.scala:17)\n\tat Problem.main(tmp58xlotia.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toInt))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122693,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmp4_c6qi3z.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmp4_c6qi3z.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp4_c6qi3z.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp4_c6qi3z.scala:14)\n\tat Problem$.main(tmp4_c6qi3z.scala:17)\n\tat Problem.main(tmp4_c6qi3z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num != 0) {\n                var digit = num % 10\n                if (i % digit != 0) {\n                    flag = false\n                    num = 0\n                } else {\n                    num /= 10\n                }\n            }\n            if (flag) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122721,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpak39mmd2.scala:12)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpak39mmd2.scala:20)\n\tat Problem$.main(tmpak39mmd2.scala:24)\n\tat Problem.main(tmpak39mmd2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = ListBuffer[Long]()\n        for (i <- startnum to endnum) {\n            val digits = i.toString.map(_.asDigit)\n            if (digits.forall(i % _ == 0)) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmp8s648rzu.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp8s648rzu.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmp8s648rzu.scala:10)\n\tat Problem$.main(tmp8s648rzu.scala:14)\n\tat Problem.main(tmp8s648rzu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunn",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122682,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2oi56erm.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcgja1ivc.scala:13)\n\tat Problem.main(tmpcgja1ivc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(num => isDivisibleByDigits(num)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.isDivisibleByDigits$1$$anonfun$1(tmporb0yjan.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.isDivisibleByDigits$1(tmporb0yjan.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmporb0yjan.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmporb0yjan.scala:10)\n\tat Problem$.main(tmporb0yjan.scala:13)\n\tat Problem.main(tmporb0yjan.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat d",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        (startnum to endnum).filter(x => x.toString.forall(y => x % y.asDigit == 0)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122697,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmp_dagv6nj.scala:6)\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$adapted$1(tmp_dagv6nj.scala:6)\n\tat scala.collection.StringOps$.forall$extension(StringOps.scala:1059)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp_dagv6nj.scala:6)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp_dagv6nj.scala:6)\n\tat Problem$.main(tmp_dagv6nj.scala:9)\n\tat Problem.main(tmp_dagv6nj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRu",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisibleByDigit(num : Long, digit : Long) : Boolean = {\n                if (digit == 0) true\n                else if (num % digit == 0) isDivisibleByDigit(num, digit / 10)\n                else false\n            }\n            isDivisibleByDigit(num, num)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnfm0n236.scala:17)\n\tat Problem.main(tmpnfm0n236.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            var digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpnpm60xu4.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigitsHelper$1(tmpnpm60xu4.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpnpm60xu4.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpnpm60xu4.scala:10)\n\tat Problem$.main(tmpnpm60xu4.scala:13)\n\tat Problem.main(tmpnpm60xu4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:2",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122704,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1j1nh1di.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisible(n : Long) : Boolean = {\n            val digits = n.toString.map(_.asDigit)\n            digits.forall(d => d != 0 && n % d == 0)\n        }\n        (startnum to endnum).filter(divisible).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122719,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$1$$anonfun$1(tmp1li8993a.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.divisibleByDigits$1(tmp1li8993a.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp1li8993a.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp1li8993a.scala:10)\n\tat Problem$.main(tmp1li8993a.scala:13)\n\tat Problem.main(tmp1li8993a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, divisor : Long) : Boolean = {\n            if (num == 0) true\n            else if (num % 10 == 0) false\n            else if (divisor % (num % 10) == 0) divisibleByDigitsHelper(num / 10, divisor)\n            else false\n        }\n        (startnum to endnum).filter(x => divisibleByDigitsHelper(x, x)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(d => d != 0 && num % d == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.toString.toInt) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509878,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdfi69of6.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.toString.toInt)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122709,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmp0ine0ofq.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigitsHelper$1(tmp0ine0ofq.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp0ine0ofq.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp0ine0ofq.scala:10)\n\tat Problem$.main(tmp0ine0ofq.scala:13)\n\tat Problem.main(tmp0ine0ofq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.to",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head != 0) false\n            else divisibleByDigitsHelper(num, digits.tail)\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toInt))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1(tmpcacet6gb.scala:8)\n\tat Problem$.divisibleByDigitsHelper2$1(tmpcacet6gb.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpcacet6gb.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpcacet6gb.scala:14)\n\tat Problem$.main(tmpcacet6gb.scala:17)\n\tat Problem.main(tmpcacet6gb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisible(n : Long) : Boolean = {\n            val digits = n.toString.map(_.asDigit)\n            digits.forall(d => d != 0 && n % d == 0)\n        }\n        (startnum to endnum).filter(divisible).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var isDivisible = true\n            for (j <- i.toString) {\n                if (j == '0') {\n                    isDivisible = false\n                    break\n                }\n                if (i % (j - '0') != 0) {\n                    isDivisible = false\n                    break\n                }\n            }\n            if (isDivisible) result = i :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122722,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp713kg2z.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp713kg2z.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    break\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toLong)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1$$anonfun$1(tmpwwf9j6vh.scala:9)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpwwf9j6vh.scala:9)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmpwwf9j6vh.scala:10)\n\tat Problem$.main(tmpwwf9j6vh.scala:14)\n\tat Problem.main(tmpwwf9j6vh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122708,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.isDivisibleByDigits$1$$anonfun$1(tmp9oathjlk.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.isDivisibleByDigits$1(tmp9oathjlk.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp9oathjlk.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp9oathjlk.scala:10)\n\tat Problem$.main(tmp9oathjlk.scala:13)\n\tat Problem.main(tmp9oathjlk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runn",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisibleByDigit(digit : Long) : Boolean = {\n                num % digit == 0\n            }\n            num.toString.map(_.asDigit).forall(isDivisibleByDigit)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.isDivisibleByDigit$1(tmp465eo_ac.scala:8)\n\tat Problem$.isDivisibleByDigits$1$$anonfun$2(tmp465eo_ac.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.IterableOnceOps.forall(IterableOnce.scala:577)\n\tat scala.collection.IterableOnceOps.forall$(IterableOnce.scala:574)\n\tat scala.collection.AbstractIterable.forall(Iterable.scala:926)\n\tat Problem$.isDivisibleByDigits$1(tmp465eo_ac.scala:10)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp465eo_ac.scala:12)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmp465eo_ac.scala:12)\n\tat Problem$.main(tmp465eo_ac.scala:15)\n\tat Problem.main(tmp465eo_ac.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.t",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisibleByDigit(num : Long, digit : Int) : Boolean = {\n                if (num % digit == 0) true\n                else false\n            }\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(isDivisibleByDigit(num, _))\n        }\n        (startnum to endnum).filter(isDivisibleByDigits(_)).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122724,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.isDivisibleByDigit$1(tmpt5j0zwbg.scala:8)\n\tat Problem$.isDivisibleByDigits$1$$anonfun$1(tmpt5j0zwbg.scala:12)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.isDivisibleByDigits$1(tmpt5j0zwbg.scala:12)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpt5j0zwbg.scala:14)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpt5j0zwbg.scala:14)\n\tat Problem$.main(tmpt5j0zwbg.scala:17)\n\tat Problem.main(tmpt5j0zwbg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.Obje",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                if (i % (num % 10) != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) result = i :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509882,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigits$$anonfun$1(tmp9gwk3uw5.scala:11)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\tat scala.collection.immutable.NumericRange.foreach(NumericRange.scala:115)\n\tat Problem$.divisibleByDigits(tmp9gwk3uw5.scala:18)\n\tat Problem$.main(tmp9gwk3uw5.scala:22)\n\tat Problem.main(tmp9gwk3uw5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList\n    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122686,
      "stdout": "",
      "stderr": "java.lang.ArithmeticException: / by zero\n\tat Problem$.divisibleByDigitsHelper$1$$anonfun$1(tmpjhe8nnom.scala:8)\n\tat scala.runtime.java8.JFunction1$mcZI$sp.apply(JFunction1$mcZI$sp.scala:17)\n\tat scala.collection.immutable.List.forall(List.scala:386)\n\tat Problem$.divisibleByDigitsHelper$1(tmpjhe8nnom.scala:8)\n\tat Problem$.divisibleByDigits$$anonfun$1(tmpjhe8nnom.scala:10)\n\tat scala.runtime.java8.JFunction1$mcZJ$sp.apply(JFunction1$mcZJ$sp.scala:17)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl(StrictOptimizedIterableOps.scala:227)\n\tat scala.collection.StrictOptimizedIterableOps.filterImpl$(StrictOptimizedIterableOps.scala:222)\n\tat scala.collection.immutable.NumericRange.filterImpl(NumericRange.scala:40)\n\tat scala.collection.StrictOptimizedIterableOps.filter(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.StrictOptimizedIterableOps.filter$(StrictOptimizedIterableOps.scala:218)\n\tat scala.collection.immutable.NumericRange.filter(NumericRange.scala:40)\n\tat Problem$.divisibleByDigits(tmpjhe8nnom.scala:10)\n\tat Problem$.main(tmpjhe8nnom.scala:13)\n\tat Problem.main(tmpjhe8nnom.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.to",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}