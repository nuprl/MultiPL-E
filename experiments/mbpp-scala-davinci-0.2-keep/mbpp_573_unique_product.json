{
  "name": "mbpp_573_unique_product",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to calculate the product of the unique numbers in a given list.\n    def uniqueProduct(list_data : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueProduct((List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 20l.toLong, 50l.toLong, 60l.toLong, 40l.toLong))) == (720000000l));\n    assert(uniqueProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong))) == (6l));\n    assert(uniqueProduct((List[Long](7l.toLong, 8l.toLong, 9l.toLong, 0l.toLong, 1l.toLong, 1l.toLong))) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        list_data.distinct.product",
    "        val unique_numbers = list_data.toSet\n        return unique_numbers.product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                product *= i\n                set += i\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!unique_numbers.contains(i)) {\n                unique_numbers += i\n                product *= i\n            }\n        }\n        return product",
    "        list_data.distinct.product",
    "        list_data.distinct.product",
    "        var product : Long = 1\n        var set_data : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!set_data.contains(i)) {\n                set_data += i\n                product *= i\n            }\n        }\n        return product",
    "        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                set += i\n                product *= i\n            }\n        }\n        product",
    "        var result : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_data.contains(i)) {\n                unique_data = i :: unique_data\n            }\n        }\n        for (i <- unique_data) {\n            result *= i\n        }\n        return result",
    "        var product : Long = 1\n        var unique : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!unique.contains(i)) {\n                unique += i\n                product *= i\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var set : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                product *= i\n                set += i\n            }\n        }\n        return product",
    "        val unique_data = list_data.toSet\n        unique_data.product",
    "        val unique_data = list_data.toSet\n        unique_data.product",
    "        var product : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_data.contains(i)) {\n                unique_data = i :: unique_data\n                product *= i\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_data.contains(i)) {\n                unique_data = i :: unique_data\n                product *= i\n            }\n        }\n        return product",
    "        list_data.distinct.product",
    "        var product : Long = 1\n        var unique_data = list_data.distinct\n        for (i <- unique_data) {\n            product *= i\n        }\n        return product",
    "        val unique_numbers = list_data.distinct\n        unique_numbers.product",
    "        var product = 1L\n        var unique_numbers = new HashSet[Long]()\n        for (i <- list_data) {\n            if (!unique_numbers.contains(i)) {\n                unique_numbers.add(i)\n                product *= i\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        return product",
    "        list_data.distinct.product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!unique_numbers.contains(i)) {\n                unique_numbers += i\n                product *= i\n            }\n        }\n        return product",
    "        list_data.distinct.product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        var set_data = Set[Long]()\n        for (i <- list_data) {\n            set_data += i\n        }\n        var product = 1L\n        for (i <- set_data) {\n            product *= i\n        }\n        return product",
    "        var product : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_data.contains(list_data(i))) {\n                unique_data = unique_data :+ list_data(i)\n            }\n        }\n        for (i <- 0 until unique_data.length) {\n            product *= unique_data(i)\n        }\n        return product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        var product : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_data.contains(i)) {\n                unique_data = i :: unique_data\n            }\n        }\n        for (i <- unique_data) {\n            product *= i\n        }\n        return product",
    "        val unique_list = list_data.distinct\n        unique_list.foldLeft(1L)(_ * _)",
    "        list_data.distinct.product",
    "        var product = 1L\n        var unique = new HashSet[Long]\n        for (i <- list_data) {\n            if (!unique.contains(i)) {\n                unique += i\n                product *= i\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        return product",
    "        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                product *= i\n                set += i\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        product",
    "        list_data.foldLeft(1L)((a, b) => a * b)",
    "        var product : Long = 1\n        var set_data = Set[Long]()\n        for (i <- list_data) {\n            if (!set_data.contains(i)) {\n                product *= i\n                set_data += i\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        return product",
    "        list_data.distinct.product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        return product",
    "        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (i <- 0 until list_data.length) {\n            if (!unique_numbers.contains(list_data(i))) {\n                unique_numbers += list_data(i)\n                product *= list_data(i)\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var uniqueList : List[Long] = List()\n        for (i <- list_data) {\n            if (!uniqueList.contains(i)) {\n                uniqueList = i :: uniqueList\n                product *= i\n            }\n        }\n        return product",
    "        var product = 1L\n        var unique_list = list_data.toSet\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!unique_numbers.contains(i)) {\n                unique_numbers += i\n                product *= i\n            }\n        }\n        return product",
    "        list_data.distinct.product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!unique_numbers.contains(i)) {\n                unique_numbers += i\n                product *= i\n            }\n        }\n        return product",
    "        list_data.distinct.product",
    "        var product = 1L\n        var set = Set[Long]()\n        for (x <- list_data) {\n            if (!set.contains(x)) {\n                product *= x\n                set += x\n            }\n        }\n        return product",
    "        list_data.toSet.product",
    "        var product : Long = 1\n        var unique_data = list_data.distinct\n        for (i <- unique_data) {\n            product *= i\n        }\n        return product",
    "        list_data.distinct.product",
    "        val unique_data = list_data.toSet\n        unique_data.product",
    "        list_data.distinct.product",
    "        var product : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_data.contains(i)) {\n                unique_data = i :: unique_data\n            }\n        }\n        for (i <- unique_data) {\n            product *= i\n        }\n        return product",
    "        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        list_data.distinct.product",
    "        var unique_numbers = new HashSet[Long]()\n        for (i <- list_data) {\n            unique_numbers += i\n        }\n        var product = 1L\n        for (i <- unique_numbers) {\n            product *= i\n        }\n        return product",
    "        var product = 1L\n        var unique_numbers = Set[Long]()\n        for (i <- list_data) {\n            if (!unique_numbers.contains(i)) {\n                unique_numbers += i\n                product *= i\n            }\n        }\n        return product",
    "        var product = 1L\n        var unique_numbers = new HashSet[Long]\n        for (i <- list_data) {\n            if (!unique_numbers.contains(i)) {\n                unique_numbers += i\n                product *= i\n            }\n        }\n        return product",
    "        var result : Long = 1\n        var unique_numbers = new HashSet[Long]()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                result *= number\n                unique_numbers.add(number)\n            }\n        }\n        return result",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        return product",
    "        list_data.distinct.product",
    "        var product : Long = 1\n        var unique_set : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!unique_set.contains(i)) {\n                unique_set += i\n                product *= i\n            }\n        }\n        return product",
    "        val set = list_data.toSet\n        set.foldLeft(1L)(_ * _)",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        list_data.distinct.product",
    "        val unique_list = list_data.distinct\n        unique_list.product",
    "        var unique_list = list_data.distinct\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!unique_numbers.contains(i)) {\n                unique_numbers += i\n                product *= i\n            }\n        }\n        return product",
    "        list_data.foldLeft(1L)((x, y) => x * y)",
    "        var unique_list = list_data.distinct\n        var product : Long = 1\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        val unique = list_data.toSet\n        unique.product",
    "        var product : Long = 1\n        var unique_numbers : List[Long] = List()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers = unique_numbers :+ number\n            }\n        }\n        for (number <- unique_numbers) {\n            product *= number\n        }\n        return product",
    "        val unique_data = list_data.toSet\n        unique_data.reduceLeft(_ * _)",
    "        var product : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_data.contains(list_data(i))) {\n                unique_data = unique_data :+ list_data(i)\n                product *= list_data(i)\n            }\n        }\n        return product",
    "        val unique = list_data.toSet\n        unique.reduceLeft(_ * _)",
    "        var product = 1L\n        var unique = new HashSet[Long]\n        for (i <- list_data) {\n            if (!unique.contains(i)) {\n                product *= i\n                unique += i\n            }\n        }\n        return product",
    "        var unique_list = List[Long]()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        var product = 1L\n        var unique_numbers = new HashSet[Long]\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                product *= number\n                unique_numbers.add(number)\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        product",
    "        var product : Long = 1\n        var unique_numbers : List[Long] = List()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers = number :: unique_numbers\n                product *= number\n            }\n        }\n        return product",
    "        val unique_list = list_data.distinct\n        unique_list.product",
    "        val unique_data = list_data.distinct\n        unique_data.product",
    "        list_data.distinct.product",
    "        list_data.distinct.product",
    "        val unique = list_data.toSet\n        unique.reduceLeft(_ * _)",
    "        var product : Long = 1\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                set += i\n                product *= i\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        return product",
    "        var unique_data = list_data.toSet\n        var product = 1L\n        for (i <- unique_data) {\n            product *= i\n        }\n        return product",
    "        list_data.distinct.product",
    "        val set = list_data.toSet\n        set.reduceLeft(_ * _)",
    "        list_data.toSet.product",
    "        val unique_data = list_data.distinct\n        unique_data.product",
    "        var result : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_data.contains(i)) {\n                unique_data = i :: unique_data\n            }\n        }\n        for (i <- unique_data) {\n            result *= i\n        }\n        return result",
    "        var product : Long = 1\n        var unique_numbers : List[Long] = List()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers = number :: unique_numbers\n            }\n        }\n        for (number <- unique_numbers) {\n            product *= number\n        }\n        return product",
    "        list_data.foldLeft(1L)((acc, x) => if (list_data.count(_ == x) == 1) acc * x else acc)",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!unique_numbers.contains(i)) {\n                unique_numbers += i\n                product *= i\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        return product",
    "        list_data.distinct.product",
    "        var product : Long = 1\n        var unique_data = list_data.distinct\n        for (i <- unique_data) {\n            product *= i\n        }\n        return product",
    "        val unique_numbers = list_data.toSet\n        unique_numbers.product",
    "        val unique_numbers = list_data.toSet\n        unique_numbers.foldLeft(1L)(_ * _)",
    "        var unique_list = list_data.toSet\n        var product = 1L\n        for (i <- unique_list) {\n            product *= i\n        }\n        product",
    "        var product : Long = 1\n        var uniqueList = list_data.distinct\n        for (i <- uniqueList) {\n            product *= i\n        }\n        return product",
    "        var product : Long = 1\n        var set_data = Set[Long]()\n        for (i <- list_data) {\n            if (!set_data.contains(i)) {\n                set_data += i\n                product *= i\n            }\n        }\n        return product",
    "        val unique = list_data.toSet\n        unique.product",
    "        val unique_list = list_data.distinct\n        unique_list.foldLeft(1L)(_ * _)",
    "        list_data.distinct.product",
    "        var unique_numbers = new HashSet[Long]()\n        for (i <- list_data) {\n            unique_numbers += i\n        }\n        var product = 1L\n        for (i <- unique_numbers) {\n            product *= i\n        }\n        return product",
    "        var product = 1L\n        var unique_numbers = new HashSet[Long]\n        for (i <- list_data) {\n            if (!unique_numbers.contains(i)) {\n                product *= i\n                unique_numbers.add(i)\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_data.contains(list_data(i))) {\n                unique_data = unique_data :+ list_data(i)\n            }\n        }\n        for (i <- 0 until unique_data.length) {\n            product *= unique_data(i)\n        }\n        return product",
    "        var product = 1L\n        var unique_numbers = new HashSet[Long]\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers.add(number)\n                product *= number\n            }\n        }\n        product",
    "        var product = 1L\n        var unique_numbers = new HashSet[Long]\n        for (i <- list_data) {\n            if (!unique_numbers.contains(i)) {\n                unique_numbers += i\n                product *= i\n            }\n        }\n        product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!unique_numbers.contains(i)) {\n                unique_numbers += i\n                product *= i\n            }\n        }\n        product",
    "        var product : Long = 1\n        var set_data : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!set_data.contains(i)) {\n                product *= i\n                set_data.add(i)\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_data.contains(i)) {\n                unique_data = i :: unique_data\n            }\n        }\n        for (i <- unique_data) {\n            product *= i\n        }\n        return product",
    "        list_data.distinct.product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        return product",
    "        val unique_list = list_data.distinct\n        unique_list.foldLeft(1L)(_ * _)",
    "        var product : Long = 1\n        var unique_list = list_data.distinct\n        for (i <- unique_list) {\n            product *= i\n        }\n        product",
    "        list_data.distinct.product",
    "        var product : Long = 1\n        var unique_data = list_data.distinct\n        for (i <- unique_data) {\n            product *= i\n        }\n        return product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!unique_numbers.contains(i)) {\n                product *= i\n                unique_numbers += i\n            }\n        }\n        product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        var product = 1L\n        var unique = new HashSet[Long]\n        for (i <- list_data) {\n            if (!unique.contains(i)) {\n                product *= i\n                unique.add(i)\n            }\n        }\n        product",
    "        val unique_numbers = list_data.distinct\n        unique_numbers.foldLeft(1L)(_ * _)",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        product",
    "        var unique_data = list_data.toSet\n        var product = 1L\n        for (i <- unique_data) {\n            product *= i\n        }\n        return product",
    "        var product : Long = 1\n        var unique_data : Set[Long] = Set()\n        for (data <- list_data) {\n            if (!unique_data.contains(data)) {\n                product *= data\n                unique_data += data\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n                product *= i\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_numbers = new HashSet[Long]\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers.add(number)\n                product *= number\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n                product *= i\n            }\n        }\n        return product",
    "        var product = 1L\n        var unique_numbers = new HashSet[Long]\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        return product",
    "        list_data.distinct.product",
    "        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                set += i\n                product *= i\n            }\n        }\n        return product",
    "        val unique = list_data.distinct\n        unique.foldLeft(1L)(_ * _)",
    "        var unique_list = list_data.toSet\n        var product : Long = 1\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        list_data.distinct.product",
    "        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                set += i\n                product *= i\n            }\n        }\n        product",
    "        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                set += i\n                product *= i\n            }\n        }\n        product",
    "        val unique_data = list_data.distinct\n        unique_data.product",
    "        var product : Long = 1\n        var unique_data = list_data.distinct\n        for (i <- unique_data) {\n            product *= i\n        }\n        return product",
    "        var product : Long = 1\n        var unique_numbers : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_numbers.contains(list_data(i))) {\n                unique_numbers = unique_numbers :+ list_data(i)\n            }\n        }\n        for (i <- 0 until unique_numbers.length) {\n            product *= unique_numbers(i)\n        }\n        return product",
    "        var product : Long = 1\n        var set_data = Set[Long]()\n        for (i <- list_data) {\n            set_data += i\n        }\n        for (i <- set_data) {\n            product *= i\n        }\n        return product",
    "        val set = list_data.toSet\n        set.foldLeft(1L)((a, b) => a * b)",
    "        list_data.distinct.product",
    "        val unique_data = list_data.distinct\n        unique_data.foldLeft(1L)((a, b) => a * b)",
    "        var product : Long = 1\n        var unique : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!unique.contains(i)) {\n                product *= i\n                unique += i\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_data.contains(i)) {\n                unique_data = i :: unique_data\n                product *= i\n            }\n        }\n        return product",
    "        var result = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                set.add(i)\n                result *= i\n            }\n        }\n        return result",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        var unique_data = list_data.distinct\n        var product = 1L\n        for (i <- unique_data) {\n            product *= i\n        }\n        return product",
    "        var product : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_data.contains(list_data(i))) {\n                unique_data = list_data(i) :: unique_data\n                product *= list_data(i)\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_data.contains(list_data(i))) {\n                unique_data = list_data(i) :: unique_data\n            }\n        }\n        for (i <- 0 until unique_data.length) {\n            product *= unique_data(i)\n        }\n        return product",
    "        val unique_list = list_data.toSet\n        unique_list.product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        return product",
    "        val unique_numbers = list_data.toSet\n        unique_numbers.product",
    "        val unique_data = list_data.distinct\n        unique_data.product",
    "        list_data.distinct.product",
    "        var product : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_data.contains(list_data(i))) {\n                unique_data = unique_data :+ list_data(i)\n            }\n        }\n        for (i <- 0 until unique_data.length) {\n            product *= unique_data(i)\n        }\n        return product",
    "        var product : Long = 1\n        var unique_data : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_data.contains(list_data(i))) {\n                unique_data = unique_data :+ list_data(i)\n            }\n        }\n        for (i <- 0 until unique_data.length) {\n            product *= unique_data(i)\n        }\n        return product",
    "        var product : Long = 1\n        var unique_numbers = Set[Long]()\n        for (i <- 0 until list_data.length) {\n            if (!unique_numbers.contains(list_data(i))) {\n                unique_numbers += list_data(i)\n                product *= list_data(i)\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_numbers : List[Long] = List()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers = unique_numbers :+ number\n            }\n        }\n        for (number <- unique_numbers) {\n            product *= number\n        }\n        return product",
    "        var product = 1L\n        var unique_numbers = new HashSet[Long]\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers.add(number)\n                product *= number\n            }\n        }\n        return product",
    "        val unique_list = list_data.distinct\n        unique_list.product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- 0 until list_data.length) {\n            if (!unique_list.contains(list_data(i))) {\n                unique_list = unique_list :+ list_data(i)\n            }\n        }\n        for (i <- 0 until unique_list.length) {\n            product *= unique_list(i)\n        }\n        return product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        val unique = list_data.distinct\n        unique.foldLeft(1L)(_ * _)",
    "        var product : Long = 1\n        var unique_numbers = new HashSet[Long]\n        for (i <- 0 until list_data.length) {\n            if (!unique_numbers.contains(list_data(i))) {\n                unique_numbers.add(list_data(i))\n                product *= list_data(i)\n            }\n        }\n        return product",
    "        val set_data = list_data.toSet\n        set_data.foldLeft(1L)(_ * _)",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        list_data.distinct.product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = i :: unique_list\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        list_data.distinct.product",
    "        var product = 1L\n        var set = Set[Long]()\n        for (i <- list_data) {\n            if (!set.contains(i)) {\n                product *= i\n                set += i\n            }\n        }\n        product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers += number\n                product *= number\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var unique_data = list_data.distinct\n        for (i <- unique_data) {\n            product *= i\n        }\n        return product",
    "        val unique_data = list_data.distinct\n        unique_data.foldLeft(1L)(_ * _)",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) {\n                unique_list = unique_list :+ i\n            }\n        }\n        for (i <- unique_list) {\n            product *= i\n        }\n        return product",
    "        val unique_numbers = list_data.distinct\n        var product = 1L\n        for (number <- unique_numbers) {\n            product *= number\n        }\n        return product",
    "        val unique_data = list_data.distinct\n        unique_data.product",
    "        val set_data = list_data.toSet\n        set_data.product",
    "        val unique_list = list_data.distinct\n        unique_list.foldLeft(1L)(_ * _)",
    "        var product : Long = 1\n        var unique : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!unique.contains(i)) {\n                unique += i\n                product *= i\n            }\n        }\n        return product",
    "        val unique_list = list_data.toSet\n        unique_list.product",
    "        var product : Long = 1\n        var unique_numbers : List[Long] = List()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                unique_numbers = number :: unique_numbers\n                product *= number\n            }\n        }\n        return product",
    "        val unique_list = list_data.distinct\n        unique_list.product",
    "        var product : Long = 1\n        var unique_list : List[Long] = List()\n        for (i <- list_data) {\n            if (!unique_list.contains(i)) unique_list = unique_list :+ i\n        }\n        for (i <- unique_list) product *= i\n        return product",
    "        list_data.distinct.product",
    "        var product : Long = 1\n        var unique_numbers : Set[Long] = Set()\n        for (number <- list_data) {\n            if (!unique_numbers.contains(number)) {\n                product *= number\n                unique_numbers += number\n            }\n        }\n        return product",
    "        var product : Long = 1\n        var set_data : Set[Long] = Set()\n        for (i <- list_data) {\n            if (!set_data.contains(i)) {\n                set_data += i\n                product *= i\n            }\n        }\n        return product"
  ]
}