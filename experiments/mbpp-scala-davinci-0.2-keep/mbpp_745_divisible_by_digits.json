{
  "name": "mbpp_745_divisible_by_digits",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        def divisible(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisible).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                if (i % (num % 10) != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) result = i :: result\n        }\n        result",
    "        def isDivisibleByDigits(n : Long) : Boolean = {\n            val digits = n.toString.map(_.toString.toInt).toList\n            digits.forall(d => n % d == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            digits match {\n                case Nil => true\n                case x :: xs => if (num % x == 0) divisibleByDigitsHelper(num, xs) else false\n            }\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.map(x => x.asDigit.toLong).toList)\n        }\n        (startnum to endnum).filter(x => divisibleByDigitsHelper2(x)).toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2(_)).toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisible(num : Long, digit : Long) : Boolean = {\n                if (digit == 0) true\n                else if (num % digit == 0) isDivisible(num, digit / 10)\n                else false\n            }\n            isDivisible(num, num)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        def divisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(d => d != 0 && num % d == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigits).toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.toString.toInt) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.toString.toInt) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.toString.toInt)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        val result = ListBuffer[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.toString.toInt != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                result += i\n            }\n        }\n        result.toList",
    "        def divisibleByDigitsHelper(num : Long, divisor : Long) : Boolean = {\n            if (divisor == 0) true\n            else if (num % divisor == 0) divisibleByDigitsHelper(num, divisor / 10)\n            else false\n        }\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            if (divisibleByDigitsHelper(i, i)) result = i :: result\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            var digits = num.toString.toList\n            digits.forall(digit => num % digit.asDigit == 0)\n        }\n        (startnum to endnum).filter(num => divisibleByDigitsHelper(num)).toList",
    "        val l = (startnum to endnum).toList.filter(x => x.toString.forall(y => x % y.asDigit == 0))\n        l",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisibleByDigit(digit : Char) : Boolean = {\n                val digitInt = digit.asDigit\n                digitInt != 0 && num % digitInt == 0\n            }\n            num.toString.forall(isDivisibleByDigit)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toLong)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            def divisibleByDigitsHelperHelper(num : Long, digits : List[Long]) : Boolean = {\n                if (digits.isEmpty) true\n                else if (num % digits.head != 0) false\n                else divisibleByDigitsHelperHelper(num, digits.tail)\n            }\n            divisibleByDigitsHelperHelper(num, num.toString.map(_.asDigit.toLong).toList)\n        }\n        (startnum to endnum).toList.filter(divisibleByDigitsHelper)",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                if (i % (num % 10) != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toInt)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result"
  ]
}