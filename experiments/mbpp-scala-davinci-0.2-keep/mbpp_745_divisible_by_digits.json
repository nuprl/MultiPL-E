{
  "name": "mbpp_745_divisible_by_digits",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        def divisible(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisible).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                if (i % (num % 10) != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) result = i :: result\n        }\n        result",
    "        def isDivisibleByDigits(n : Long) : Boolean = {\n            val digits = n.toString.map(_.toString.toInt).toList\n            digits.forall(d => n % d == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            digits match {\n                case Nil => true\n                case x :: xs => if (num % x == 0) divisibleByDigitsHelper(num, xs) else false\n            }\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.map(x => x.asDigit.toLong).toList)\n        }\n        (startnum to endnum).filter(x => divisibleByDigitsHelper2(x)).toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2(_)).toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisible(num : Long, digit : Long) : Boolean = {\n                if (digit == 0) true\n                else if (num % digit == 0) isDivisible(num, digit / 10)\n                else false\n            }\n            isDivisible(num, num)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        def divisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(d => d != 0 && num % d == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigits).toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.toString.toInt) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.toString.toInt) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.toString.toInt)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        val result = ListBuffer[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.toString.toInt != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                result += i\n            }\n        }\n        result.toList",
    "        def divisibleByDigitsHelper(num : Long, divisor : Long) : Boolean = {\n            if (divisor == 0) true\n            else if (num % divisor == 0) divisibleByDigitsHelper(num, divisor / 10)\n            else false\n        }\n        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            if (divisibleByDigitsHelper(i, i)) result = i :: result\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            var digits = num.toString.toList\n            digits.forall(digit => num % digit.asDigit == 0)\n        }\n        (startnum to endnum).filter(num => divisibleByDigitsHelper(num)).toList",
    "        val l = (startnum to endnum).toList.filter(x => x.toString.forall(y => x % y.asDigit == 0))\n        l",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisibleByDigit(digit : Char) : Boolean = {\n                val digitInt = digit.asDigit\n                digitInt != 0 && num % digitInt == 0\n            }\n            num.toString.forall(isDivisibleByDigit)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toLong)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            def divisibleByDigitsHelperHelper(num : Long, digits : List[Long]) : Boolean = {\n                if (digits.isEmpty) true\n                else if (num % digits.head != 0) false\n                else divisibleByDigitsHelperHelper(num, digits.tail)\n            }\n            divisibleByDigitsHelperHelper(num, num.toString.map(_.asDigit.toLong).toList)\n        }\n        (startnum to endnum).toList.filter(divisibleByDigitsHelper)",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                if (i % (num % 10) != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toInt)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.map(x => x.asDigit.toLong).toList)\n        }\n        (startnum to endnum).filter(x => divisibleByDigitsHelper2(x)).toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.toString.toInt != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var digits = i.toString.toCharArray\n            for (j <- 0 until digits.length) {\n                if (i % (digits(j) - '0') != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = i :: result\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toCharArray.map(_.toString.toLong)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        return result",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.toString.toInt != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        def divisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigits).toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toLong))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.map(_.asDigit).toList)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.toString.toLong)\n            digits.forall(d => d != 0 && num % d == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else {\n                if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n                else false\n            }\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toLong))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(x => num % x == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigits).toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        def isDivisibleByDigits(n : Long) : Boolean = {\n            val digits = n.toString.toList.map(_.asDigit)\n            digits.forall(d => d != 0 && n % d == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisibleByDigit(num : Long, digit : Long) : Boolean = {\n                if (digit == 0) true\n                else if (num % digit == 0) isDivisibleByDigit(num, digit / 10)\n                else false\n            }\n            isDivisibleByDigit(num, num)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var isDivisible = true\n            var num = i\n            while (num > 0) {\n                val digit = num % 10\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (isDivisible) result = result :+ i\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            val digits = i.toString.map(_.asDigit)\n            if (digits.forall(i % _ == 0)) result += i\n        }\n        result.toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toInt))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.map(_.asDigit).toList)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.map(_.asDigit).toList\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.toString.toInt)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.toString.toInt) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                val digit = num % 10\n                if (digit == 0 || i % digit != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.map(_.asDigit)\n            var flag = true\n            for (digit <- digits) {\n                if (i % digit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ i\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toInt)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit.toLong))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.map(_.asDigit.toLong).toList)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisibleByDigit(digit : Long) : Boolean = {\n                if (digit == 0) false\n                else if (num % digit == 0) true\n                else isDivisibleByDigit(digit / 10)\n            }\n            isDivisibleByDigit(num)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            if (i.toString.forall(c => i % (c - '0') == 0)) result += i\n        }\n        result.toList",
    "        def divisibleByDigitsHelper(num : Long, divisor : Long) : Boolean = {\n            if (divisor == 0) true\n            else if (num % divisor == 0) divisibleByDigitsHelper(num, divisor / 10)\n            else false\n        }\n        val result = new ListBuffer[Long]()\n        for (i <- startnum to endnum) {\n            if (divisibleByDigitsHelper(i, i)) result += i\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                val digit = num % 10\n                if (digit == 0) {\n                    flag = false\n                    num = 0\n                } else if (i % digit != 0) {\n                    flag = false\n                    num = 0\n                } else {\n                    num /= 10\n                }\n            }\n            if (flag) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.toString.toInt != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.map(_.asDigit).toList\n            if (digits.forall(i % _ == 0)) result = result :+ i\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(x => x.asDigit)\n            digits.forall(x => num % x == 0)\n        }\n        (startnum to endnum).filter(x => divisibleByDigitsHelper(x)).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toInt)\n            var divisible = true\n            for (d <- digits) {\n                if (i % d != 0) {\n                    divisible = false\n                    break\n                }\n            }\n            if (divisible) result = result :+ i\n        }\n        return result",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            def divisibleByDigitsHelperHelper(num : Long, digit : Long) : Boolean = {\n                if (digit == 0) true\n                else if (num % digit == 0) divisibleByDigitsHelperHelper(num, digit / 10)\n                else false\n            }\n            divisibleByDigitsHelperHelper(num, num)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.toString.toInt).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var isDivisible = true\n            var num = i\n            while (num > 0) {\n                val digit = num % 10\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (isDivisible) result += i\n        }\n        result.toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.map(_.asDigit.toLong).toList)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        def divisible(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisible).toList",
    "        (startnum to endnum).filter(x => x.toString.forall(y => x % y.asDigit == 0)).toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var divisible = true\n            var num = i\n            while (num > 0) {\n                val digit = num % 10\n                if (digit == 0 || i % digit != 0) {\n                    divisible = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (divisible) result += i\n        }\n        result.toList",
    "        def isDivisible(num : Long) : Boolean = {\n            def isDivisible(num : Long, divisor : Long) : Boolean = {\n                if (divisor == 0) true\n                else if (num % divisor == 0) isDivisible(num, divisor / 10)\n                else false\n            }\n            isDivisible(num, num)\n        }\n        (startnum to endnum).filter(isDivisible).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            if (num == 0) return true\n            val digit = num % 10\n            if (digit == 0) return false\n            if (digit % 10 == 0) return false\n            if (digit % (num / 10) != 0) return false\n            divisibleByDigitsHelper(num / 10)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList\n            var divisible = true\n            for (j <- digits) {\n                if (i % j.toString.toInt != 0) {\n                    divisible = false\n                    break\n                }\n            }\n            if (divisible) result = i :: result\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toInt))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.asDigit) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toInt)\n            if (digits.forall(x => i % x == 0)) result = i :: result\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsRecur(num : Long, acc : List[Long]) : List[Long] = {\n            if (num > endnum) acc\n            else if (divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit))) divisibleByDigitsRecur(num + 1, num :: acc)\n            else divisibleByDigitsRecur(num + 1, acc)\n        }\n        divisibleByDigitsRecur(startnum, List())",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var temp = i\n            while (temp > 0) {\n                var digit = temp % 10\n                if (digit == 0 || i % digit != 0) {\n                    flag = false\n                    temp = 0\n                }\n                temp /= 10\n            }\n            if (flag) result = result :+ i\n        }\n        result",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            var temp = i\n            while (temp > 0) {\n                val digit = temp % 10\n                if (digit == 0 || i % digit != 0) {\n                    flag = false\n                    temp = 0\n                }\n                temp /= 10\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.asDigit)\n            if (digits.contains(0)) return false\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.asDigit)\n            if (digits.forall(i % _ == 0)) result = result :+ i\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ i\n        }\n        result",
    "        def isDivisible(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(d => d != 0 && num % d == 0)\n        }\n        (startnum to endnum).filter(isDivisible).toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head != 0) false\n            else divisibleByDigitsHelper(num, digits.tail)\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.map(_.asDigit.toLong).toList)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            num.toString.map(_.asDigit).forall(num % _ == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            if (num == 0) true\n            else if (num % (num % 10) == 0) divisibleByDigitsHelper(num / 10)\n            else false\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.map(_.asDigit).toList\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toInt))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(x => x.toString.toInt)\n            if (digits.forall(x => i % x == 0)) result = i :: result\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.toString.toInt != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            def divisibleByDigitsHelperHelper(num : Long, digit : Long) : Boolean = {\n                if (num == 0) true\n                else if (num % 10 == 0) false\n                else if (digit % (num % 10) != 0) false\n                else divisibleByDigitsHelperHelper(num / 10, digit)\n            }\n            if (num == 0) false\n            else divisibleByDigitsHelperHelper(num, num)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long, divisor : Long) : Boolean = {\n            if (divisor == 0) true\n            else if (num % divisor == 0) divisibleByDigitsHelper(num, divisor / 10)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long, divisor : Long) : Boolean = {\n            if (num == 0) true\n            else if (num % 10 == 0) false\n            else if (divisor % (num % 10) != 0) false\n            else divisibleByDigitsHelper(num / 10, divisor)\n        }\n        (startnum to endnum).filter(x => divisibleByDigitsHelper(x, x)).toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            val digits = i.toString.map(_.asDigit)\n            if (digits.forall(i % _ == 0)) result += i\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var num = i\n            var digits = List[Long]()\n            while (num > 0) {\n                digits = (num % 10) :: digits\n                num /= 10\n            }\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toInt))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            num.toString.map(x => x.asDigit).forall(x => num % x == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.toString.toInt)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisibleByDigit(num : Long, digit : Long) : Boolean = {\n                if (digit == 0) true\n                else if (num % digit == 0) isDivisibleByDigit(num, digit / 10)\n                else false\n            }\n            isDivisibleByDigit(num, num)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                if (i % (num % 10) != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) result = result :+ i\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head != 0) false\n            else divisibleByDigitsHelper(num, digits.tail)\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.asDigit)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            var digits = num.toString.toList.map(x => x.toString.toInt)\n            digits.forall(x => num % x == 0)\n        }\n        (startnum to endnum).filter(x => divisibleByDigitsHelper(x)).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toInt)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var isDivisible = true\n            var num = i\n            while (num > 0) {\n                val digit = num % 10\n                if (digit == 0 || i % digit != 0) {\n                    isDivisible = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (isDivisible) result += i\n        }\n        result.toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.toString.toLong).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisible(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(d => num % d == 0)\n        }\n        (startnum to endnum).filter(divisible).toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toLong))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.toString.toInt).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var num = i\n            var divisible = true\n            while (num > 0) {\n                val digit = num % 10\n                if (digit == 0 || i % digit != 0) {\n                    divisible = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (divisible) result = i :: result\n        }\n        result",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.toString.toInt) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var isDivisible = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    isDivisible = false\n                    break\n                }\n            }\n            if (isDivisible) result = i :: result\n        }\n        result",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            if (i.toString.toList.forall(x => i % x.asDigit == 0)) result += i\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toInt)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        def divisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigits).toList",
    "        var list = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                if (i % (num % 10) != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) list = list :+ i\n        }\n        list",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.map(_.asDigit).toList\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long, divisor : Long) : Boolean = {\n            if (divisor == 0) true\n            else if (num % divisor == 0) divisibleByDigitsHelper(num, divisor / 10)\n            else false\n        }\n        (startnum to endnum).filter(x => divisibleByDigitsHelper(x, x)).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            var n = num\n            while (n > 0) {\n                val digit = n % 10\n                if (digit == 0 || num % digit != 0) return false\n                n /= 10\n            }\n            true\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head != 0) false\n            else divisibleByDigitsHelper(num, digits.tail)\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        val l = ListBuffer[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) l += i\n        }\n        l.toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toLong))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList\n            var flag = true\n            for (j <- digits) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ i\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var num = i\n            var isDivisible = true\n            while (num > 0) {\n                val digit = num % 10\n                if (digit != 0 && i % digit != 0) {\n                    isDivisible = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (isDivisible) result = i :: result\n        }\n        result",
    "        def divisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigits).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                val digit = num % 10\n                if (digit == 0 || i % digit != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) result ::= i\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            var n = num\n            while (n > 0) {\n                val digit = n % 10\n                if (digit == 0 || num % digit != 0) return false\n                n /= 10\n            }\n            true\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(n : Long) : Boolean = {\n            n.toString.map(x => x.asDigit).forall(x => n % x == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            if (i.toString.forall(c => i % (c - '0') == 0)) result += i\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ i\n        }\n        result",
    "        def divisibleByDigits(num : Long) : Boolean = {\n            num.toString.map(_.asDigit).forall(num % _ == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigits).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toInt)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(x => x.asDigit)\n            if (digits.forall(x => i % x == 0)) result = result :+ i\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.toString.toInt)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var num = i\n            var flag = true\n            while (num > 0) {\n                var digit = num % 10\n                if (digit == 0 || i % digit != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) result = result :+ i\n        }\n        result",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.toString.toInt) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        def divisible(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisible).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        var res = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.toString.toInt) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) res = res :+ i\n        }\n        res",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            def divisibleByDigitsHelperHelper(num : Long, digit : Int) : Boolean = {\n                if (digit == 0) true\n                else if (num % digit == 0) divisibleByDigitsHelperHelper(num, digit / 10)\n                else false\n            }\n            divisibleByDigitsHelperHelper(num, num.toString.toInt)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toInt))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num != 0) {\n                var digit = num % 10\n                if (i % digit != 0) {\n                    flag = false\n                    num = 0\n                } else {\n                    num /= 10\n                }\n            }\n            if (flag) result = i :: result\n        }\n        result",
    "        val result = ListBuffer[Long]()\n        for (i <- startnum to endnum) {\n            val digits = i.toString.map(_.asDigit)\n            if (digits.forall(i % _ == 0)) result += i\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(num => isDivisibleByDigits(num)).toList",
    "        (startnum to endnum).filter(x => x.toString.forall(y => x % y.asDigit == 0)).toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisibleByDigit(num : Long, digit : Long) : Boolean = {\n                if (digit == 0) true\n                else if (num % digit == 0) isDivisibleByDigit(num, digit / 10)\n                else false\n            }\n            isDivisibleByDigit(num, num)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            var digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % j.asDigit != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ i\n        }\n        result",
    "        def divisible(n : Long) : Boolean = {\n            val digits = n.toString.map(_.asDigit)\n            digits.forall(d => d != 0 && n % d == 0)\n        }\n        (startnum to endnum).filter(divisible).toList",
    "        def divisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigits).toList",
    "        def divisibleByDigitsHelper(num : Long, divisor : Long) : Boolean = {\n            if (num == 0) true\n            else if (num % 10 == 0) false\n            else if (divisor % (num % 10) == 0) divisibleByDigitsHelper(num / 10, divisor)\n            else false\n        }\n        (startnum to endnum).filter(x => divisibleByDigitsHelper(x, x)).toList",
    "        def divisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(d => d != 0 && num % d == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigits).toList",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            var flag = true\n            for (j <- i.toString) {\n                if (i % (j.toString.toInt) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += i\n        }\n        result.toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.toString.toInt)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head != 0) false\n            else divisibleByDigitsHelper(num, digits.tail)\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toInt))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        def divisible(n : Long) : Boolean = {\n            val digits = n.toString.map(_.asDigit)\n            digits.forall(d => d != 0 && n % d == 0)\n        }\n        (startnum to endnum).filter(divisible).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var isDivisible = true\n            for (j <- i.toString) {\n                if (j == '0') {\n                    isDivisible = false\n                    break\n                }\n                if (i % (j - '0') != 0) {\n                    isDivisible = false\n                    break\n                }\n            }\n            if (isDivisible) result = i :: result\n        }\n        result.reverse",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toLong)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisibleByDigit(digit : Long) : Boolean = {\n                num % digit == 0\n            }\n            num.toString.map(_.asDigit).forall(isDivisibleByDigit)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            def isDivisibleByDigit(num : Long, digit : Int) : Boolean = {\n                if (num % digit == 0) true\n                else false\n            }\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(isDivisibleByDigit(num, _))\n        }\n        (startnum to endnum).filter(isDivisibleByDigits(_)).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                if (i % (num % 10) != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) result = i :: result\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList"
  ]
}