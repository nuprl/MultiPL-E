{
  "name": "mbpp_734_sum_Of_Subarray_Prod",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    def sumOfSubarrayProd(arr : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (20l));\n    assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong))) == (5l));\n    assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (84l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val result = (n * sum * prod) - (sum * sum)\n        return result",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (1 to n).map(i => prod / arr(i - 1)).sum\n        val sumOfSum = (1 to n).map(i => sum - arr(i - 1)).sum\n        sumOfProd + sumOfSum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val result = n * sum * prod - n * sumOfSquares - sum * sum + sumOfCubes + sumOfSquares * sum - sumOfQuads\n        return result",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        var prod = 1L\n        for (i <- 0 until n) {\n            prod *= arr(i)\n        }\n        val result = (n * prod + sum) * (n + 1) / 2\n        result",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        return sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = (sum * sum - sumOfSquares) / 2\n        result.toLong",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = (sum * sum - sumOfSquares) / 2\n        result",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfFourthPowers = arr.map(x => x * x * x * x).sum\n        val sumOfFifthPowers = arr.map(x => x * x * x * x * x).sum\n        val sumOfSixthPowers = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfSeventhPowers = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfEighthPowers = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNinthPowers = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfTenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfEleventhPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTwelfthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfThirteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFourteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFifteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfSixteenthPowers = arr.map(x =>",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum"
  ]
}