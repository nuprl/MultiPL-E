{
  "name": "mbpp_734_sum_Of_Subarray_Prod",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    def sumOfSubarrayProd(arr : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (20l));\n    assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong))) == (5l));\n    assert(sumOfSubarrayProd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (84l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val result = (n * sum * prod) - (sum * sum)\n        return result",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (1 to n).map(i => prod / arr(i - 1)).sum\n        val sumOfSum = (1 to n).map(i => sum - arr(i - 1)).sum\n        sumOfProd + sumOfSum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val result = n * sum * prod - n * sumOfSquares - sum * sum + sumOfCubes + sumOfSquares * sum - sumOfQuads\n        return result",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        var prod = 1L\n        for (i <- 0 until n) {\n            prod *= arr(i)\n        }\n        val result = (n * prod + sum) * (n + 1) / 2\n        result",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        return sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = (sum * sum - sumOfSquares) / 2\n        result.toLong",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = (sum * sum - sumOfSquares) / 2\n        result",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfFourthPowers = arr.map(x => x * x * x * x).sum\n        val sumOfFifthPowers = arr.map(x => x * x * x * x * x).sum\n        val sumOfSixthPowers = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfSeventhPowers = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfEighthPowers = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNinthPowers = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfTenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfEleventhPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTwelfthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfThirteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFourteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFifteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfSixteenthPowers = arr.map(x =>",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = (n * sum * prod) - (sum * sum) - (prod * prod) + (sumOfSquares * n)\n        return result",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val res = (n * sum * prod) - (n * prod * prod)\n        res",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        var result = 0L\n        for (i <- 0 until n) {\n            result += (sum - arr(i)) * (prod / arr(i))\n        }\n        result",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = (n * sum * prod) - (sum * sum) - (prod * prod) + sumOfSquares\n        return result",
    "        val n = arr.length\n        val sum = arr.sum\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = (n * sumOfSquares) - (sum * sum)\n        result",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.size\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (0 until n).map(i => (0 until n).map(j => arr(i) * arr(j)).sum).sum\n        sum * sum + prod * n - 2 * sumOfProd",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val res = (n * sum * prod) - (sum * sum) - (prod * prod) + (sumOfSquares * n)\n        res",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        var result = 0L\n        for (i <- 0 until n) {\n            result += (sum - arr(i)) * (prod / arr(i))\n        }\n        result",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfPentas = arr.map(x => x * x * x * x * x).sum\n        val sumOfHexas = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHeptas = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOctas = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNona = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfDeca = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfUndeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfDodeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTrideca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTetradeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfPentadeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfHexadeca = arr.map(x => x * x * x * x * x * x * x * x",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.map(x => x * x).sum\n        val res = (n * sum * sum) - (2 * prod)\n        return res",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuad = arr.map(x => x * x * x * x).sum\n        val sumOfPent = arr.map(x => x * x * x * x * x).sum\n        val sumOfHex = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHept = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOct = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNove = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfDec = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfUndec = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfDodec = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTridec = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTetradec = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfPentadec = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfHexadec = arr.map(x => x * x * x * x * x * x * x * x * x * x *",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val res = (n * prod) + sum\n        res",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfPentas = arr.map(x => x * x * x * x * x).sum\n        val sumOfHexas = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHeptas = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOctas = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNona = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfDeca = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfUndeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfDodeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTrideca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTetradeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfPentadeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfHexadeca = arr.map(x => x * x * x * x * x * x * x * x",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.foldLeft(1L)((a, b) => a * b)\n        val result = sum * prod\n        for (i <- 0 until n) result += arr(i) * prod / arr(i)\n        result",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumProd = sum * prod\n        var result = 0L\n        for (i <- 0 until n) {\n            result += (i + 1) * (n - i) * arr(i)\n        }\n        result - sumProd",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        var sum = 0L\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                dp(i) *= arr(j)\n            }\n            sum += dp(i)\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        var prod = 1L\n        for (i <- 0 until n) {\n            prod *= arr(i)\n        }\n        val res = (sum + prod) * n / 2\n        res",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = (n * sum * prod) - (sum * sum) - (prod * sumOfSquares)\n        return result",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        var result = 0L\n        for (i <- 0 to n - 1) {\n            result += (i + 1) * (n - i) * arr(i)\n        }\n        result - sum * prod",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = (n * sumOfSquares) - (sum * sum)\n        result",
    "        val n = arr.length\n        val sum = arr.sum\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = (sum * sum - sumOfSquares) / 2\n        result",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfPentas = arr.map(x => x * x * x * x * x).sum\n        val sumOfHexas = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHeptas = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOctas = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNona = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfDecas = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfUndecas = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfDodecas = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTridecas = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTetradecas = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfPentadecas = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfHexadecas = arr.map(x => x * x * x * x * x * x * x",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val result = (n * sumOfQuads) - (4 * sumOfCubes) + (6 * sumOfSquares) - (4 * prod * sum) + (n * prod * prod)\n        result",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (1 to n).map(i => prod / pow(arr(i - 1), n - i).toLong).sum\n        sum * sumOfProd",
    "        val n = arr.size\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val sum = arr.sum\n        val prod = arr.product\n        val n = arr.length\n        val sumOfProd = (sum * prod) * (n * (n + 1) / 2)\n        sumOfProd",
    "        val n = arr.length\n        val prod = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                prod(j) *= arr(i)\n            }\n        }\n        prod.sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfPentas = arr.map(x => x * x * x * x * x).sum\n        val sumOfHexas = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHeptas = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOctas = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNona = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfDeca = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfUndeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfDodeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTredeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfQuattuordeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfQuindeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfSexdeca = arr.map(x => x * x * x * x * x * x * x * x *",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfPentas = arr.map(x => x * x * x * x * x).sum\n        val sumOfHexas = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHeptas = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOctas = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNona = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfDeca = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfUndeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfDodeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTrideca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTetradeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfPentadeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfHexadeca = arr.map(x => x * x * x * x * x * x * x * x",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (0 until n).map(i => (0 until n).map(j => (i to j).map(k => arr(k)).product).sum).sum\n        sumOfProd - sum + prod",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfPentas = arr.map(x => x * x * x * x * x).sum\n        val sumOfHexas = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHeptas = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOctas = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNona = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfDeca = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfUndeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfDodeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTrideca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTetradeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfPentadeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfHexadeca = arr.map(x => x * x * x * x * x * x * x * x",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfPents = arr.map(x => x * x * x * x * x).sum\n        val sumOfHexs = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHepts = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOcts = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNines = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfTens = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfElevens = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTwelves = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfThirteens = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFourteens = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFifteens = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfSixteens = arr.map(x => x * x * x * x * x * x * x * x * x",
    "        var sum : Long = 0\n        for (i <- 0 until arr.length) {\n            var prod : Long = 1\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfPentas = arr.map(x => x * x * x * x * x).sum\n        val sumOfHexas = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHeptas = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOctas = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNonas = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfDecas = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfUndecas = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfDodecas = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTridecas = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTetradecas = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfPentadecas = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfHexadecas = arr.map(x => x * x * x * x * x * x * x * x * x * x * x",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfPents = arr.map(x => x * x * x * x * x).sum\n        val sumOfHexs = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHepts = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOcts = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNines = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfTens = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfElevens = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTwelves = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfThirteens = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFourteens = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFifteens = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfSixteens = arr.map(x => x * x * x * x * x * x * x * x * x",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfPentas = arr.map(x => x * x * x * x * x).sum\n        val sumOfHexas = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHeptas = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOctas = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNona = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfDeca = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfUndeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfDodeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTredeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfQuattuordeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfQuindeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfSexdeca = arr.map(x => x * x * x * x * x * x * x * x *",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (0 until n).map(i => (i + 1) * (n - i) * arr(i)).sum\n        sum * prod - sumOfProd",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumProd = sum * prod\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfSquaresProd = sumOfSquares * prod\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfCubesProd = sumOfCubes * prod\n        val sumOfFourth = arr.map(x => x * x * x * x).sum\n        val sumOfFourthProd = sumOfFourth * prod\n        val sumOfFifth = arr.map(x => x * x * x * x * x).sum\n        val sumOfFifthProd = sumOfFifth * prod\n        val sumOfSixth = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfSixthProd = sumOfSixth * prod\n        val sumOfSeventh = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfSeventhProd = sumOfSeventh * prod\n        val sumOfEighth = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfEighthProd = sumOfEighth * prod\n        val sumOfNinth = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfNinthProd = sumOfNinth * prod\n        val sumOfTenth = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTenthProd = sumOfTenth * prod\n        val sumOfEleventh = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfEleventhProd = sumOfEleventh * prod\n        val sumOfTwelfth = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n       ",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (0 until n).map(i => (0 until n).map(j => arr(i) * arr(j)).sum).sum\n        sum * sum + prod * n + sumOfProd",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val ans = (n * sum * prod) - (sum * sum) - (prod * prod) + (n * sumOfSquares)\n        return ans",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        return sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfPowers = arr.map(x => x * x * x * x).sum\n        val sumOfPowers2 = arr.map(x => x * x * x * x * x).sum\n        val sumOfPowers3 = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfPowers4 = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfPowers5 = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfPowers6 = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfPowers7 = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfPowers8 = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfPowers9 = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfPowers10 = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfPowers11 = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfPowers12 = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfPowers13 = arr.map(x => x * x * x * x * x * x * x * x * x * x * x *",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        return sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (0 until n).map(i => (0 until n).map(j => (i to j).map(k => arr(k)).product).sum).sum\n        sumOfProd - sum + prod",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        var res = 0L\n        for (i <- 0 until n) {\n            res += (i + 1) * (n - i) * arr(i)\n        }\n        res - sum * prod",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = (n * sum * prod) - (sum * sum) - (prod * prod) + (n * sumOfSquares)\n        return result",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfPentas = arr.map(x => x * x * x * x * x).sum\n        val sumOfHexas = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHeptas = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOctas = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNona = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfDeca = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfUndeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfDodeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTredeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfQuattuordeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfQuindeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfSedeca = arr.map(x => x * x * x * x * x * x * x * x *",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfPentas = arr.map(x => x * x * x * x * x).sum\n        val sumOfHexas = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHeptas = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOctas = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNona = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfDeca = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfUndeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfDodeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTrideca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTetradeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfPentadeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfHexadeca = arr.map(x => x * x * x * x * x * x * x * x",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        return sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfFourthPowers = arr.map(x => x * x * x * x).sum\n        val sumOfFifthPowers = arr.map(x => x * x * x * x * x).sum\n        val sumOfSixthPowers = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfSeventhPowers = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfEighthPowers = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNinthPowers = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfTenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfEleventhPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTwelfthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfThirteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFourteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFifteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfSixteenthPowers = arr.map(x =>",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val res = (0 until n).map(i => (sum - arr(i)) * (prod / arr(i))).sum\n        res",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfPents = arr.map(x => x * x * x * x * x).sum\n        val sumOfHexs = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHepts = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOcts = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNines = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfTens = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfElevens = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTwelves = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfThirteens = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFourteens = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFifteens = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfSixteens = arr.map(x => x * x * x * x * x * x * x * x * x",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfFourthPowers = arr.map(x => x * x * x * x).sum\n        val sumOfFifthPowers = arr.map(x => x * x * x * x * x).sum\n        val sumOfSixthPowers = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfSeventhPowers = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfEighthPowers = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNinthPowers = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfTenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfEleventhPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTwelfthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfThirteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFourteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFifteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfSixteenthPowers = arr.map(x =>",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val res = (n * sum * prod) - (sum * sum)\n        res",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = (n * sumOfSquares) - (sum * sum)\n        result",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (0 until n).map(i => (0 until n).map(j => (i to j).map(k => arr(k)).product).sum).sum\n        sumOfProd - sum + prod",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val res = (n * sum * prod) - (sum * sum)\n        res",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = (n * sum * prod) - (sum * sum) - (prod * prod) + (sumOfSquares * 2)\n        return result",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (0 until n).map(i => (0 until n).map(j => (i to j).map(k => arr(k)).product).sum).sum\n        val sumOfSum = (0 until n).map(i => (0 until n).map(j => (i to j).map(k => arr(k)).sum).sum).sum\n        val sumOfSumOfProd = (0 until n).map(i => (0 until n).map(j => (i to j).map(k => (0 until n).map(l => (k to l).map(m => arr(m)).product).sum).sum).sum).sum\n        val sumOfSumOfSum = (0 until n).map(i => (0 until n).map(j => (i to j).map(k => (0 until n).map(l => (k to l).map(m => arr(m)).sum).sum).sum).sum).sum\n        val sumOfSumOfSumOfProd = (0 until n).map(i => (0 until n).map(j => (i to j).map(k => (0 until n).map(l => (k to l).map(m => (0 until n).map(o => (m to o).map(p => arr(p)).product).sum).sum).sum).sum).sum).sum\n        val sumOfSumOfSumOfSum = (0 until n).map(i => (0 until n).map(j => (i to j).map(k => (0 until n).map(l => (k to l).map(m => (0 until n).map(o => (m to o).map(p => arr(p)).sum).sum).sum).sum).sum).sum).sum\n        val sumOfSumOfSumOfSumOfProd = (0 until n).map(i => (0 until n).map(j => (i to j).map(k => (0 until n).map(l => (k to l).map(m => (0 until n).map(o => (m to o).map(p => (0 until n).map",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        return sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfPentas = arr.map(x => x * x * x * x * x).sum\n        val sumOfHexas = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHeptas = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOctas = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNona = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfDeca = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfUndeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfDodeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTredeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfQuattuordeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfQuindeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfSexdeca = arr.map(x => x * x * x * x * x * x * x * x *",
    "        val n = arr.length\n        val sum = arr.sum\n        val sumOfSquares = arr.map(x => x * x).sum\n        (n * sumOfSquares - sum * sum) / 2",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (0 until n).map(i => (0 until n).map(j => prod / arr(i) / arr(j)).sum).sum\n        sum * sumOfProd",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (1 to n).map(i => (1 to n - i + 1).map(j => arr.slice(j - 1, j + i - 1).product).sum).sum\n        val sumOfSum = (1 to n).map(i => (1 to n - i + 1).map(j => arr.slice(j - 1, j + i - 1).sum).sum).sum\n        val sumOfSumOfProd = sumOfProd + sumOfSum - prod\n        sumOfSumOfProd",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfPentas = arr.map(x => x * x * x * x * x).sum\n        val sumOfHexas = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHeptas = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOctas = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNona = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfDeca = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfUndeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfDodeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTredeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfQuattuordeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfQuindeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfHexdeca = arr.map(x => x * x * x * x * x * x * x * x",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfFifths = arr.map(x => x * x * x * x * x).sum\n        val sumOfSixths = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfSevenths = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfEighths = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNinths = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfTenths = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfElevenths = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTwelfths = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfThirteenths = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFourteenths = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFifteenths = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfSixteenths = arr.map(x => x * x * x * x * x * x * x * x",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (0 until n).map(i => (i + 1) * (n - i) * arr(i)).sum\n        sum * prod - sumOfProd",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val res = (0 until n).map(i => (sum - arr(i)) * (prod / arr(i))).sum\n        res",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = (n * sum * prod) - (sum * sum) - (prod * sumOfSquares)\n        return result",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfFourthPowers = arr.map(x => x * x * x * x).sum\n        val sumOfFifthPowers = arr.map(x => x * x * x * x * x).sum\n        val sumOfSixthPowers = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfSeventhPowers = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfEighthPowers = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNinthPowers = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfTenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfEleventhPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTwelfthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfThirteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFourteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFifteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfSixteenthPowers = arr.map(x =>",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfFourthPowers = arr.map(x => x * x * x * x).sum\n        val sumOfFifthPowers = arr.map(x => x * x * x * x * x).sum\n        val sumOfSixthPowers = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfSeventhPowers = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfEighthPowers = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNinthPowers = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfTenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfEleventhPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTwelfthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfThirteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFourteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFifteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfSixteenthPowers = arr.map(x =>",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = (n * sumOfSquares) - (sum * sum)\n        result",
    "        val n = arr.length\n        val sum = arr.sum\n        val sumOfSquares = arr.map(x => x * x).sum\n        val res = sum * sum + n * sumOfSquares\n        res",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        var result = 0L\n        for (i <- 0 until n) {\n            result += (i + 1) * (n - i) * arr(i)\n        }\n        result",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumProd = sum * prod\n        var sumOfProd = 0L\n        for (i <- 0 until n) {\n            sumOfProd += (sumProd / arr(i))\n        }\n        sumOfProd",
    "        val n = arr.length\n        val sum = arr.sum\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = sum * sum + n * sumOfSquares\n        result",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        var res = 0L\n        for (i <- 0 until n) {\n            res += (sum - arr(i)) * (prod / arr(i))\n        }\n        res",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = (n * sumOfSquares) - (sum * sum)\n        result",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumProd = sum * prod\n        val sumProd2 = arr.map(x => x * x).sum\n        val sumProd3 = arr.map(x => x * x * x).sum\n        val sumProd4 = arr.map(x => x * x * x * x).sum\n        val sumProd5 = arr.map(x => x * x * x * x * x).sum\n        val sumProd6 = arr.map(x => x * x * x * x * x * x).sum\n        val sumProd7 = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumProd8 = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumProd9 = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumProd10 = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumProd11 = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumProd12 = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumProd13 = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumProd14 = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumProd15 = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumProd16 = arr.map(x => x * x * x * x * x * x * x * x *",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val sumOfSquares = arr.map(x => x * x).sum\n        val result = (n * sumOfSquares) - (sum * sum)\n        result",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumProd = sum * prod\n        val sumProdSum = sumProd * n\n        val sumProdSumProd = sumProdSum * prod\n        val sumProdSumProdSum = sumProdSumProd * n\n        val sumProdSumProdSumProd = sumProdSumProdSum * prod\n        val sumProdSumProdSumProdSum = sumProdSumProdSumProd * n\n        val sumProdSumProdSumProdSumProd = sumProdSumProdSumProdSum * prod\n        val sumProdSumProdSumProdSumProdSum = sumProdSumProdSumProdSumProd * n\n        val sumProdSumProdSumProdSumProdSumProd = sumProdSumProdSumProdSumProdSum * prod\n        val sumProdSumProdSumProdSumProdSumProdSum = sumProdSumProdSumProdSumProdSumProd * n\n        val sumProdSumProdSumProdSumProdSumProdSumProd = sumProdSumProdSumProdSumProdSumProdSum * prod\n        val sumProdSumProdSumProdSumProdSumProdSumProdSum = sumProdSumProdSumProdSumProdSumProdSumProd * n\n        val sumProdSumProdSumProdSumProdSumProdSumProdSumProd = sumProdSumProdSumProdSumProdSumProdSumProdSum * prod\n        val sumProdSumProdSumProdSumProdSumProdSumProdSumProdSum = sumProdSumProdSumProdSumProdSumProdSumProdSumProd * n\n        val sumProdSumProdSumProdSumProdSumProdSumProdSumProdSumProd = sumProdSumProdSumProdSumProdSumProdSumProdSumProdSum * prod\n        val sumProdSumProdSumProdSumProdSumProdSumProdSumPro",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        var result = 0L\n        for (i <- 0 until n) {\n            result += (sum - arr(i)) * (prod / arr(i))\n        }\n        result",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumProd = sum * prod\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfFourthPowers = arr.map(x => x * x * x * x).sum\n        val sumOfFifthPowers = arr.map(x => x * x * x * x * x).sum\n        val sumOfSixthPowers = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfSeventhPowers = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfEighthPowers = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNinthPowers = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfTenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfEleventhPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTwelfthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfThirteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFourteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFifteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfSix",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfPentas = arr.map(x => x * x * x * x * x).sum\n        val sumOfHexas = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHeptas = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOctas = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNona = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfDeca = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfUndeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfDodeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTrideca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTetradeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfPentadeca = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfHexadeca = arr.map(x => x * x * x * x * x * x * x * x",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        var result = 0L\n        for (i <- 0 until n) {\n            result += (i + 1) * (n - i) * arr(i)\n        }\n        result + sum * prod",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfProd = (0 until n).map(i => (0 until n).map(j => prod / arr(i) / arr(j)).sum).sum\n        sum * sumOfProd",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumProd = sum * prod\n        val sumProd2 = sumProd * n\n        val prod2 = prod * prod\n        val sumProd3 = sumProd2 * n\n        val prod3 = prod2 * prod\n        val sumProd4 = sumProd3 * n\n        val prod4 = prod3 * prod\n        val sumProd5 = sumProd4 * n\n        val prod5 = prod4 * prod\n        val sumProd6 = sumProd5 * n\n        val prod6 = prod5 * prod\n        val sumProd7 = sumProd6 * n\n        val prod7 = prod6 * prod\n        val sumProd8 = sumProd7 * n\n        val prod8 = prod7 * prod\n        val sumProd9 = sumProd8 * n\n        val prod9 = prod8 * prod\n        val sumProd10 = sumProd9 * n\n        val prod10 = prod9 * prod\n        val sumProd11 = sumProd10 * n\n        val prod11 = prod10 * prod\n        val sumProd12 = sumProd11 * n\n        val prod12 = prod11 * prod\n        val sumProd13 = sumProd12 * n\n        val prod13 = prod12 * prod\n        val sumProd14 = sumProd13 * n\n        val prod14 = prod13 * prod\n        val sumProd15 = sumProd14 * n\n        val prod15 = prod14 * prod\n        val sumProd16 = sumProd15 * n\n        val prod16 = prod15 * prod\n        val sumProd17 = sumProd16 * n\n        val prod17 = prod16 * prod\n        val sumProd18 = sumProd17 * n\n        val prod18 = prod17 * prod\n        val sumProd19 = sumProd18 * n\n        val prod19 = prod18 * prod\n        val sumProd20 = sumProd19 * n\n        val prod20 = prod19 * prod\n        val sumProd21 = sumProd20 * n\n        val prod21 = prod20 * prod",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        (n * sumOfSquares - sum * sum) + (sumOfCubes - sum * sumOfSquares) / 2",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfFourthPowers = arr.map(x => x * x * x * x).sum\n        val sumOfFifthPowers = arr.map(x => x * x * x * x * x).sum\n        val sumOfSixthPowers = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfSeventhPowers = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfEighthPowers = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNinthPowers = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfTenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfEleventhPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTwelfthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfThirteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFourteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFifteenthPowers = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfSixteenthPowers = arr.map(x =>",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        val n = arr.length\n        val sum = arr.sum\n        val prod = arr.product\n        val sumOfSquares = arr.map(x => x * x).sum\n        val sumOfCubes = arr.map(x => x * x * x).sum\n        val sumOfQuads = arr.map(x => x * x * x * x).sum\n        val sumOfPents = arr.map(x => x * x * x * x * x).sum\n        val sumOfHexs = arr.map(x => x * x * x * x * x * x).sum\n        val sumOfHepts = arr.map(x => x * x * x * x * x * x * x).sum\n        val sumOfOcts = arr.map(x => x * x * x * x * x * x * x * x).sum\n        val sumOfNines = arr.map(x => x * x * x * x * x * x * x * x * x).sum\n        val sumOfTens = arr.map(x => x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfElevens = arr.map(x => x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfTwelves = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfThirteens = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFourteens = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfFifteens = arr.map(x => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x).sum\n        val sumOfSixteens = arr.map(x => x * x * x * x * x * x * x * x * x",
    "        val n = arr.length\n        var sum = 0L\n        for (i <- 0 until n) {\n            var prod = 1L\n            for (j <- i until n) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            var prod = 1L\n            for (j <- i until arr.length) {\n                prod *= arr(j)\n                sum += prod\n            }\n        }\n        sum"
  ]
}