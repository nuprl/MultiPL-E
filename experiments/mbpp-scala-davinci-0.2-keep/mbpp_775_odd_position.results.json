{
  "name": "mbpp_775_odd_position",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxn8qrkdp.scala:14)\n\tat Problem.main(tmpxn8qrkdp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) odd = false\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) odd = false\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbwh_xmdv.scala:14)\n\tat Problem.main(tmpbwh_xmdv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnazwj036.scala:12)\n\tat Problem.main(tmpnazwj036.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr7_9gq89.scala:12)\n\tat Problem.main(tmpr7_9gq89.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        for (num <- nums) {\n            if (i % 2 == 1) {\n                if (num % 2 == 0) return false\n            }\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) odd = false\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxn8qrkdp.scala:14)\n\tat Problem.main(tmpxn8qrkdp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                odd = false\n            }\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) odd = false\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        val odds = nums.zipWithIndex.filter(x => x._2 % 2 == 1).map(x => x._1)\n        odds.forall(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxn8qrkdp.scala:14)\n\tat Problem.main(tmpxn8qrkdp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                flag = false\n                return flag\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                odd = false\n            }\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) {\n                return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyoamzwgr.scala:14)\n\tat Problem.main(tmpyoamzwgr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) odd = false\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                odd = false\n            }\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbwh_xmdv.scala:14)\n\tat Problem.main(tmpbwh_xmdv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length == 1) return nums(0) % 2 == 1\n        if (nums(0) % 2 == 1) return oddPosition(nums.tail)\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphudae03n.scala:12)\n\tat Problem.main(tmphudae03n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var oddCount = 0\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 1) oddCount += 1\n        }\n        return oddCount == nums.length / 2\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        var result = true\n        while (i < nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    i = nums.length\n                }\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdaaspm4a.scala:20)\n\tat Problem.main(tmpdaaspm4a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 1\n        while (i < nums.length) {\n            if (nums(i) % 2 == 0) return false\n            i += 2\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpygte_ywy.scala:16)\n\tat Problem.main(tmpygte_ywy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu20shwbh.scala:12)\n\tat Problem.main(tmpu20shwbh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                odd = false\n            }\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp73skixml.scala:16)\n\tat Problem.main(tmp73skixml.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var isOdd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    isOdd = false\n                    return isOdd\n                }\n            }\n        }\n        return isOdd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    odd = false\n                }\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppr9ht21u.scala:18)\n\tat Problem.main(tmppr9ht21u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 != 0 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) {\n                flag = false\n                return flag\n            }\n        }\n        flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpb96079p1.scala:16)\n\tat Problem.main(tmpb96079p1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    odd = false\n                }\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpupzkvg24.scala:16)\n\tat Problem.main(tmpupzkvg24.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 == 0) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123509,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9tsh6alu.scala:12)\n\tat Problem.main(tmp9tsh6alu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnazwj036.scala:12)\n\tat Problem.main(tmpnazwj036.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) odd = false\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var oddCount = 0\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 1) oddCount += 1\n            }\n        }\n        if (oddCount == nums.length / 2) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = false\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    odd = false\n                    return odd\n                }\n                else {\n                    odd = true\n                }\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123509,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpoyp289p7.scala:21)\n\tat Problem.main(tmpoyp289p7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnazwj036.scala:12)\n\tat Problem.main(tmpnazwj036.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppr9ht21u.scala:18)\n\tat Problem.main(tmppr9ht21u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppr9ht21u.scala:18)\n\tat Problem.main(tmppr9ht21u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length if i % 2 != 0) {\n            if (nums(i) % 2 == 0) odd = false\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    odd = false\n                }\n            }\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                odd = false\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnazwj036.scala:12)\n\tat Problem.main(tmpnazwj036.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        if (nums.length == 0) return true\n        if (nums.length % 2 == 0) return false\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123509,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt60n4j3i.scala:14)\n\tat Problem.main(tmpt60n4j3i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                odd = false\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while(i < nums.length) {\n            if(i % 2 == 0 && nums(i) % 2 == 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3pnebvq6.scala:14)\n\tat Problem.main(tmp3pnebvq6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length if i % 2 == 1) {\n            if (nums(i) % 2 == 0) flag = false\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123509,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var oddCount = 0\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 1) oddCount += 1\n            }\n        }\n        return oddCount == nums.length / 2\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprbuyj602.scala:15)\n\tat Problem.main(tmprbuyj602.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n            if (i % 2 == 0 && nums(i) % 2 == 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxn8qrkdp.scala:14)\n\tat Problem.main(tmpxn8qrkdp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var flag = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) flag = false\n            }\n        }\n        return flag\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnazwj036.scala:12)\n\tat Problem.main(tmpnazwj036.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) odd = false\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxn8qrkdp.scala:14)\n\tat Problem.main(tmpxn8qrkdp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 != 0 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        val odds = nums.zipWithIndex.filter(x => x._2 % 2 == 1).map(x => x._1)\n        odds.forall(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppr9ht21u.scala:18)\n\tat Problem.main(tmppr9ht21u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        val odd = nums.zipWithIndex.filter(x => x._2 % 2 == 1).map(x => x._1)\n        odd.forall(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) return false\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxn8qrkdp.scala:14)\n\tat Problem.main(tmpxn8qrkdp.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) odd = false\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.size by 2) {\n            if (nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) odd = false\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnazwj036.scala:12)\n\tat Problem.main(tmpnazwj036.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) return false\n            }\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123509,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg808z589.scala:16)\n\tat Problem.main(tmpg808z589.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var isOdd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                isOdd = false\n                return isOdd\n            }\n        }\n        isOdd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123509,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 to nums.length - 1 by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123509,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    odd = false\n                }\n            }\n        }\n        odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptksmllad.scala:17)\n\tat Problem.main(tmptksmllad.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpygte_ywy.scala:16)\n\tat Problem.main(tmpygte_ywy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    odd = false\n                    return odd\n                }\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123509,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0l2ja9ij.scala:18)\n\tat Problem.main(tmp0l2ja9ij.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    odd = false\n                }\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123509,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa5clfq__.scala:17)\n\tat Problem.main(tmpa5clfq__.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    odd = false\n                }\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var oddCount = 0\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 1) oddCount += 1\n            }\n        }\n        if (oddCount == nums.length / 2) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123512,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgcm6vk64.scala:15)\n\tat Problem.main(tmpgcm6vk64.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123512,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        val odds = nums.zipWithIndex.filter(x => x._2 % 2 == 1).map(x => x._1)\n        odds.forall(x => x % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123512,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp10hba09y.scala:13)\n\tat Problem.main(tmp10hba09y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu20shwbh.scala:12)\n\tat Problem.main(tmpu20shwbh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n            if (i % 2 == 0 && nums(i) % 2 == 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) {\n                    odd = false\n                }\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123509,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpa5clfq__.scala:17)\n\tat Problem.main(tmpa5clfq__.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) return false\n            } else {\n                if (nums(i) % 2 == 1) return false\n            }\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123512,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length if i % 2 == 1) {\n            if (nums(i) % 2 == 0) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123512,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) return false\n            }\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123509,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg808z589.scala:16)\n\tat Problem.main(tmpg808z589.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length by 2) {\n            if (nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnazwj036.scala:12)\n\tat Problem.main(tmpnazwj036.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n            if (i % 2 == 0 && nums(i) % 2 == 1) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = false\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 1) odd = true\n                else return false\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123512,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) result = false\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                odd = false\n                return odd\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var i = 0\n        while (i < nums.length) {\n            if (i % 2 == 0) {\n                if (nums(i) % 2 == 0) return false\n            }\n            i += 1\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123509,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg808z589.scala:16)\n\tat Problem.main(tmpg808z589.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n                return result\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1665510207,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1 && nums(i) % 2 == 0) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123508,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 1 until nums.length by 2) {\n            if (nums(i) % 2 == 0) {\n                result = false\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var result = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    result = false\n                    return result\n                }\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to check whether every odd index contains odd numbers of a given list.\n    def oddPosition(nums : List[Long]) : Boolean = {\n        var odd = true\n        for (i <- 0 until nums.length) {\n            if (i % 2 == 1) {\n                if (nums(i) % 2 == 0) {\n                    odd = false\n                }\n            }\n        }\n        return odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddPosition((List[Long](2l.toLong, 1l.toLong, 4l.toLong, 3l.toLong, 6l.toLong, 7l.toLong, 6l.toLong, 3l.toLong))) == (true));\n    assert(oddPosition((List[Long](4l.toLong, 1l.toLong, 2l.toLong))) == (true));\n    assert(oddPosition((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (false));\n    }\n\n}\n",
      "timestamp": 1666123498,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}