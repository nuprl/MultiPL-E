{
  "name": "mbpp_128_long_words",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find words that are longer than n characters from a given list of words.\n    def longWords(n : Long, str : String) : List[String] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(longWords((3l), (\"python is a programming language\")).equals((List[String](\"python\", \"programming\", \"language\"))));\n    assert(longWords((2l), (\"writing a program\")).equals((List[String](\"writing\", \"program\"))));\n    assert(longWords((5l), (\"sorting list\")).equals((List[String](\"sorting\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \")\n        val longWords = new ListBuffer[String]()\n        for (word <- words) {\n            if (word.length() > n) {\n                longWords += word\n            }\n        }\n        longWords.toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length() > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \")\n        val result = new ListBuffer[String]\n        for (word <- words) {\n            if (word.length > n) result += word\n        }\n        result.toList",
    "        val words = str.split(\" \")\n        val result = new ListBuffer[String]()\n        for (word <- words) {\n            if (word.length > n) {\n                result += word\n            }\n        }\n        result.toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \")\n        val result = for (word <- words if word.length > n) yield word\n        result.toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length() > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \")\n        val result = new ListBuffer[String]\n        for (word <- words) {\n            if (word.length() > n) {\n                result += word\n            }\n        }\n        result.toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length() > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \").toList\n        words.filter(word => word.length > n)",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length() > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \")\n        val result = new ListBuffer[String]()\n        for (word <- words) {\n            if (word.length() > n) {\n                result += word\n            }\n        }\n        result.toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length() > n).toList",
    "        str.split(\" \").filter(_.length() > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \").toList\n        words.filter(x => x.length > n)",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length() > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length() > n).toList",
    "        str.split(\" \").filter(_.length() > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length() > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \")\n        val result = new ListBuffer[String]()\n        for (word <- words) {\n            if (word.length() > n) result += word\n        }\n        result.toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        val words = str.split(\" \")\n        var result = List[String]()\n        for (word <- words) {\n            if (word.length() > n) {\n                result = word :: result\n            }\n        }\n        result",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").toList.filter(x => x.length > n)",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \")\n        val result = new ListBuffer[String]\n        for (word <- words) {\n            if (word.length > n) result += word\n        }\n        result.toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val list = str.split(\" \").toList\n        list.filter(x => x.length > n)",
    "        val words = str.split(\" \")\n        val result = new ListBuffer[String]()\n        for (word <- words) {\n            if (word.length() > n) {\n                result += word\n            }\n        }\n        result.toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \")\n        val result = for(word <- words if word.length > n) yield word\n        result.toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length() > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \").toList\n        words.filter(x => x.length() > n)",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        val words = str.split(\" \").toList\n        words.filter(word => word.length > n)",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \").toList\n        words.filter(word => word.length > n)",
    "        val words = str.split(\" \")\n        val longWords = ListBuffer[String]()\n        for (word <- words) {\n            if (word.length > n) longWords += word\n        }\n        longWords.toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(x => x.length() > n).toList",
    "        val words = str.split(\" \").toList\n        words.filter(_.length > n)",
    "        val words = str.split(\" \")\n        val result = new ListBuffer[String]()\n        for (word <- words) {\n            if (word.length() > n) result += word\n        }\n        result.toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \")\n        val result = new ListBuffer[String]()\n        for (word <- words) {\n            if (word.length() > n) {\n                result += word\n            }\n        }\n        result.toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \").toList\n        words.filter(word => word.length > n)",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \")\n        val longWords = new ListBuffer[String]()\n        for (word <- words) {\n            if (word.length() > n) {\n                longWords += word\n            }\n        }\n        longWords.toList",
    "        val words = str.split(\" \")\n        var result = List[String]()\n        for (word <- words) {\n            if (word.length > n) {\n                result = word :: result\n            }\n        }\n        result",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \").toList\n        words.filter(word => word.length > n)",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \")\n        val longWords = new ListBuffer[String]()\n        for (word <- words) {\n            if (word.length() > n) {\n                longWords += word\n            }\n        }\n        longWords.toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        val words = str.split(\" \")\n        val longWords = new ListBuffer[String]()\n        for (word <- words) {\n            if (word.length() > n) {\n                longWords += word\n            }\n        }\n        longWords.toList",
    "        val words = str.split(\" \")\n        val longWords = for (word <- words if word.length > n) yield word\n        longWords.toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \")\n        val longWords = new ListBuffer[String]\n        for (word <- words) {\n            if (word.length() > n) longWords += word\n        }\n        longWords.toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \")\n        val longWords = ListBuffer[String]()\n        for (word <- words) {\n            if (word.length > n) {\n                longWords += word\n            }\n        }\n        longWords.toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(x => x.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \")\n        words.filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length() > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        val words = str.split(\" \")\n        words.filter(word => word.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList",
    "        str.split(\" \").filter(_.length > n).toList"
  ]
}