{
  "name": "mbpp_99_decimal_to_binary",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    def decimalToBinary(n : Long) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((8l)).equals((\"1000\")));\n    assert(decimalToBinary((18l)).equals((\"10010\")));\n    assert(decimalToBinary((7l)).equals((\"111\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = \"\"\n        var m = n\n        while (m > 0) {\n            result = (m % 2).toString + result\n            m /= 2\n        }\n        result",
    "        var result = \"\"\n        var x = n\n        while (x > 0) {\n            result = (x % 2).toString + result\n            x /= 2\n        }\n        result",
    "        var result = \"\"\n        var m = n\n        while (m > 0) {\n            result = (m % 2).toString + result\n            m /= 2\n        }\n        result",
    "        if (n == 0) return \"0\"\n        var s = \"\"\n        var m = n\n        while (m > 0) {\n            s = (m % 2).toString + s\n            m /= 2\n        }\n        s",
    "        var result = \"\"\n        var m = n\n        while (m > 0) {\n            result = (m % 2).toString + result\n            m /= 2\n        }\n        result",
    "        def helper(n : Long, acc : String) : String = {\n            if (n == 0) acc\n            else helper(n / 2, (n % 2).toString + acc)\n        }\n        helper(n, \"\")",
    "        var binary = \"\"\n        var m = n\n        while (m > 0) {\n            binary = (m % 2).toString + binary\n            m /= 2\n        }\n        binary",
    "        var result = \"\"\n        var m = n\n        while (m > 0) {\n            result = (m % 2).toString + result\n            m /= 2\n        }\n        result",
    "        var result = \"\"\n        var x = n\n        while (x > 0) {\n            result = (x % 2).toString + result\n            x /= 2\n        }\n        result",
    "        if (n == 0) return \"0\"\n        var result = \"\"\n        var m = n\n        while (m > 0) {\n            result = (m % 2).toString + result\n            m /= 2\n        }\n        result",
    "        var result = \"\"\n        var m = n\n        while (m > 0) {\n            result = (m % 2).toString + result\n            m /= 2\n        }\n        result",
    "        if (n == 0) return \"0\"\n        var result = \"\"\n        var x = n\n        while (x != 0) {\n            result = (x % 2).toString + result\n            x /= 2\n        }\n        result",
    "        var result = \"\"\n        var m = n\n        while (m > 0) {\n            result = (m % 2).toString + result\n            m /= 2\n        }\n        result",
    "        var result = \"\"\n        var x = n\n        while (x > 0) {\n            result = (x % 2).toString + result\n            x /= 2\n        }\n        result",
    "        if (n == 0) \"0\"\n        else {\n            val s = new StringBuilder\n            var m = n\n            while (m != 0) {\n                s.append(m % 2)\n                m /= 2\n            }\n            s.reverse.toString\n        }",
    "        var s = \"\"\n        var m = n\n        while (m > 0) {\n            s = (m % 2).toString + s\n            m /= 2\n        }\n        s",
    "        var s = \"\"\n        var m = n\n        while (m > 0) {\n            s = (m % 2).toString + s\n            m /= 2\n        }\n        s",
    "        var binary = \"\"\n        var nn = n\n        while (nn > 0) {\n            binary = (nn % 2).toString + binary\n            nn /= 2\n        }\n        binary",
    "        var result = \"\"\n        var m = n\n        while (m > 0) {\n            result = (m % 2).toString + result\n            m /= 2\n        }\n        result",
    "        var s = \"\"\n        var m = n\n        while (m > 0) {\n            s = (m % 2).toString + s\n            m /= 2\n        }\n        s"
  ]
}