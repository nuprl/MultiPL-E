{
  "name": "mbpp_442_positive_count",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ration of positive numbers in an array of integers.\n    def positiveCount(nums : List[Long]) : Float = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(positiveCount((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.54f));\n    assert(positiveCount((List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (0.69f));\n    assert(positiveCount((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (0.56f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.size.toFloat / nums.size.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        nums.filter(_ > 0).size.toFloat / nums.size",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var positive = 0\n        for (num <- nums) {\n            if (num > 0) positive += 1\n        }\n        return positive.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length.toFloat",
    "        val count = nums.filter(x => x > 0).length\n        count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        nums.filter(x => x > 0).length.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.size.toFloat / nums.size.toFloat",
    "        val positives = nums.filter(_ > 0)\n        positives.length.toFloat / nums.length",
    "        val (pos, neg) = nums.partition(_ > 0)\n        pos.length.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length",
    "        val positiveCount = nums.filter(x => x > 0).length\n        return positiveCount.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positive = nums.filter(x => x > 0)\n        positive.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length",
    "        var count = 0\n        for (n <- nums) {\n            if (n > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        val (pos, neg) = nums.partition(_ > 0)\n        pos.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(_ > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        val count = nums.filter(x => x > 0).length\n        count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        nums.filter(_ > 0).length.toFloat / nums.length",
    "        var pos = 0\n        for (i <- nums) {\n            if (i > 0) pos += 1\n        }\n        return pos.toFloat / nums.length",
    "        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length",
    "        val positive = nums.filter(x => x > 0)\n        positive.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(_ > 0).length\n        val negatives = nums.filter(_ < 0).length\n        val zeros = nums.filter(_ == 0).length\n        val total = positives + negatives + zeros\n        return positives.toFloat / total",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        val positiveNums = nums.filter(num => num > 0)\n        return positiveNums.length.toFloat / nums.length.toFloat",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length",
    "        val positiveNums = nums.filter(x => x > 0)\n        return positiveNums.length.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val n = nums.length\n        val positives = nums.filter(_ > 0)\n        positives.length.toFloat / n",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        val positiveNums = nums.filter(x => x > 0)\n        positiveNums.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        val count = nums.count(x => x > 0)\n        count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (n <- nums) {\n            if (n > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positive = nums.filter(x => x > 0)\n        return positive.size.toFloat / nums.size.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length",
    "        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positive = nums.filter(x => x > 0)\n        positive.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length.toFloat",
    "        val pos = nums.filter(x => x > 0)\n        pos.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        nums.filter(_ > 0).length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positive = nums.filter((x : Long) => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count : Long = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) {\n                count += 1\n            }\n        }\n        return count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (i <- 0 until nums.length) {\n            if (nums(i) > 0) count += 1\n        }\n        return (count.toFloat / nums.length)",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positiveNums = nums.filter(x => x > 0)\n        return positiveNums.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length",
    "        var posCount = 0\n        for (num <- nums) {\n            if (num > 0) posCount += 1\n        }\n        return posCount.toFloat / nums.length",
    "        val positive = nums.filter(x => x > 0)\n        positive.length.toFloat / nums.length.toFloat",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) {\n                count += 1\n            }\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (i <- nums) {\n            if (i > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        nums.filter(x => x > 0).length.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        val positive = nums.filter(x => x > 0)\n        return positive.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(_ > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        count.toFloat / nums.length",
    "        nums.filter(x => x > 0).length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(_ > 0)\n        positives.length.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        nums.filter(x => x > 0).length.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        val positives = nums.filter(x => x > 0)\n        positives.length.toFloat / nums.length.toFloat",
    "        val positive = nums.filter(x => x > 0)\n        positive.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        val count = nums.filter(x => x > 0).length\n        count.toFloat / nums.length",
    "        val positives = nums.filter(x => x > 0)\n        return positives.length.toFloat / nums.length.toFloat",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length",
    "        var count = 0\n        for (num <- nums) {\n            if (num > 0) count += 1\n        }\n        return count.toFloat / nums.length"
  ]
}