{
  "name": "mbpp_465_drop_empty",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to drop empty items from a given dictionary.\n    def dropEmpty(dict1 : Map[String,Option[String]]) : Map[String,String] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\", \"c2\" -> \"Green\"))));\n    assert(dropEmpty(Map[String,String](\"c1\" -> \"Red\", \"c2\" -> None, \"c3\" -> None)).equals((Map[String,String](\"c1\" -> \"Red\"))));\n    assert(dropEmpty(Map[String,None](\"c1\" -> None, \"c2\" -> \"Green\", \"c3\" -> None)).equals((Map[String,String](\"c2\" -> \"Green\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))",
    "        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        return dict2",
    "        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            v match {\n                case Some(x) => dict2 += (k -> x)\n                case None =>\n            }\n        }\n        dict2",
    "        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) dict2 += (k -> v.get)\n        }\n        dict2",
    "        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))",
    "        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v != None) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2",
    "        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2",
    "        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2",
    "        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) {\n                dict2 += (k -> v.get)\n            }\n        }\n        dict2",
    "        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))",
    "        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))",
    "        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))",
    "        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))",
    "        dict1.filter(x => x._2.isDefined).map(x => (x._1, x._2.get))",
    "        var dict2 = Map[String,String]()\n        for((k,v) <- dict1) {\n            if(v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2",
    "        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))",
    "        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))",
    "        var dict2 = Map[String,String]()\n        for ((k,v) <- dict1) {\n            if (v.isDefined) dict2 += (k -> v.get)\n        }\n        dict2",
    "        dict1.filter(x => x._2.isDefined).map(x => (x._1,x._2.get))",
    "        dict1.filter(_._2.isDefined).map(x => (x._1,x._2.get))"
  ]
}