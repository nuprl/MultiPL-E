{
  "name": "mbpp_767_get_pairs_count",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    def getPairsCount(arr : List[Long], sum : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getPairsCount((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 1l.toLong)), (2l)) == (6l));\n    assert(getPairsCount((List[Long](1l.toLong, 5l.toLong, 7l.toLong, -1l.toLong, 5l.toLong)), (6l)) == (3l));\n    assert(getPairsCount((List[Long](1l.toLong, -2l.toLong, 3l.toLong)), (1l)) == (1l));\n    assert(getPairsCount((List[Long](-1l.toLong, -2l.toLong, 3l.toLong)), (-3l)) == (1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) + arr(j) == sum) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        var count : Long = 0\n        var map = Map[Long, Long]()\n        for (i <- 0 until arr.length) {\n            if (map.contains(sum - arr(i))) {\n                count += map(sum - arr(i))\n            }\n            if (map.contains(arr(i))) {\n                map(arr(i)) += 1\n            } else {\n                map(arr(i)) = 1\n            }\n        }\n        return count",
    "        val map = new HashMap[Long, Long]()\n        var count = 0\n        for (i <- arr) {\n            if (map.contains(sum - i)) {\n                count += map(sum - i)\n            }\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return count",
    "        val map = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var twice_count = 0\n        for (i <- arr) {\n            if (map.contains(sum - i)) {\n                twice_count += map(sum - i)\n            }\n            if (sum - i == i) twice_count -= 1\n        }\n        return twice_count / 2",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- arr) {\n            if (map.contains(sum - i)) count += map(sum - i)\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var twiceCount = 0\n        for (i <- arr) {\n            if (map.contains(sum - i)) twiceCount += map(sum - i)\n            if (sum - i == i) twiceCount -= 1\n        }\n        return twiceCount / 2",
    "        var count : Long = 0\n        val map = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (map.contains(sum - i)) {\n                count += map(sum - i)\n            }\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0\n        for (i <- arr) {\n            if (map.contains(sum - i)) {\n                count += map(sum - i)\n            }\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) + arr(j) == sum) count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        var count = 0\n        for (i <- arr) {\n            if (map.contains(sum - i)) {\n                count += map(sum - i)\n            }\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0\n        for (i <- arr) {\n            if (map.contains(sum - i)) {\n                count += map(sum - i)\n            }\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) + arr(j) == sum) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        val map = new HashMap[Long, Long]()\n        for (i <- arr) {\n            if (map.contains(sum - i)) {\n                count += map(sum - i)\n            }\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var count = 0\n        for (i <- 0 until arr.length) {\n            if (map.contains(sum - arr(i))) {\n                count += map(sum - arr(i))\n            }\n            if (map.contains(arr(i))) {\n                map(arr(i)) += 1\n            } else {\n                map(arr(i)) = 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) + arr(j) == sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) + arr(j) == sum) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) + arr(j) == sum) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) + arr(j) == sum) count += 1\n            }\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) + arr(j) == sum) count += 1\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var twice_count = 0\n        for (i <- arr) {\n            if (map.contains(sum - i)) {\n                twice_count += map(sum - i)\n            }\n            if (sum - i == i) twice_count -= 1\n        }\n        twice_count / 2"
  ]
}