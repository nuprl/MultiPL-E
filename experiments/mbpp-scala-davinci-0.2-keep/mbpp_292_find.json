{
  "name": "mbpp_292_find",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    def find(n : Long, m : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(find((10l), (3l)) == (3l));\n    assert(find((4l), (2l)) == (2l));\n    assert(find((20l), (5l)) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return n / m",
    "        return n / m",
    "        var q = n / m\n        return q",
    "        return n / m",
    "        if (n < m) return 0\n        return 1 + find(n - m, m)",
    "        return n / m",
    "        return n / m",
    "        if (n < m) 0\n        else 1 + find(n - m, m)",
    "        n / m",
    "        return n / m",
    "        return n / m",
    "        return (n / m)",
    "        return n / m",
    "        return n / m",
    "        n / m",
    "        return n / m",
    "        return n / m",
    "        (n / m).toLong",
    "        return n / m",
    "        return n / m"
  ]
}