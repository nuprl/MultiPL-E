{
  "name": "mbpp_592_sum_Of_product",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    def sumOfProduct(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumOfProduct((3l)) == (15l));\n    assert(sumOfProduct((4l)) == (56l));\n    assert(sumOfProduct((1l)) == (1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (n - i + 1))\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- 1 to n.toInt) {\n            sum += (n - i + 1) * (n - i + 1)\n        }\n        return sum",
    "        val binomial = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, n.toInt)) {\n                if (j == 0 || j == i) binomial(i)(j) = 1\n                else binomial(i)(j) = binomial(i - 1)(j - 1) + binomial(i - 1)(j)\n            }\n        }\n        var sum = 0L\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to n.toInt) {\n                sum += binomial(i)(j) * binomial(n.toInt - i)(n.toInt - j)\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- 1 to n.toInt) {\n            sum += (binomial(n, i) * binomial(n, i + 1))\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(j, 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        sum",
    "        var result = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- i to n.toInt) {\n                product *= binomial(j, i)\n            }\n            result += product\n        }\n        result",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        val fact = new Array[Long](n.toInt + 1)\n        fact(0) = 1\n        for (i <- 1 to n.toInt) fact(i) = fact(i - 1) * i\n        def binomial(n : Long, k : Long) = fact(n.toInt) / (fact(k.toInt) * fact(n.toInt - k.toInt))\n        var sum = 0L\n        for (i <- 1 to n.toInt) sum += binomial(n, i) * binomial(n, i - 1)\n        sum",
    "        var sum : Long = 0\n        for (i <- 1 to n.toInt) {\n            sum += (i to n.toInt).product / (1 to (n.toInt - i)).product\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (n - i + 1))\n        }\n        sum",
    "        var result : Long = 0\n        for (i <- 1 to n.toInt) {\n            var product : Long = 1\n            for (j <- 1 to i) {\n                product *= binomialCoefficient(i, j)\n            }\n            result += product\n        }\n        return result",
    "        val mod = 1000000007L\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var prod = 1L\n            for (j <- 1 to i) {\n                prod = (prod * (n - j + 1)) % mod\n            }\n            sum = (sum + prod) % mod\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(n - i, j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += (binomialCoefficient(i, j) * binomialCoefficient(i, j - 1))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        sum",
    "        val mod = 1000000007L\n        val fact = new Array[Long](n.toInt + 1)\n        fact(0) = 1\n        for (i <- 1 to n.toInt) fact(i) = (fact(i - 1) * i) % mod\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum = (sum + (fact(i) * fact(n.toInt - i)) % mod) % mod\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += (binomialCoefficient(i, j) * binomialCoefficient(i, j + 1))\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to n.toInt) {\n                sum += binomial(i, j) * binomial(n - i, n - j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1) / 2)\n        }\n        sum",
    "        val m = n / 2\n        var sum = 0L\n        for (i <- 1L to m) {\n            sum += (binomial(n, i) * binomial(n, i + 1))\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomialCoefficient(i, j)\n            }\n            sum += product\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (n - i + 1))\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- i to n.toInt) {\n                product *= binomialCoefficient(j, i)\n            }\n            sum += product\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += binomial(n, i) * binomial(n, i + 1)\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += (binomialCoefficient(i, j) * binomialCoefficient(i, j - 1))\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n) {\n            for (j <- 1 to n) {\n                sum += binomial(i, j) * binomial(n - i, n - j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += (binomial(i, j) * binomial(i + j, j))\n            }\n        }\n        return sum",
    "        var result : Long = 0\n        for (i <- 1 to n.toInt) {\n            result += (i * (i + 1)) / 2\n        }\n        return result",
    "        val mod = 1000000007\n        val fact = new Array[Long](n.toInt + 1)\n        fact(0) = 1\n        for (i <- 1 to n.toInt) fact(i) = (fact(i - 1) * i) % mod\n        val inv = new Array[Long](n.toInt + 1)\n        inv(n.toInt) = pow(fact(n.toInt), mod - 2, mod).toLong\n        for (i <- (n.toInt - 1) to 0 by -1) inv(i) = (inv(i + 1) * (i + 1)) % mod\n        def ncr(n : Int, r : Int) : Long = {\n            (fact(n) * inv(r) * inv(n - r)) % mod\n        }\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (ncr(n.toInt, i) * ncr(n.toInt, i + 1)) % mod\n            sum %= mod\n        }\n        sum",
    "        val binomial = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, n.toInt)) {\n                if (j == 0 || j == i) binomial(i)(j) = 1\n                else binomial(i)(j) = binomial(i - 1)(j - 1) + binomial(i - 1)(j)\n            }\n        }\n        var sum = 0L\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to n.toInt) {\n                sum += binomial(i)(j) * binomial(n.toInt - i)(n.toInt - j)\n            }\n        }\n        sum",
    "        val m = n / 2\n        var sum = 0L\n        for (i <- 1 to m.toInt) {\n            sum += (i * (n - i + 1))\n        }\n        sum",
    "        var result = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                result += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        result",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to i) {\n                sum += binomial(i, j)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- 1 to n.toInt) {\n            sum += (i * (n - i + 1))\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (n - i + 1))\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        sum",
    "        val mod = 1000000007L\n        val fact = new Array[Long](n.toInt + 1)\n        fact(0) = 1\n        for (i <- 1 to n.toInt) {\n            fact(i) = (fact(i - 1) * i) % mod\n        }\n        def binomial(n : Long, k : Long) : Long = {\n            (fact(n.toInt) * pow(fact(k.toInt), mod - 2, mod).toLong * pow(fact(n.toInt - k.toInt), mod - 2, mod).toLong) % mod\n        }\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum = (sum + binomial(n, i) * binomial(n, i)) % mod\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += (binomialCoefficient(i, j) * binomialCoefficient(i, j + 1))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to n.toInt) {\n                sum += binomial(i, j) * binomial(n - i, n - j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to n.toInt) {\n                sum += binomial(i, j) * binomial(n - i, n - j)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (n - i + 1))\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (n - i + 1))\n        }\n        sum",
    "        val binomial = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            binomial(i)(0) = 1\n            binomial(i)(i) = 1\n            for (j <- 1 to i - 1) {\n                binomial(i)(j) = binomial(i - 1)(j - 1) + binomial(i - 1)(j)\n            }\n        }\n        var sum = 0L\n        for (i <- 0 to n.toInt - 1) {\n            sum += binomial(n.toInt)(i) * binomial(n.toInt)(i + 1)\n        }\n        sum",
    "        val arr = Array.fill(n.toInt + 1)(0)\n        arr(0) = 1\n        for (i <- 1 to n.toInt) {\n            arr(i) = (arr(i - 1) * (n - i + 1)) / i\n        }\n        arr.sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (n - i + 1))\n        }\n        sum",
    "        var sum = 0L\n        for (k <- 1 to n.toInt) {\n            sum += (binomial(n, k) * binomial(n, k + 1))\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += (binomial(i, j) * binomial(i, j + 1))\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (n - i + 1))\n        }\n        sum",
    "        val m = n / 2\n        var sum = 0L\n        for (i <- 1 to m.toInt) {\n            sum += (binomial(n, i) * binomial(n, i + 1))\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to n.toInt) {\n                sum += binomial(i, j) * binomial(n - i, n - j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomialCoefficient(i, j)\n            }\n            sum += product\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        sum",
    "        val mod = 1000000007L\n        val fact = Array.fill(n.toInt + 1)(1L)\n        for (i <- 2 to n.toInt) fact(i) = (fact(i - 1) * i) % mod\n        def binomial(n : Long, k : Long) : Long = {\n            val a = fact(n.toInt)\n            val b = (fact(k.toInt) * fact(n.toInt - k.toInt)) % mod\n            val c = pow(b, mod - 2).toLong\n            (a * c) % mod\n        }\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            val a = binomial(n, i)\n            val b = binomial(n - 1, i - 1)\n            sum = (sum + (a * b)) % mod\n        }\n        sum",
    "        val binomial = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to i) {\n                if (j == 0 || j == i) binomial(i)(j) = 1\n                else binomial(i)(j) = binomial(i - 1)(j - 1) + binomial(i - 1)(j)\n            }\n        }\n        var sum = 0L\n        for (i <- 0 to n.toInt) {\n            for (j <- i + 1 to n.toInt) {\n                sum += binomial(i)(i) * binomial(j)(j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(n - i, j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        sum",
    "        val mod = 1000000007L\n        val fact = new Array[Long](n.toInt + 1)\n        fact(0) = 1\n        for (i <- 1 to n.toInt) fact(i) = (fact(i - 1) * i) % mod\n        def binomial(n : Long, k : Long) : Long = {\n            val numerator = fact(n.toInt)\n            val denominator = (fact(k.toInt) * fact(n.toInt - k.toInt)) % mod\n            val inverse = pow(denominator, mod - 2).toLong\n            (numerator * inverse) % mod\n        }\n        var result = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to n.toInt) {\n                result = (result + (binomial(i, j) * binomial(n - i, j)) % mod) % mod\n            }\n        }\n        result",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        sum",
    "        val fact = new Array[Long](n.toInt + 1)\n        fact(0) = 1\n        for (i <- 1 to n.toInt) fact(i) = fact(i - 1) * i\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += fact(i) / (fact(j) * fact(i - j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        return sum",
    "        val fact = new Array[Long](n.toInt + 1)\n        fact(0) = 1\n        for (i <- 1 to n.toInt) fact(i) = fact(i - 1) * i\n        def binomial(n : Long, k : Long) : Long = fact(n.toInt) / (fact(k.toInt) * fact(n.toInt - k.toInt))\n        var sum = 0L\n        for (i <- 1 to n.toInt) sum += binomial(n, i) * binomial(n, i - 1)\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 2 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomialCoefficient(i, j) * binomialCoefficient(i, j + 1)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        sum",
    "        var result : Long = 0\n        for (i <- 1 to n.toInt) {\n            result += (i * (i + 1))\n        }\n        return result",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        sum",
    "        var result = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                result += (binomial(i, j) * binomial(i + j, j))\n            }\n        }\n        result",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += (binomial(i, j) * binomial(i, j + 1))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= n - j + 1\n                product /= j\n            }\n            sum += product\n        }\n        sum",
    "        val binomial = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, n.toInt)) {\n                if (j == 0 || j == i) binomial(i)(j) = 1\n                else binomial(i)(j) = binomial(i - 1)(j - 1) + binomial(i - 1)(j)\n            }\n        }\n        var sum = 0L\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to n.toInt) {\n                sum += binomial(i)(j) * binomial(n.toInt - i)(n.toInt - j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += (i - j + 1) * (j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        val mod = 1000000007L\n        val fact = new Array[Long](n.toInt + 1)\n        fact(0) = 1\n        for (i <- 1 to n.toInt) fact(i) = (fact(i - 1) * i) % mod\n        def nCr(n : Long, r : Long) : Long = {\n            if (r > n) 0\n            else {\n                val num = fact(n.toInt)\n                val den = (fact(r.toInt) * fact(n.toInt - r.toInt)) % mod\n                (num * pow(den, mod - 2, mod)) % mod\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum = (sum + nCr(n, i) * nCr(n, i)) % mod\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (1 to i).product\n        }\n        sum",
    "        val binomial = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to i) {\n                if (j == 0 || j == i) binomial(i)(j) = 1\n                else binomial(i)(j) = binomial(i - 1)(j - 1) + binomial(i - 1)(j)\n            }\n        }\n        var sum = 0L\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to i) {\n                sum += binomial(i)(j) * binomial(i)(j)\n            }\n        }\n        sum",
    "        val binomial = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            binomial(i)(0) = 1\n            binomial(i)(i) = 1\n        }\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i - 1) {\n                binomial(i)(j) = binomial(i - 1)(j - 1) + binomial(i - 1)(j)\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to n.toInt) {\n                sum += binomial(i)(j) * binomial(n.toInt - i + 1)(n.toInt - j + 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(n - i, j)\n            }\n        }\n        return sum",
    "        val mod = 1000000007L\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product = (product * (n - j + 1)) % mod\n            }\n            sum = (sum + product) % mod\n        }\n        sum",
    "        val arr = Array.fill(n.toInt + 1)(1L)\n        for (i <- 2 to n.toInt) {\n            for (j <- i - 1 to 1 by -1) {\n                arr(j) += arr(j - 1)\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += arr(i) * arr(i)\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (n - i + 1))\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- i + 1 to n.toInt) {\n                sum += (i * j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomialCoefficient(i, j) * binomialCoefficient(i, j + 1)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        var result : Long = 0\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                result += binomial(i, j) * binomial(n - i, j)\n            }\n        }\n        return result",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to n.toInt) {\n                sum += binomial(i, j) * binomial(n - i, n - j)\n            }\n        }\n        return sum",
    "        val p = new Array[Long](n.toInt + 1)\n        p(0) = 1\n        for (i <- 1 to n.toInt) {\n            p(i) = p(i - 1) * (n - i + 1) / i\n        }\n        p.sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomialCoefficient(i, j) * binomialCoefficient(i, j + 1)\n            }\n        }\n        sum",
    "        val binomial = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to i) {\n                if (j == 0 || j == i) binomial(i)(j) = 1\n                else binomial(i)(j) = binomial(i - 1)(j - 1) + binomial(i - 1)(j)\n            }\n        }\n        var sum = 0L\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to i) {\n                sum += binomial(i)(j) * binomial(n.toInt - i)(n.toInt - j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= (n - j + 1)\n                product /= j\n            }\n            sum += product\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- i to n.toInt) {\n                product *= binomial(j, i)\n            }\n            sum += product\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to n.toInt) {\n                sum += binomial(i, j) * binomial(n - i, n - j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(n - i, j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(n - i, j)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        return sum",
    "        val fact = new Array[Long](n.toInt + 1)\n        fact(0) = 1\n        for (i <- 1 to n.toInt) fact(i) = fact(i - 1) * i\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- i + 1 to n.toInt) {\n                sum += fact(i) * fact(j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(n - i, j)\n            }\n        }\n        sum",
    "        val mod = 1000000007L\n        var sum = 0L\n        for (k <- 1 to n.toInt) {\n            var product = 1L\n            for (i <- k + 1 to n.toInt) {\n                product = (product * (i - 1)) % mod\n            }\n            sum = (sum + product) % mod\n        }\n        sum",
    "        val modulo = 1000000007L\n        val factorials = Array.ofDim[Long](n.toInt + 1)\n        factorials(0) = 1\n        for (i <- 1 to n.toInt) factorials(i) = (factorials(i - 1) * i) % modulo\n        def binomial(n : Long, k : Long) : Long = {\n            val numerator = factorials(n.toInt)\n            val denominator = (factorials(k.toInt) * factorials((n - k).toInt)) % modulo\n            (numerator * pow(denominator, modulo - 2).toLong) % modulo\n        }\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum = (sum + (binomial(i, j) * binomial(n - i, j)) % modulo) % modulo\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= nCr(i, j)\n            }\n            sum += product\n        }\n        sum",
    "        val m = n / 2\n        var sum = 0L\n        for (k <- 0 to m.toInt) {\n            sum += binomial(n, k) * binomial(n, k + 1)\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomialCoefficient(i, j) * binomialCoefficient(i, j + 1)\n            }\n        }\n        return sum",
    "        val m = n / 2\n        var sum = 0L\n        for (i <- 1 to m) {\n            sum += (i * (n - i + 1))\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += (binomial(i, j) * binomial(i, j + 1))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        return sum",
    "        val mod = 1000000007L\n        val fact = Array.ofDim[Long](n.toInt + 1)\n        fact(0) = 1\n        for (i <- 1 to n.toInt) fact(i) = (fact(i - 1) * i) % mod\n        def binomial(n : Long, k : Long) : Long = {\n            (fact(n.toInt) * pow(fact(k.toInt), mod - 2, mod).toLong * pow(fact(n.toInt - k.toInt), mod - 2, mod).toLong) % mod\n        }\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum = (sum + binomial(i, j) * binomial(i, j)) % mod\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- 1 to n.toInt) {\n            sum += (i * (n - i + 1))\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += binomial(n, i) * binomial(n, i - 1)\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        sum",
    "        val m = n / 2\n        var sum = 0L\n        for (i <- 1 to m.toInt) {\n            sum += (i * (n - i + 1))\n        }\n        sum",
    "        val m = n / 2\n        var sum = 0L\n        for (i <- 1 to m.toInt) {\n            val a = binomialCoefficient(n, i)\n            val b = binomialCoefficient(n, n - i)\n            sum += a * b\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (i + 1)) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        return sum",
    "        var result : Long = 0\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                result += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        return result",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to n.toInt) {\n                sum += binomial(i, j)\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- 1 to n.toInt) {\n            var product : Long = 1\n            for (j <- i to n.toInt) {\n                product *= binomialCoefficient(j, i)\n            }\n            sum += product\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        sum",
    "        val m = n / 2\n        var sum = 0L\n        for (i <- 1 to m) {\n            val a = binomial(n, i)\n            val b = binomial(n, n - i)\n            sum += a * b\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += (binomial(i, j) * binomial(i, j + 1))\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(n - i, j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += (binomial(i, j) * binomial(i, j + 1))\n            }\n        }\n        return sum",
    "        val binomial = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to min(i, n.toInt)) {\n                if (j == 0 || j == i) binomial(i)(j) = 1\n                else binomial(i)(j) = binomial(i - 1)(j - 1) + binomial(i - 1)(j)\n            }\n        }\n        var sum = 0L\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to n.toInt) {\n                sum += binomial(i)(j) * binomial(n.toInt - i)(n.toInt - j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to n.toInt) {\n                sum += binomial(i, j) * binomial(n - i, n - j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (i * (n - i + 1))\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- i to n.toInt) {\n                product *= binomial(j, i)\n            }\n            sum += product\n        }\n        return sum",
    "        val m = n / 2\n        var sum = 0L\n        for (i <- 1 to m.toInt) {\n            sum += (binomial(n, i) * binomial(n, i + 1))\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        sum",
    "        val mod = 1000000007L\n        val binomial = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            binomial(i)(0) = 1\n            binomial(i)(i) = 1\n        }\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i - 1) {\n                binomial(i)(j) = (binomial(i - 1)(j - 1) + binomial(i - 1)(j)) % mod\n            }\n        }\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum = (sum + binomial(i)(j) * binomial(n.toInt - i + 1)(j)) % mod\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += (i - j + 1) * (j)\n            }\n        }\n        sum",
    "        var result = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                result += binomial(i, j) * binomial(i, j - 1)\n            }\n        }\n        result",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(n - i, j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomialCoefficient(i, j)\n            }\n            sum += product\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomialCoefficient(i, j) * binomialCoefficient(i, j - 1)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to n.toInt) {\n                sum += binomial(i, j) * binomial(n - i, n - j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            var product = 1L\n            for (j <- 1 to i) {\n                product *= binomial(i, j)\n            }\n            sum += product\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i) {\n                sum += binomial(i, j) * binomial(i, j + 1)\n            }\n        }\n        sum"
  ]
}