{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove characters from the first string which are present in the second string.\n    def removeDirtyChars(string : String, second_string : String) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeDirtyChars((\"probasscurve\"), (\"pros\")).equals((\"bacuve\")));\n    assert(removeDirtyChars((\"digitalindia\"), (\"talent\")).equals((\"digiidi\")));\n    assert(removeDirtyChars((\"exoticmiles\"), (\"toxic\")).equals((\"emles\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        val string_array = string.toCharArray\n        val second_string_array = second_string.toCharArray\n        val second_string_set = second_string_array.toSet\n        val string_buffer = new StringBuffer\n        for (char <- string_array) {\n            if (!second_string_set.contains(char)) {\n                string_buffer.append(char)\n            }\n        }\n        string_buffer.toString",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        result",
    "        val s = string.toList\n        val s2 = second_string.toList\n        val s3 = s.filterNot(s2.contains(_))\n        s3.mkString",
    "        var result = string\n        for (i <- 0 to second_string.length - 1) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        val second_string_set = second_string.toSet\n        string.filter(!second_string_set.contains(_))",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string.charAt(i).toString, \"\")\n        }\n        return result",
    "        val dirty_chars = second_string.toSet\n        string.filter(!dirty_chars.contains(_))",
    "        val second_string_set = second_string.toSet\n        string.filter(!second_string_set.contains(_))",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        val map = new HashMap[Char, Int]()\n        for (c <- second_string) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        val sb = new StringBuilder()\n        for (c <- string) {\n            if (!map.contains(c)) sb.append(c)\n        }\n        sb.toString",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        val char_array = string.toCharArray\n        val second_char_array = second_string.toCharArray\n        val dirty_chars = new HashSet[Char]\n        for (i <- 0 until second_char_array.length) dirty_chars += second_char_array(i)\n        val clean_string = new StringBuilder\n        for (i <- 0 until char_array.length) if (!dirty_chars.contains(char_array(i))) clean_string += char_array(i)\n        clean_string.toString",
    "        val char_set = second_string.toSet\n        string.filter(!char_set.contains(_))",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        val map = new HashMap[Char, Boolean]\n        for (c <- second_string) map(c) = true\n        string.filter(c => !map.contains(c))",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        val map = new HashMap[Char, Int]\n        for (i <- 0 until second_string.length) {\n            map.put(second_string(i), 1)\n        }\n        val sb = new StringBuilder\n        for (i <- 0 until string.length) {\n            if (!map.contains(string(i))) sb.append(string(i))\n        }\n        sb.toString",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        result",
    "        val second_string_map = new HashMap[Char, Int]()\n        for (c <- second_string) {\n            if (second_string_map.contains(c)) {\n                second_string_map(c) += 1\n            } else {\n                second_string_map(c) = 1\n            }\n        }\n        val string_builder = new StringBuilder()\n        for (c <- string) {\n            if (!second_string_map.contains(c)) {\n                string_builder.append(c)\n            }\n        }\n        string_builder.toString",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var clean_string = string\n        for (c <- second_string) {\n            clean_string = clean_string.replaceAll(c.toString, \"\")\n        }\n        clean_string",
    "        val dirty_chars = second_string.toList.toSet\n        string.filter(!dirty_chars.contains(_)).mkString",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = \"\"\n        for (c <- string) {\n            if (!second_string.contains(c)) {\n                result += c\n            }\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        val dirty_chars = second_string.toSet\n        string.filter(!dirty_chars.contains(_))",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replaceAll(\" \", \"\")",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        val string_list = string.toList\n        val second_string_list = second_string.toList\n        val set = second_string_list.toSet\n        string_list.filter(x => !set.contains(x)).mkString",
    "        string.filter(!second_string.contains(_))",
    "        val second_string_set = second_string.toSet\n        string.filter(!second_string_set.contains(_))",
    "        val second_string_set = second_string.toSet\n        string.filter(!second_string_set.contains(_))",
    "        val dirty_chars = second_string.toSet\n        string.filter(c => !dirty_chars.contains(c))",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        val char_list = second_string.toList\n        val result = string.toList.filter(x => !char_list.contains(x))\n        result.mkString",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        val second_string_set = second_string.toSet\n        string.filter(!second_string_set.contains(_))",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = \"\"\n        for (i <- 0 until string.length) {\n            if (!second_string.contains(string(i))) {\n                result += string(i)\n            }\n        }\n        result",
    "        val char_map = new HashMap[Char, Boolean]\n        for (c <- second_string) {\n            char_map(c) = true\n        }\n        string.filter(c => !char_map.contains(c))",
    "        var result = string\n        for (char <- second_string) {\n            result = result.replace(char.toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string.charAt(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        result",
    "        val hash = new HashSet[Char]\n        for (c <- second_string) hash += c\n        val sb = new StringBuilder\n        for (c <- string) if (!hash.contains(c)) sb.append(c)\n        sb.toString",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        val second_string_set = second_string.toSet\n        string.filter(!second_string_set.contains(_))",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i).toString, \"\")\n        }\n        return result",
    "        val map = new HashMap[Char, Int]\n        for (i <- 0 until second_string.length) {\n            val c = second_string(i)\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        val sb = new StringBuilder\n        for (i <- 0 until string.length) {\n            val c = string(i)\n            if (!map.contains(c)) sb.append(c)\n        }\n        sb.toString",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var dirty_chars = new HashSet[Char]\n        for (c <- second_string) {\n            dirty_chars += c\n        }\n        var clean_string = \"\"\n        for (c <- string) {\n            if (!dirty_chars.contains(c)) {\n                clean_string += c\n            }\n        }\n        clean_string",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        val dirty_chars = second_string.toSet\n        string.filter(!dirty_chars.contains(_))",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string.charAt(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = \"\"\n        for (i <- 0 until string.length) {\n            if (!second_string.contains(string(i))) {\n                result += string(i)\n            }\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        val char_set = new HashSet[Char]\n        for (i <- 0 until second_string.length) {\n            char_set += second_string(i)\n        }\n        val sb = new StringBuilder\n        for (i <- 0 until string.length) {\n            if (!char_set.contains(string(i))) {\n                sb.append(string(i))\n            }\n        }\n        return sb.toString",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        val set = second_string.toSet\n        string.filter(!set.contains(_))",
    "        val char_set = second_string.toSet\n        string.filter(!char_set.contains(_))",
    "        var result = string\n        for (i <- 0 to second_string.length - 1) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        val second_string_set = second_string.toSet\n        string.filter(!second_string_set.contains(_))",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        val char_set = second_string.toSet\n        string.filter(!char_set.contains(_))",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        val second_string_set = second_string.toSet\n        string.filter(!second_string_set.contains(_))",
    "        var result = string\n        for (char <- second_string) {\n            result = result.replace(char.toString, \"\")\n        }\n        return result",
    "        val map = new HashMap[Char, Int]\n        for (c <- second_string) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        var result = \"\"\n        for (c <- string) {\n            if (!map.contains(c)) result += c\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = \"\"\n        for (c <- string) {\n            if (!second_string.contains(c)) {\n                result += c\n            }\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replaceAll(\" \", \"\")",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 to second_string.length - 1) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = \"\"\n        for (i <- 0 until string.length) {\n            if (!second_string.contains(string(i))) {\n                result += string(i)\n            }\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var dirty_chars = new HashSet[Char]\n        for (c <- second_string) {\n            dirty_chars += c\n        }\n        var clean_string = \"\"\n        for (c <- string) {\n            if (!dirty_chars.contains(c)) {\n                clean_string += c\n            }\n        }\n        clean_string",
    "        var result = new StringBuilder\n        for (i <- 0 until string.length) {\n            if (!second_string.contains(string(i))) {\n                result.append(string(i))\n            }\n        }\n        result.toString",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        val second_string_set = second_string.toSet\n        string.filter(!second_string_set.contains(_))",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string.charAt(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        val s = string.toList\n        val s2 = second_string.toList\n        val s3 = s.filter(!s2.contains(_))\n        s3.mkString",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        val second_string_set = second_string.toSet\n        string.filter(c => !second_string_set.contains(c))",
    "        var result = \"\"\n        for (i <- 0 until string.length) {\n            if (!second_string.contains(string(i))) {\n                result += string(i)\n            }\n        }\n        result",
    "        val second_string_set = second_string.toSet\n        string.filter(!second_string_set.contains(_))",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        val char_map = new HashMap[Char, Int]\n        for (c <- second_string) {\n            if (char_map.contains(c)) char_map(c) += 1\n            else char_map(c) = 1\n        }\n        val new_string = new StringBuilder\n        for (c <- string) {\n            if (!char_map.contains(c)) new_string.append(c)\n        }\n        new_string.toString",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replaceAll(\" \", \"\")",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        val dirty_chars = second_string.toSet\n        string.filter(!dirty_chars.contains(_))",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until string.length) {\n            if (!second_string.contains(string(i))) {\n                result += string(i)\n            }\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        val char_set = second_string.toSet\n        string.filter(!char_set.contains(_))",
    "        val second_string_set = second_string.toSet\n        string.filterNot(second_string_set)",
    "        val char_set = new HashSet[Char]\n        for (c <- second_string) char_set += c\n        val sb = new StringBuilder\n        for (c <- string) if (!char_set.contains(c)) sb.append(c)\n        sb.toString",
    "        val second_string_set = second_string.toSet\n        string.filter(!second_string_set.contains(_))",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (char <- second_string) {\n            result = result.replaceAll(char.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until string.length) {\n            if (!second_string.contains(string(i))) {\n                result += string(i)\n            }\n        }\n        result",
    "        val set = new HashSet[Char]\n        for (c <- second_string) set += c\n        val sb = new StringBuilder\n        for (c <- string) if (!set.contains(c)) sb += c\n        sb.toString",
    "        val string_list = string.toList\n        val second_string_list = second_string.toList\n        val result = string_list.filter(x => !second_string_list.contains(x))\n        result.mkString",
    "        val string_array = string.toCharArray\n        val second_string_array = second_string.toCharArray\n        val string_array_buffer = string_array.toBuffer\n        val second_string_array_buffer = second_string_array.toBuffer\n        for (i <- 0 until string_array_buffer.length) {\n            for (j <- 0 until second_string_array_buffer.length) {\n                if (string_array_buffer(i) == second_string_array_buffer(j)) {\n                    string_array_buffer.remove(i)\n                }\n            }\n        }\n        string_array_buffer.mkString",
    "        val dirty_chars = second_string.toSet\n        string.filter(!dirty_chars.contains(_))",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        val dirty_chars = second_string.toSet\n        string.filter(!dirty_chars.contains(_))",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var map = new HashMap[Char, Int]()\n        for (c <- second_string) {\n            if (map.contains(c)) map(c) += 1 else map(c) = 1\n        }\n        var result = new StringBuilder()\n        for (c <- string) {\n            if (!map.contains(c)) result += c\n        }\n        result.toString",
    "        var result = string\n        for (i <- 0 to second_string.length - 1) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        val char_set = new HashSet[Char]\n        for (c <- second_string) char_set += c\n        val result = new StringBuilder\n        for (c <- string) if (!char_set.contains(c)) result += c\n        result.toString",
    "        val string_list = string.toList\n        val second_string_list = second_string.toList\n        val string_list_set = string_list.toSet\n        val second_string_list_set = second_string_list.toSet\n        val common_set = string_list_set.intersect(second_string_list_set)\n        val common_list = common_set.toList\n        val common_list_map = common_list.map(x => (x, 1)).toMap\n        val new_string_list = string_list.filter(x => !common_list_map.contains(x))\n        new_string_list.mkString(\"\")",
    "        val second_string_set = second_string.toSet\n        string.filter(!second_string_set.contains(_))",
    "        val map = new HashMap[Char, Int]\n        for (c <- second_string) {\n            if (map.contains(c)) map(c) += 1\n            else map += (c -> 1)\n        }\n        var result = \"\"\n        for (c <- string) {\n            if (!map.contains(c)) result += c\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        val second_string_set = second_string.toSet\n        string.filter(!second_string_set.contains(_))",
    "        val string_list = string.toList\n        val second_string_list = second_string.toList\n        val second_string_set = second_string_list.toSet\n        string_list.filter(!second_string_set.contains(_)).mkString",
    "        val dirty_chars = second_string.toSet\n        string.filter(!dirty_chars.contains(_))",
    "        val string_buffer = new StringBuffer(string)\n        for (i <- 0 until string_buffer.length) {\n            if (second_string.contains(string_buffer(i))) {\n                string_buffer.deleteCharAt(i)\n            }\n        }\n        string_buffer.toString",
    "        val dirty_chars = second_string.toSet\n        string.filter(!dirty_chars.contains(_))",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        val char_map = new HashMap[Char, Int]\n        for (c <- second_string) {\n            if (char_map.contains(c)) {\n                char_map(c) += 1\n            } else {\n                char_map(c) = 1\n            }\n        }\n        val sb = new StringBuilder\n        for (c <- string) {\n            if (!char_map.contains(c)) {\n                sb.append(c)\n            }\n        }\n        return sb.toString",
    "        val second_string_set = second_string.toSet\n        string.filterNot(second_string_set)",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        val char_set = new HashSet[Char]\n        for (c <- second_string) char_set += c\n        string.filter(c => !char_set.contains(c))",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result"
  ]
}