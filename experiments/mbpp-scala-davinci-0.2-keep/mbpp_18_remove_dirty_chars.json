{
  "name": "mbpp_18_remove_dirty_chars",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove characters from the first string which are present in the second string.\n    def removeDirtyChars(string : String, second_string : String) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeDirtyChars((\"probasscurve\"), (\"pros\")).equals((\"bacuve\")));\n    assert(removeDirtyChars((\"digitalindia\"), (\"talent\")).equals((\"digiidi\")));\n    assert(removeDirtyChars((\"exoticmiles\"), (\"toxic\")).equals((\"emles\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        val string_array = string.toCharArray\n        val second_string_array = second_string.toCharArray\n        val second_string_set = second_string_array.toSet\n        val string_buffer = new StringBuffer\n        for (char <- string_array) {\n            if (!second_string_set.contains(char)) {\n                string_buffer.append(char)\n            }\n        }\n        string_buffer.toString",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        result",
    "        val s = string.toList\n        val s2 = second_string.toList\n        val s3 = s.filterNot(s2.contains(_))\n        s3.mkString",
    "        var result = string\n        for (i <- 0 to second_string.length - 1) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replace(second_string(i), ' ')\n        }\n        result.replace(\" \", \"\")",
    "        val second_string_set = second_string.toSet\n        string.filter(!second_string_set.contains(_))",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replaceAll(c.toString, \"\")\n        }\n        result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string.charAt(i).toString, \"\")\n        }\n        return result",
    "        val dirty_chars = second_string.toSet\n        string.filter(!dirty_chars.contains(_))",
    "        val second_string_set = second_string.toSet\n        string.filter(!second_string_set.contains(_))",
    "        var result = string\n        for (i <- 0 until second_string.length) {\n            result = result.replaceAll(second_string(i).toString, \"\")\n        }\n        return result",
    "        val map = new HashMap[Char, Int]()\n        for (c <- second_string) {\n            if (map.contains(c)) map(c) += 1\n            else map(c) = 1\n        }\n        val sb = new StringBuilder()\n        for (c <- string) {\n            if (!map.contains(c)) sb.append(c)\n        }\n        sb.toString",
    "        var result = string\n        for (c <- second_string) {\n            result = result.replace(c.toString, \"\")\n        }\n        result"
  ]
}