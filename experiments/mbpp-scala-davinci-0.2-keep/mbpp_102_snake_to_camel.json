{
  "name": "mbpp_102_snake_to_camel",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        sb.append(words(0))\n        for (i <- 1 until words.length) {\n            sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else {\n                val w = words(i)\n                sb.append(w.substring(0, 1).toUpperCase)\n                sb.append(w.substring(1))\n            }\n        }\n        sb.toString",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        var camel = words(0)\n        for (i <- 1 until words.length) {\n            camel += words(i).capitalize\n        }\n        camel",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val result = new StringBuilder\n        result.append(words(0))\n        for (i <- 1 until words.length) {\n            result.append(words(i).capitalize)\n        }\n        result.toString",
    "        var camel = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') camel += word(i + 1).toUpper\n            else if (word(i) != '_') camel += word(i)\n        }\n        camel",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                result += if (isUpper) c.toUpper else c\n                isUpper = false\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                result += if (nextUpper) c.toUpper else c\n                nextUpper = false\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val camel = words.map(w => w.head.toUpper + w.tail).mkString\n        camel.head.toLower + camel.tail",
    "        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') isUpper = true\n            else {\n                if (isUpper) result += c.toUpper\n                else result += c\n                isUpper = false\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        words.map(x => x.head.toUpper + x.tail).mkString(\"\")",
    "        var result = \"\"\n        var first = true\n        for (c <- word) {\n            if (c == '_') {\n                first = true\n            } else {\n                if (first) {\n                    result += c.toUpper\n                    first = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var camel = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 1\n            } else {\n                camel += word(i)\n            }\n        }\n        camel",
    "        val words = word.split(\"_\")\n        words.map(_.capitalize).mkString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        var camel = \"\"\n        for (i <- 0 until words.length) {\n            if (i == 0) camel += words(i)\n            else camel += words(i).capitalize\n        }\n        camel",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else result += word(i)\n        }\n        result",
    "        val words = word.split(\"_\")\n        val camel = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) camel.append(words(i))\n            else camel.append(words(i).capitalize)\n        }\n        camel.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var flag = false\n        for (c <- word) {\n            if (c == '_') flag = true\n            else if (flag) {\n                result += c.toUpper\n                flag = false\n            }\n            else result += c\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var camel = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    camel += c.toUpper\n                    nextUpper = false\n                } else {\n                    camel += c\n                }\n            }\n        }\n        camel",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val camel = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) camel.append(words(i))\n            else camel.append(words(i).capitalize)\n        }\n        camel.toString",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            sb.append(words(i).substring(0, 1).toUpperCase)\n            sb.append(words(i).substring(1))\n        }\n        sb.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') isUpper = true\n            else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                }\n                else result += c\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        words.map(x => x.head.toUpper + x.tail).mkString(\"\")",
    "        var camel = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 1\n            }\n            else camel += word(i)\n        }\n        camel",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\").toList\n        words.head + words.tail.map(_.capitalize).mkString",
    "        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        val words = word.split(\"_\")\n        words.map(x => x.head.toUpper + x.tail).mkString(\"\")",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') isUpper = true\n            else {\n                if (isUpper) result += c.toUpper\n                else result += c\n                isUpper = false\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        words.map(x => x.capitalize).mkString(\"\")",
    "        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString",
    "        var camel = \"\"\n        var first = true\n        for (c <- word) {\n            if (c == '_') first = true\n            else if (first) {\n                camel += c.toUpper\n                first = false\n            }\n            else camel += c\n        }\n        camel",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val result = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) result.append(words(i))\n            else result.append(words(i).capitalize)\n        }\n        result.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val camel = words.map(w => w.head.toUpper + w.tail).mkString\n        camel.head.toLower + camel.tail",
    "        var camel = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 1\n            }\n            else camel += word(i)\n        }\n        camel",
    "        var camel = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    camel += c.toUpper\n                    nextUpper = false\n                } else {\n                    camel += c\n                }\n            }\n        }\n        camel",
    "        val words = word.split(\"_\")\n        val camel = words.map(x => x.head.toUpper + x.tail).mkString(\"\")\n        camel.head.toLower + camel.tail",
    "        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else {\n                val first = words(i).charAt(0).toUpper\n                val rest = words(i).substring(1)\n                sb.append(first)\n                sb.append(rest)\n            }\n        }\n        sb.toString",
    "        val words = word.split(\"_\")\n        words.map(x => x.head.toUpper + x.tail).mkString(\"\")",
    "        val words = word.split(\"_\")\n        var camel = \"\"\n        for (i <- 0 until words.length) {\n            if (i == 0) camel += words(i)\n            else camel += words(i).capitalize\n        }\n        camel",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val camel = words.map(w => w.head.toUpper + w.tail).mkString\n        camel.head.toLower + camel.tail",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') isUpper = true\n            else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                }\n                else result += c\n            }\n        }\n        result",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val firstWord = words(0)\n        val restWords = words.drop(1)\n        val camelWords = restWords.map(x => x.capitalize)\n        val camelWord = firstWord + camelWords.mkString(\"\")\n        camelWord",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') isUpper = true\n            else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                }\n                else result += c\n            }\n        }\n        result",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                i += 1\n                result += word(i).toUpper\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result",
    "        var result = \"\"\n        var flag = false\n        for (c <- word) {\n            if (c == '_') {\n                flag = true\n            } else {\n                if (flag) {\n                    result += c.toUpper\n                    flag = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString(\"\")",
    "        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString(\"\")",
    "        val words = word.split(\"_\")\n        words.map(x => x.head.toUpper + x.tail).mkString",
    "        val words = word.split(\"_\")\n        words.map(x => x.capitalize).mkString(\"\")",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        val words = word.split(\"_\")\n        val camel = new StringBuilder\n        camel.append(words(0))\n        for (i <- 1 until words.length) {\n            camel.append(words(i).capitalize)\n        }\n        camel.toString",
    "        var camel = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 1\n            } else {\n                camel += word(i)\n            }\n        }\n        camel",
    "        var camel = \"\"\n        var last = ' '\n        for (c <- word) {\n            if (last == '_') camel += c.toUpper\n            else camel += c\n            last = c\n        }\n        camel",
    "        val words = word.split(\"_\")\n        words.map(x => x.head.toUpper + x.tail).mkString(\"\")",
    "        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var camel = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 1\n            } else {\n                camel += word(i)\n            }\n            i += 1\n        }\n        camel",
    "        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var flag = false\n        for (c <- word) {\n            if (c == '_') flag = true\n            else if (flag) {\n                result += c.toUpper\n                flag = false\n            }\n            else result += c\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var camel = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    camel += c.toUpper\n                    isUpper = false\n                } else {\n                    camel += c\n                }\n            }\n        }\n        camel",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                i += 1\n                result += word(i).toUpper\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result",
    "        var result = \"\"\n        var flag = false\n        for (c <- word) {\n            if (c == '_') flag = true\n            else if (flag) {\n                result += c.toUpper\n                flag = false\n            }\n            else result += c\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var camel = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 1\n            } else {\n                camel += word(i)\n            }\n            i += 1\n        }\n        camel",
    "        val words = word.split(\"_\")\n        val camel = words.map(word => word.head.toUpper + word.tail).mkString\n        camel.head.toLower + camel.tail",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        val words = word.split(\"_\")\n        val firstWord = words(0)\n        val restWords = words.drop(1)\n        val camelCase = restWords.foldLeft(firstWord)((acc, w) => acc + w.capitalize)\n        camelCase",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                i += 1\n                result += word(i).toUpper\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            val word = words(i)\n            if (i == 0) sb.append(word)\n            else sb.append(word.capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var camel = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 2\n            } else {\n                camel += word(i)\n                i += 1\n            }\n        }\n        camel",
    "        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString",
    "        var result = \"\"\n        var capital = false\n        for (c <- word) {\n            if (c == '_') capital = true\n            else {\n                if (capital) {\n                    result += c.toUpper\n                    capital = false\n                }\n                else result += c\n            }\n        }\n        result",
    "        var result = \"\"\n        var prev = ' '\n        for (c <- word) {\n            if (c == '_') {\n                prev = c\n            } else {\n                if (prev == '_') {\n                    result += c.toUpper\n                } else {\n                    result += c\n                }\n                prev = c\n            }\n        }\n        result",
    "        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            }\n            else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result",
    "        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') isFirst = true\n            else if (isFirst) {\n                result += c.toUpper\n                isFirst = false\n            }\n            else result += c\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var camel = \"\"\n        var first = true\n        for (c <- word) {\n            if (c == '_') {\n                first = true\n            } else {\n                if (first) {\n                    camel += c.toUpper\n                    first = false\n                } else {\n                    camel += c\n                }\n            }\n        }\n        camel",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val camel = words.map(word => word.head.toUpper + word.tail).mkString(\"\")\n        camel.head.toLower + camel.tail",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        sb.append(words(0))\n        for (i <- 1 until words.length) {\n            sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var first = true\n        for (c <- word) {\n            if (c == '_') first = true\n            else if (first) {\n                result += c.toUpper\n                first = false\n            }\n            else result += c\n        }\n        result",
    "        val words = word.split(\"_\")\n        words.map(_.capitalize).mkString",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n            i += 1\n        }\n        result",
    "        var result = \"\"\n        var isNextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isNextUpper = true\n            } else {\n                if (isNextUpper) {\n                    result += c.toUpper\n                    isNextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isFirst = true\n        for (c <- word) {\n            if (c == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += c.toUpper\n                    isFirst = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var camel = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                camel += word(i + 1).toUpper\n                i += 1\n            }\n            else camel += word(i)\n            i += 1\n        }\n        camel",
    "        var result = \"\"\n        var first = true\n        for (c <- word) {\n            if (c == '_') first = true\n            else if (first) {\n                result += c.toUpper\n                first = false\n            }\n            else result += c\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString(\"\")",
    "        var result = \"\"\n        var isFirst = true\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isFirst = true\n            } else {\n                if (isFirst) {\n                    result += word(i).toUpper\n                    isFirst = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var flag = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') flag = true\n            else if (flag) {\n                result += word(i).toUpper\n                flag = false\n            }\n            else result += word(i)\n        }\n        result",
    "        var result = \"\"\n        var first = true\n        for (c <- word) {\n            if (c == '_') {\n                first = true\n            } else {\n                if (first) {\n                    result += c.toUpper\n                    first = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        val words = word.split(\"_\")\n        val firstWord = words(0)\n        val restWords = words.drop(1)\n        val camelCase = restWords.map(w => w.capitalize).mkString\n        firstWord + camelCase",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        val words = word.split(\"_\")\n        val camel = words.map(w => w.head.toUpper + w.tail).mkString\n        camel.head.toLower + camel.tail",
    "        val words = word.split(\"_\")\n        words.map(w => w.head.toUpper + w.tail).mkString",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') result += word(i + 1).toUpper\n            else if (word(i) != '_') result += word(i)\n        }\n        result",
    "        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else result += word(i)\n        }\n        result",
    "        var result = \"\"\n        var isNextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isNextUpper = true\n            } else {\n                if (isNextUpper) {\n                    result += c.toUpper\n                    isNextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val result = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) result.append(words(i))\n            else result.append(words(i).capitalize)\n        }\n        result.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') isUpper = true\n            else {\n                if (isUpper) result += c.toUpper\n                else result += c\n                isUpper = false\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            }\n            else result += word(i)\n        }\n        result",
    "        var result = \"\"\n        var isNextUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isNextUpper = true\n            } else {\n                if (isNextUpper) {\n                    result += word(i).toUpper\n                    isNextUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var flag = false\n        for (c <- word) {\n            if (c == '_') flag = true\n            else {\n                if (flag) result += c.toUpper\n                else result += c\n                flag = false\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var lastChar = ' '\n        for (c <- word) {\n            if (c == '_') {\n                lastChar = '_'\n            } else if (lastChar == '_') {\n                result += c.toUpper\n                lastChar = c\n            } else {\n                result += c\n                lastChar = c\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') result += word(i + 1).toUpper\n            else if (word(i) != '_') result += word(i)\n        }\n        result",
    "        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                if (nextUpper) {\n                    result += c.toUpper\n                    nextUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result"
  ]
}