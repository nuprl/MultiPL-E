{
  "name": "mbpp_102_snake_to_camel",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert a snake case string to camel case string.\n    def snakeToCamel(word : String) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(snakeToCamel((\"python_program\")).equals((\"PythonProgram\")));\n    assert(snakeToCamel((\"python_language\")).equals((\"PythonLanguage\")));\n    assert(snakeToCamel((\"programming_language\")).equals((\"ProgrammingLanguage\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        sb.append(words(0))\n        for (i <- 1 until words.length) {\n            sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else {\n                val w = words(i)\n                sb.append(w.substring(0, 1).toUpperCase)\n                sb.append(w.substring(1))\n            }\n        }\n        sb.toString",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var i = 0\n        while (i < word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 2\n            } else {\n                result += word(i)\n                i += 1\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val sb = new StringBuilder\n        for (i <- 0 until words.length) {\n            if (i == 0) sb.append(words(i))\n            else sb.append(words(i).capitalize)\n        }\n        sb.toString",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        var camel = words(0)\n        for (i <- 1 until words.length) {\n            camel += words(i).capitalize\n        }\n        camel",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val result = new StringBuilder\n        result.append(words(0))\n        for (i <- 1 until words.length) {\n            result.append(words(i).capitalize)\n        }\n        result.toString",
    "        var camel = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') camel += word(i + 1).toUpper\n            else if (word(i) != '_') camel += word(i)\n        }\n        camel",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                result += if (isUpper) c.toUpper else c\n                isUpper = false\n            }\n        }\n        result",
    "        var result = \"\"\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                result += word(i + 1).toUpper\n                i += 1\n            } else {\n                result += word(i)\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += c.toUpper\n                    isUpper = false\n                } else {\n                    result += c\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var nextUpper = false\n        for (c <- word) {\n            if (c == '_') {\n                nextUpper = true\n            } else {\n                result += if (nextUpper) c.toUpper else c\n                nextUpper = false\n            }\n        }\n        result",
    "        val words = word.split(\"_\")\n        val camel = words.map(w => w.head.toUpper + w.tail).mkString\n        camel.head.toLower + camel.tail",
    "        var result = \"\"\n        var isUpper = false\n        for (i <- 0 until word.length) {\n            if (word(i) == '_') {\n                isUpper = true\n            } else {\n                if (isUpper) {\n                    result += word(i).toUpper\n                    isUpper = false\n                } else {\n                    result += word(i)\n                }\n            }\n        }\n        result",
    "        var result = \"\"\n        var isUpper = false\n        for (c <- word) {\n            if (c == '_') isUpper = true\n            else {\n                if (isUpper) result += c.toUpper\n                else result += c\n                isUpper = false\n            }\n        }\n        result"
  ]
}