{
  "name": "mbpp_4_heap_queue_largest",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    def heapQueueLargest(nums : List[Long], n : Long) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(heapQueueLargest((List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 22l.toLong, 58l.toLong)), (3l)).equals((List[Long](85l.toLong, 75l.toLong, 65l.toLong))));\n    assert(heapQueueLargest((List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 22l.toLong, 58l.toLong)), (2l)).equals((List[Long](85l.toLong, 75l.toLong))));\n    assert(heapQueueLargest((List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 22l.toLong, 58l.toLong)), (5l)).equals((List[Long](85l.toLong, 75l.toLong, 65l.toLong, 58l.toLong, 35l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val pq = new PriorityQueue[Long]()(Ordering.by(-_))\n        for (num <- nums) {\n            pq.enqueue(num)\n            if (pq.size > n) pq.dequeue\n        }\n        pq.toList",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            if (heap.size < n) heap += num\n            else if (num > heap.head) {\n                heap.dequeue\n                heap += num\n            }\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val pq = new PriorityQueue[Long]()\n        for (num <- nums) {\n            pq.enqueue(num)\n            if (pq.size > n) pq.dequeue\n        }\n        pq.toList.reverse",
    "        val queue = new PriorityQueue[Long]()\n        for (num <- nums) {\n            queue.enqueue(num)\n            if (queue.size > n) queue.dequeue\n        }\n        queue.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val pq = new PriorityQueue[Long]()\n        for (num <- nums) {\n            pq.enqueue(num)\n            if (pq.size > n) pq.dequeue\n        }\n        pq.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val queue = new PriorityQueue[Long]()\n        for (num <- nums) {\n            queue += num\n            if (queue.size > n) queue.dequeue\n        }\n        queue.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap += num\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val queue = new PriorityQueue[Long]()\n        for (num <- nums) {\n            queue.enqueue(num)\n            if (queue.size > n) queue.dequeue\n        }\n        queue.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val queue = new PriorityQueue[Long]()\n        for (num <- nums) {\n            queue.enqueue(num)\n            if (queue.size > n) queue.dequeue\n        }\n        queue.toList.sorted.reverse",
    "        val q = new PriorityQueue[Long]()\n        for (num <- nums) {\n            q.enqueue(num)\n            if (q.size > n) q.dequeue\n        }\n        q.toList.sorted(Ordering[Long].reverse)",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.dequeueAll.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val queue = new PriorityQueue[Long]()\n        for (num <- nums) {\n            queue.enqueue(num)\n            if (queue.size > n) queue.dequeue\n        }\n        queue.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val queue = new PriorityQueue[Long]()\n        for (num <- nums) {\n            queue.enqueue(num)\n            if (queue.size > n) queue.dequeue\n        }\n        queue.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap += num\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val pq = new PriorityQueue[Long]()\n        for (num <- nums) {\n            pq.enqueue(num)\n            if (pq.size > n) pq.dequeue\n        }\n        pq.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            if (heap.size < n) heap.enqueue(num)\n            else if (num > heap.head) {\n                heap.dequeue\n                heap.enqueue(num)\n            }\n        }\n        heap.dequeueAll.toList.reverse",
    "        val queue = new PriorityQueue[Long]()\n        for (num <- nums) {\n            queue.enqueue(num)\n            if (queue.size > n) queue.dequeue\n        }\n        queue.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val pq = new PriorityQueue[Long]()\n        for (num <- nums) {\n            pq.enqueue(num)\n            if (pq.size > n) pq.dequeue\n        }\n        pq.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()(Ordering.Long.reverse)\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val pq = new PriorityQueue[Long]()\n        for (num <- nums) {\n            pq.enqueue(num)\n            if (pq.size > n) pq.dequeue\n        }\n        pq.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val pq = new PriorityQueue[Long]()\n        for (num <- nums) {\n            pq.enqueue(num)\n            if (pq.size > n) pq.dequeue\n        }\n        pq.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap += num\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            if (heap.size < n) heap.enqueue(num)\n            else if (heap.head < num) {\n                heap.dequeue\n                heap.enqueue(num)\n            }\n        }\n        heap.dequeueAll.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new PriorityQueue[Long]()\n        for (num <- nums) {\n            heap += num\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.dequeueAll.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.dequeueAll.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.dequeueAll.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap += num\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val q = new PriorityQueue[Long]()\n        for (num <- nums) {\n            q += num\n            if (q.size > n) q.dequeue\n        }\n        q.toList.sorted.reverse",
    "        val queue = new PriorityQueue[Long]()\n        for (num <- nums) {\n            queue.enqueue(num)\n            if (queue.size > n) queue.dequeue\n        }\n        queue.dequeueAll.toList.reverse",
    "        val queue = new PriorityQueue[Long]()\n        for (num <- nums) {\n            queue.enqueue(num)\n            if (queue.size > n) queue.dequeue\n        }\n        queue.toList.sorted.reverse",
    "        val pq = new PriorityQueue[Long]()\n        for (num <- nums) {\n            pq.enqueue(num)\n            if (pq.size > n) pq.dequeue\n        }\n        pq.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.dequeueAll.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList",
    "        val queue = new PriorityQueue[Long]()\n        for (num <- nums) {\n            queue.enqueue(num)\n            if (queue.size > n) queue.dequeue\n        }\n        queue.toList.sorted.reverse",
    "        val heap = new PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap += num\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.dequeueAll.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val queue = new PriorityQueue[Long]()\n        for (num <- nums) {\n            if (queue.size < n) queue.enqueue(num)\n            else if (num > queue.head) {\n                queue.dequeue\n                queue.enqueue(num)\n            }\n        }\n        queue.toList.sorted.reverse",
    "        val heap = new PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.dequeueAll.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap += num\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val pq = new PriorityQueue[Long]()\n        for (num <- nums) {\n            pq.enqueue(num)\n            if (pq.size > n) pq.dequeue\n        }\n        pq.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()(Ordering[Long].reverse)\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val pq = new PriorityQueue[Long]()\n        for (num <- nums) {\n            pq.enqueue(num)\n            if (pq.size > n) pq.dequeue\n        }\n        pq.dequeueAll.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val pq = new PriorityQueue[Long]()\n        for (num <- nums) {\n            pq.enqueue(num)\n            if (pq.size > n) pq.dequeue\n        }\n        pq.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.dequeueAll.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.dequeueAll.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new scala.collection.mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            if (heap.size < n) heap.enqueue(num)\n            else if (num > heap.head) {\n                heap.dequeue\n                heap.enqueue(num)\n            }\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        var heap = new PriorityQueue[Long]()\n        for (num <- nums) {\n            if (heap.size < n) heap.enqueue(num)\n            else if (num > heap.head) {\n                heap.dequeue\n                heap.enqueue(num)\n            }\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap += num\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val queue = new PriorityQueue[Long]()\n        for (num <- nums) {\n            queue.enqueue(num)\n            if (queue.size > n) queue.dequeue\n        }\n        queue.toList.sorted.reverse",
    "        val heap = new PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val queue = new PriorityQueue[Long]()\n        for (num <- nums) {\n            queue += num\n            if (queue.size > n) queue.dequeue\n        }\n        queue.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()(Ordering.Long.reverse)\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val q = new PriorityQueue[Long]()(Ordering.Long.reverse)\n        for (num <- nums) {\n            q.enqueue(num)\n            if (q.size > n) q.dequeue\n        }\n        q.toList",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        var result = List[Long]()\n        while (heap.nonEmpty) result = heap.dequeue :: result\n        result.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val pq = new PriorityQueue[Long]()\n        for (num <- nums) {\n            pq.enqueue(num)\n            if (pq.size > n) pq.dequeue\n        }\n        pq.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap += num\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.sorted.reverse",
    "        val heap = new mutable.PriorityQueue[Long]()\n        for (num <- nums) {\n            heap.enqueue(num)\n            if (heap.size > n) heap.dequeue\n        }\n        heap.toList.reverse"
  ]
}