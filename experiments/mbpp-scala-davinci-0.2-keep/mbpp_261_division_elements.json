{
  "name": "mbpp_261_division_elements",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    def divisionElements(test_tup1 : Long, test_tup2 : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(divisionElements((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (2l, 2l, 2l, 3l));\n    assert(divisionElements((12l, 6l, 8l, 16l), (6l, 3l, 4l, 4l)) == (2l, 2l, 2l, 4l));\n    assert(divisionElements((20l, 14l, 36l, 18l), (5l, 7l, 6l, 9l)) == (4l, 2l, 6l, 2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return test_tup1 / test_tup2;",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        val test_tup1 = (1, 2, 3, 4, 5)\n        val test_tup2 = (5, 4, 3, 2, 1)\n        val test_tup3 = test_tup1.zip(test_tup2).map(x => x._1 / x._2)\n        return test_tup3",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        return test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2",
    "        test_tup1 / test_tup2"
  ]
}