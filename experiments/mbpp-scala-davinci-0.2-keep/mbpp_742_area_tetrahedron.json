{
  "name": "mbpp_742_area_tetrahedron",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to caluclate the area of a tetrahedron.\n    def areaTetrahedron(side : Long) : Float = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(areaTetrahedron((3l)) == (15.588457268119894f));\n    assert(areaTetrahedron((20l)) == (692.8203230275509f));\n    assert(areaTetrahedron((10l)) == (173.20508075688772f));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val s = side.toFloat\n        sqrt(3) * s * s",
    "        val s = side.toFloat\n        sqrt(3) * s * s",
    "        val s = side.toFloat\n        sqrt(3) * s * s",
    "        sqrt(3).toFloat * side * side",
    "        sqrt(3).toFloat * side * side",
    "        val s = side.toFloat\n        sqrt(3) * s * s",
    "        val a = side.toFloat\n        sqrt(3) * a * a",
    "        sqrt(3).toFloat * side * side",
    "        sqrt(3).toFloat * side * side",
    "        val s = side.toFloat\n        sqrt(3) * pow(s, 2).toFloat",
    "        val area = sqrt(3) * pow(side, 2).toFloat\n        area",
    "        val area = sqrt(3).toFloat * side * side\n        area / 4",
    "        val s = side.toFloat\n        sqrt(3) * s * s",
    "        val s = side.toFloat\n        sqrt(3) * pow(s, 2)",
    "        sqrt(3).toFloat * pow(side, 2).toFloat",
    "        val a = sqrt(3)\n        val b = sqrt(2)\n        val c = (a * side * side) / 4\n        val d = (b * side * side) / 2\n        val e = (c * d) / 3\n        e.toFloat",
    "        val s = side.toFloat\n        sqrt(3) * s * s",
    "        val s = side.toFloat\n        sqrt(3) * s * s",
    "        sqrt(3).toFloat * pow(side, 2).toFloat",
    "        val s = side.toFloat\n        sqrt(3) * s * s"
  ]
}