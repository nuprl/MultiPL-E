{
  "name": "mbpp_607_find_literals",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val n = text.length\n        val m = pattern.length\n        if (m > n) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            while (i <= n - m) {\n                var j = 0\n                while (j < m && text(i + j) == pattern(j)) j += 1\n                if (j == m) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && !found) {\n                if (text(i) == pattern(j)) {\n                    j += 1\n                    if (j == patternLength) {\n                        found = true\n                    }\n                } else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (found) {\n                Right(i - patternLength)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            val patternHash = pattern.hashCode\n            val textHash = text.substring(0, patternLength).hashCode\n            var i = 0\n            while (i <= textLength - patternLength) {\n                if (textHash == patternHash) {\n                    if (text.substring(i, i + patternLength) == pattern) {\n                        return Right(i)\n                    }\n                }\n                if (i < textLength - patternLength) {\n                    textHash -= text.charAt(i).toInt\n                    textHash += text.charAt(i + patternLength).toInt\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            while (i < textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"No match found\")",
    "        val n = text.length\n        val m = pattern.length\n        if (n < m) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            while (i <= n - m) {\n                var j = 0\n                while (j < m && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == m) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i < textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"No match\")",
    "        val n = text.length\n        val m = pattern.length\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == m) {\n                return Right(i)\n            }\n        }\n        Left(\"Not Found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && !found) {\n                if (text(i) == pattern(j)) {\n                    j += 1\n                    if (j == patternLength) {\n                        found = true\n                    }\n                } else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (found) {\n                Right(i - patternLength)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        val textChars = text.toCharArray\n        val patternChars = pattern.toCharArray\n        var i = 0\n        var j = 0\n        while (i < textLength) {\n            if (textChars(i) == patternChars(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    return Right(i - j)\n                }\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        Left(\"Not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var index = 0\n            var found = false\n            while (index <= textLength - patternLength && !found) {\n                var i = 0\n                while (i < patternLength && text(index + i) == pattern(i)) i += 1\n                if (i == patternLength) found = true\n                else index += 1\n            }\n            if (found) Right(index) else Left(\"Pattern not found\")\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"No match found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) j += 1\n                if (j == patternLength) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val n = text.length\n        val m = pattern.length\n        if (m > n) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) j += 1\n            if (j == m) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"No match\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var found = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val start = text.indexOf(pattern)\n        if (start == -1) Left(\"Pattern not found\")\n        else Right(start)",
    "        var startIndex = 0\n        var endIndex = 0\n        var index = 0\n        var found = false\n        while (index < text.length && !found) {\n            if (text(index) == pattern(0)) {\n                startIndex = index\n                endIndex = index + pattern.length - 1\n                found = true\n                for (i <- 0 until pattern.length) {\n                    if (text(index + i) != pattern(i)) {\n                        found = false\n                        break\n                    }\n                }\n            }\n            index += 1\n        }\n        if (found) Right(startIndex) else Left(\"Not found\")",
    "        var i = 0\n        while (i < text.length - pattern.length + 1) {\n            var j = 0\n            while (j < pattern.length && text(i + j) == pattern(j)) j += 1\n            if (j == pattern.length) return Right(i)\n            i += 1\n        }\n        Left(\"Not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var index = 0\n        while (index <= textLength - patternLength) {\n            var i = 0\n            while (i < patternLength && text(index + i) == pattern(i)) {\n                i += 1\n            }\n            if (i == patternLength) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(\"Not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern.\")\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found.\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            val subText = text.substring(i, i + patternLength)\n            if (subText == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        for (i <- 0 to textLength - patternLength) {\n            val subtext = text.substring(i, i + patternLength)\n            if (subtext == pattern) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var found = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        var start = 0\n        var end = 0\n        var found = false\n        var index = 0\n        while(!found && index < text.length) {\n            if(text(index) == pattern(0)) {\n                start = index\n                end = index\n                var i = 1\n                while(i < pattern.length && end < text.length && text(end) == pattern(i)) {\n                    end += 1\n                    i += 1\n                }\n                if(i == pattern.length) found = true\n            }\n            index += 1\n        }\n        if(found) Right(start) else Left(\"Not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var found = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val len = pattern.length\n        val len2 = text.length\n        var i = 0\n        while (i < len2 - len + 1) {\n            var j = 0\n            while (j < len && pattern(j) == text(i + j)) j += 1\n            if (j == len) return Right(i)\n            i += 1\n        }\n        Left(\"Not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i < textLength - patternLength + 1) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var found = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var match = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) match = false\n            }\n            if (match) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i < textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        return Left(\"No match found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern length is greater than text length\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val n = text.length\n        val m = pattern.length\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == m) return Right(i)\n        }\n        Left(\"Not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        val patternHash = hash(pattern)\n        var textHash = hash(text.substring(0, patternLength))\n        var startIndex = 0\n        var endIndex = patternLength - 1\n        while (endIndex < textLength) {\n            if (patternHash == textHash) {\n                var i = 0\n                while (i < patternLength) {\n                    if (pattern(i) != text(startIndex + i)) break\n                    i += 1\n                }\n                if (i == patternLength) return Right(startIndex)\n            }\n            startIndex += 1\n            endIndex += 1\n            if (endIndex < textLength) textHash = hash(text.substring(startIndex, endIndex + 1))\n        }\n        return Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) break\n                matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"Not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"No match\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && !found) {\n                if (text(i) == pattern(j)) {\n                    j += 1\n                    if (j == patternLength) {\n                        found = true\n                    }\n                } else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (found) {\n                Right(i - patternLength)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        var i = 0\n        while (i < text.length - pattern.length) {\n            var j = 0\n            while (j < pattern.length && pattern(j) == text(i + j)) j += 1\n            if (j == pattern.length) return Right(i)\n            i += 1\n        }\n        Left(\"No match\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        var i = 0\n        while (i < text.length) {\n            var j = 0\n            while (j < pattern.length && i + j < text.length && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == pattern.length) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"Not found\")",
    "        if (text.length < pattern.length) return Left(\"Text is shorter than pattern\")\n        var i = 0\n        while (i <= text.length - pattern.length) {\n            var j = 0\n            while (j < pattern.length && text(i + j) == pattern(j)) j += 1\n            if (j == pattern.length) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) j += 1\n                if (j == patternLength) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            val subText = text.substring(i, i + patternLength)\n            if (subText == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var found = true\n            for (j <- 0 until patternLength) {\n                if (text(i + j) != pattern(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val n = text.length\n        val m = pattern.length\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) j += 1\n            if (j == m) return Right(i)\n        }\n        Left(\"Not found\")",
    "        var i = 0\n        var j = 0\n        var start = 0\n        var end = 0\n        while (i < text.length && j < pattern.length) {\n            if (text(i) == pattern(j)) {\n                if (j == 0) start = i\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == pattern.length) {\n            end = i\n            Right(start)\n        } else {\n            Left(\"Not found\")\n        }",
    "        var p = pattern.toCharArray\n        var t = text.toCharArray\n        var i = 0\n        var j = 0\n        while (i < t.length && j < p.length) {\n            if (t(i) == p(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == p.length) {\n            Right(i - j)\n        } else {\n            Left(\"Not found\")\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            val lastIndex = textLength - patternLength\n            for (i <- 0 to lastIndex) {\n                var matchFound = true\n                for (j <- 0 until patternLength) {\n                    if (text(i + j) != pattern(j)) {\n                        matchFound = false\n                        break\n                    }\n                }\n                if (matchFound) {\n                    return Right(i)\n                }\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val len = pattern.length\n        if (len == 0) return Left(\"Pattern is empty\")\n        var i = 0\n        while (i < text.length - len + 1) {\n            var j = 0\n            while (j < len && text(i + j) == pattern(j)) j += 1\n            if (j == len) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val n = text.length\n        val m = pattern.length\n        if (m > n) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            while (i < n && j < m) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == m) Right(i - j)\n            else Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var found = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            while (i < textLength - patternLength + 1) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        return Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i + patternLength <= textLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            val subtext = text.substring(i, i + patternLength)\n            if (subtext == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 until textLength - patternLength + 1) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        var i = 0\n        while (i < text.length - pattern.length + 1) {\n            var j = 0\n            while (j < pattern.length && text(i + j) == pattern(j)) j += 1\n            if (j == pattern.length) return Right(i)\n            i += 1\n        }\n        Left(\"No match\")",
    "        val n = text.length\n        val m = pattern.length\n        if (m > n) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) j += 1\n            if (j == m) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val n = text.length\n        val m = pattern.length\n        if (m > n) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < n && !found) {\n                if (text(i) == pattern(j)) {\n                    if (j == m - 1) found = true\n                    else {\n                        i += 1\n                        j += 1\n                    }\n                }\n                else {\n                    i += 1\n                    j = 0\n                }\n            }\n            if (found) Right(i - m + 1)\n            else Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var found = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        for (i <- 0 to textLength - patternLength) {\n            val sub = text.substring(i, i + patternLength)\n            if (sub == pattern) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern length is greater than text length\")\n        else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }",
    "        val n = text.length\n        val m = pattern.length\n        var i = 0\n        var j = 0\n        while (i < n && j < m) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == m) Right(i - j) else Left(\"Not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var index = 0\n        while (index + patternLength <= textLength) {\n            var i = 0\n            while (i < patternLength && pattern(i) == text(index + i)) {\n                i += 1\n            }\n            if (i == patternLength) {\n                return Right(index)\n            }\n            index += 1\n        }\n        Left(\"No match\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Text is shorter than pattern\")\n        else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) j += 1\n                if (j == patternLength) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var found = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i < textLength) {\n                var j = 0\n                while (j < patternLength && i + j < textLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        return Left(\"No match found\")",
    "        val n = text.length\n        val m = pattern.length\n        if (m > n) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) j += 1\n            if (j == m) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern length is greater than text length\")\n        for (i <- 0 to textLength - patternLength) {\n            var found = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        val lastIndex = textLength - patternLength\n        for (i <- 0 to lastIndex) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        var j = 0\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) return Right(i - j)\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && !found) {\n                if (text(i) == pattern(j)) {\n                    j += 1\n                    if (j == patternLength) {\n                        found = true\n                    }\n                } else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (found) {\n                Right(i - patternLength)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            val substring = text.substring(i, i + patternLength)\n            if (substring == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) {\n                return Right(i)\n            }\n        }\n        Left(\"Not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            while (i < textLength - patternLength + 1) {\n                var j = 0\n                while (j < patternLength && pattern(j) == text(i + j)) j += 1\n                if (j == patternLength) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val len = text.length\n        val patLen = pattern.length\n        var i = 0\n        while (i <= len - patLen) {\n            var j = 0\n            while (j < patLen && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patLen) return Right(i)\n            i += 1\n        }\n        Left(\"No match found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            for (i <- 0 to textLength - patternLength) {\n                if (text.substring(i, i + patternLength) == pattern) {\n                    return Right(i)\n                }\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 until patternLength) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n        }\n        Left(\"No match found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"No match\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        val patternHash = pattern.hashCode\n        var i = 0\n        while (i <= textLength - patternLength) {\n            val substring = text.substring(i, i + patternLength)\n            if (substring.hashCode == patternHash) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) j += 1\n                if (j == patternLength) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        for (i <- 0 to textLength - patternLength) {\n            val subString = text.substring(i, i + patternLength)\n            if (subString == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val n = text.length\n        val m = pattern.length\n        if (m > n) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) j += 1\n            if (j == m) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var found = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Text is too short\")\n        else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val n = text.length\n        val m = pattern.length\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) j += 1\n            if (j == m) return Right(i)\n        }\n        Left(\"Not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) j += 1\n                if (j == patternLength) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Text is shorter than pattern\")\n        else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i < textLength) {\n            var j = 0\n            while (j < patternLength) {\n                if (text(i + j) != pattern(j)) {\n                    break\n                }\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"Not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            val substring = text.substring(i, i + patternLength)\n            if (substring == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern length is greater than text length\")\n        var i = 0\n        var j = 0\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) return Right(i - j)\n        else return Left(\"Pattern not found\")",
    "        if (text.length < pattern.length) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to text.length - pattern.length) {\n            var matchFound = true\n            for (j <- 0 to pattern.length - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val n = text.length\n        val m = pattern.length\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) j += 1\n            if (j == m) return Right(i)\n        }\n        Left(\"Not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i < textLength - patternLength + 1) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && !found) {\n                if (text(i) == pattern(j)) {\n                    j += 1\n                    if (j == patternLength) {\n                        found = true\n                    }\n                } else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (found) {\n                Right(i - patternLength)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val n = text.length\n        val m = pattern.length\n        if (m > n) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) j += 1\n            if (j == m) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i < textLength - patternLength + 1) {\n                if (text.substring(i, i + patternLength) == pattern) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val n = text.length\n        val m = pattern.length\n        if (m > n) return Left(\"Pattern is longer than text\")\n        var i = 0\n        var j = 0\n        while (i < n) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n                if (j == m) return Right(i - m)\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Text is too short\")\n        else {\n            val textChars = text.toCharArray\n            val patternChars = pattern.toCharArray\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (textChars(i) == patternChars(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) Right(i - j)\n            else Left(\"Pattern not found\")\n        }",
    "        val n = text.length\n        val m = pattern.length\n        if (m > n) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) j += 1\n            if (j == m) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text is shorter than pattern\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Text length is less than pattern length\")\n        if (patternLength == 0) return Left(\"Pattern length is zero\")\n        var i = 0\n        var j = 0\n        while (i < textLength && j < patternLength) {\n            if (text(i) == pattern(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == patternLength) return Right(i - j)\n        else return Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern length is greater than text length\")\n        else {\n            var index = 0\n            var found = false\n            while (index <= textLength - patternLength && !found) {\n                var i = 0\n                while (i < patternLength && text(index + i) == pattern(i)) i += 1\n                if (i == patternLength) found = true\n                else index += 1\n            }\n            if (found) Right(index)\n            else Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val n = text.length\n        val m = pattern.length\n        if (m > n) return Left(\"Pattern is longer than text\")\n        val textArray = text.toCharArray\n        val patternArray = pattern.toCharArray\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && textArray(i + j) == patternArray(j)) {\n                j += 1\n            }\n            if (j == m) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var found = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"Not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchCount = 0\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) == pattern(j)) matchCount += 1\n            }\n            if (matchCount == patternLength) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"Not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && !found) {\n                if (text(i) == pattern(j)) {\n                    j += 1\n                    if (j == patternLength) {\n                        found = true\n                    }\n                } else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (found) {\n                Right(i - patternLength)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Text is shorter than pattern\")\n        else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) j += 1\n                if (j == patternLength) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        var i = 0\n        while (i < textLength - patternLength + 1) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }"
  ]
}