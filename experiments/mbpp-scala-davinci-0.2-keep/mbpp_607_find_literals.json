{
  "name": "mbpp_607_find_literals",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    def findLiterals(text : String, pattern : String) : Either[String, Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findLiterals((\"The quick brown fox jumps over the lazy dog.\"), (\"fox\")).equals((\"fox\", 16l, 19l)));\n    assert(findLiterals((\"Its been a very crazy procedure right\"), (\"crazy\")).equals((\"crazy\", 16l, 21l)));\n    assert(findLiterals((\"Hardest choices required strongest will\"), (\"will\")).equals((\"will\", 35l, 39l)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val n = text.length\n        val m = pattern.length\n        if (m > n) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            while (i <= n - m) {\n                var j = 0\n                while (j < m && text(i + j) == pattern(j)) j += 1\n                if (j == m) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && !found) {\n                if (text(i) == pattern(j)) {\n                    j += 1\n                    if (j == patternLength) {\n                        found = true\n                    }\n                } else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (found) {\n                Right(i - patternLength)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            val patternHash = pattern.hashCode\n            val textHash = text.substring(0, patternLength).hashCode\n            var i = 0\n            while (i <= textLength - patternLength) {\n                if (textHash == patternHash) {\n                    if (text.substring(i, i + patternLength) == pattern) {\n                        return Right(i)\n                    }\n                }\n                if (i < textLength - patternLength) {\n                    textHash -= text.charAt(i).toInt\n                    textHash += text.charAt(i + patternLength).toInt\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            while (i < textLength && j < patternLength) {\n                if (text(i) == pattern(j)) {\n                    i += 1\n                    j += 1\n                } else {\n                    i = i - j + 1\n                    j = 0\n                }\n            }\n            if (j == patternLength) {\n                Right(i - j)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            while (i < textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"No match found\")",
    "        val n = text.length\n        val m = pattern.length\n        if (n < m) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            while (i <= n - m) {\n                var j = 0\n                while (j < m && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == m) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i < textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == patternLength) {\n                return Right(i)\n            }\n            i += 1\n        }\n        Left(\"No match\")",
    "        val n = text.length\n        val m = pattern.length\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && text(i + j) == pattern(j)) {\n                j += 1\n            }\n            if (j == m) {\n                return Right(i)\n            }\n        }\n        Left(\"Not Found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Pattern is longer than text\")\n        } else {\n            var i = 0\n            var j = 0\n            var found = false\n            while (i < textLength && !found) {\n                if (text(i) == pattern(j)) {\n                    j += 1\n                    if (j == patternLength) {\n                        found = true\n                    }\n                } else {\n                    j = 0\n                }\n                i += 1\n            }\n            if (found) {\n                Right(i - patternLength)\n            } else {\n                Left(\"Pattern not found\")\n            }\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        val textChars = text.toCharArray\n        val patternChars = pattern.toCharArray\n        var i = 0\n        var j = 0\n        while (i < textLength) {\n            if (textChars(i) == patternChars(j)) {\n                i += 1\n                j += 1\n                if (j == patternLength) {\n                    return Right(i - j)\n                }\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        Left(\"Not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var matchFound = true\n            for (j <- 0 to patternLength - 1) {\n                if (text(i + j) != pattern(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return Right(i)\n        }\n        Left(\"No match found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) Left(\"Pattern is longer than text\")\n        else {\n            var index = 0\n            var found = false\n            while (index <= textLength - patternLength && !found) {\n                var i = 0\n                while (i < patternLength && text(index + i) == pattern(i)) i += 1\n                if (i == patternLength) found = true\n                else index += 1\n            }\n            if (found) Right(index) else Left(\"Pattern not found\")\n        }",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        if (patternLength > textLength) return Left(\"Pattern is longer than text\")\n        for (i <- 0 to textLength - patternLength) {\n            if (text.substring(i, i + patternLength) == pattern) return Right(i)\n        }\n        Left(\"Pattern not found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) {\n            Left(\"Text is shorter than pattern\")\n        } else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) {\n                    j += 1\n                }\n                if (j == patternLength) {\n                    return Right(i)\n                }\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }",
    "        val patternLength = pattern.length\n        val textLength = text.length\n        var i = 0\n        while (i <= textLength - patternLength) {\n            var j = 0\n            while (j < patternLength && text(i + j) == pattern(j)) j += 1\n            if (j == patternLength) return Right(i)\n            i += 1\n        }\n        Left(\"No match found\")",
    "        val textLength = text.length\n        val patternLength = pattern.length\n        if (textLength < patternLength) Left(\"Pattern is longer than text\")\n        else {\n            var i = 0\n            while (i <= textLength - patternLength) {\n                var j = 0\n                while (j < patternLength && text(i + j) == pattern(j)) j += 1\n                if (j == patternLength) return Right(i)\n                i += 1\n            }\n            Left(\"Pattern not found\")\n        }"
  ]
}