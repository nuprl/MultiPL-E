{
  "name": "mbpp_166_find_even_pair",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    def findEvenPair(A : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findEvenPair((List[Long](5l.toLong, 4l.toLong, 7l.toLong, 2l.toLong, 1l.toLong))) == (4l));\n    assert(findEvenPair((List[Long](7l.toLong, 2l.toLong, 8l.toLong, 1l.toLong, 0l.toLong, 5l.toLong, 11l.toLong))) == (9l));\n    assert(findEvenPair((List[Long](1l.toLong, 2l.toLong, 3l.toLong))) == (1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 != 0)\n        val evenPairs = even.map(x => even.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odd.map(x => odd.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        evens.map(even => odds.map(odd => even ^ odd).filter(_ % 2 == 0).size).sum",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.size * (evens.size - 1) / 2\n        val oddPairs = odds.size * (odds.size - 1) / 2\n        evenPairs + oddPairs",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenPair = even.length * (even.length - 1) / 2\n        val oddPair = odd.length * (odd.length - 1) / 2\n        evenPair + oddPair",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.size * (evens.size - 1) / 2\n        val oddPairs = odds.size * (odds.size - 1) / 2\n        evenPairs + oddPairs",
    "        var evenPairs = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) evenPairs += 1\n            }\n        }\n        evenPairs",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        evens.size * odds.size + evens.size * (evens.size - 1) / 2",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until A.length - 1) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 != 0)\n        evens.size * (evens.size - 1) / 2 + odds.size * (odds.size - 1) / 2",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.size * (evens.size - 1) / 2\n        val oddPairs = odds.size * (odds.size - 1) / 2\n        evenPairs + oddPairs",
    "        var evenCount = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) evenCount += 1\n            }\n        }\n        evenCount",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.length.toLong * (evens.length - 1) / 2\n        val oddPairs = odds.length.toLong * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenCount = evens.length\n        val oddCount = odds.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs",
    "        val even = A.filter(x => (x % 2) == 0)\n        val odd = A.filter(x => (x % 2) == 1)\n        val evenPairs = even.size * (even.size - 1) / 2\n        val oddPairs = odd.size * (odd.size - 1) / 2\n        evenPairs + oddPairs",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 != 0)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        return count",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.size * (even.size - 1) / 2 + odd.size * (odd.size - 1) / 2",
    "        val B = A.map(x => x % 2)\n        val even = B.count(x => x == 0)\n        val odd = B.count(x => x == 1)\n        even * even + odd * odd",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(_ == x)).sum / 2\n        val oddPairs = odds.map(x => odds.count(_ == x)).sum / 2\n        evenPairs + oddPairs",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        evens.length * (evens.length - 1) / 2 + odds.length * (odds.length - 1) / 2",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i+1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        evens.map(x => odds.count(_ => true)).sum + evens.count(_ => true) * (evens.count(_ => true) - 1) / 2",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenCount = evens.length\n        val oddCount = odds.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs",
    "        var evenPair = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) evenPair += 1\n            }\n        }\n        evenPair",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        var evens = 0L\n        var odds = 0L\n        for (i <- 0 until A.length) {\n            if (A(i) % 2 == 0) evens += 1\n            else odds += 1\n        }\n        evens * odds",
    "        val evenCount = A.count(_ % 2 == 0)\n        val oddCount = A.length - evenCount\n        evenCount * oddCount + evenCount * (evenCount - 1) / 2",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        (even.length * (even.length - 1) / 2) + (odd.length * (odd.length - 1) / 2)",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.length * odd.length",
    "        var even = 0L\n        var odd = 0L\n        for (i <- A) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenCount = evens.length\n        val oddCount = odds.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2",
    "        var evenPair = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) evenPair += 1\n            }\n        }\n        evenPair",
    "        var even = 0L\n        var odd = 0L\n        for (i <- A) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * (even - 1) / 2 + odd * (odd - 1) / 2",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(_ == x)).sum / 2\n        val oddPairs = odds.map(x => odds.count(_ == x)).sum / 2\n        evenPairs + oddPairs",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        evens.size * (evens.size - 1) / 2 + odds.size * (odds.size - 1) / 2",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        val evenCount = A.filter(x => x % 2 == 0).size\n        val oddCount = A.size - evenCount\n        evenCount * evenCount + oddCount * oddCount",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.size * odd.size",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        even.size * odd.size + even.size * (even.size - 1) / 2",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 != 0)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 != 0)\n        val evenPairs = even.map(x => even.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odd.map(x => odd.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 != 0)\n        even.length * (A.length - even.length) + odd.length * (A.length - odd.length)",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 != 0)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        even.size * (even.size - 1) / 2 + odd.size * (odd.size - 1) / 2",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPairs = even.size * (even.size - 1) / 2\n        val oddPairs = odd.size * (odd.size - 1) / 2\n        evenPairs + oddPairs",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 != 0)\n        even.length * (A.length - even.length) + odd.length * (odd.length - 1) / 2",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 != 0)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        return count",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        return count",
    "        var evenPairs = 0L\n        var oddPairs = 0L\n        for (i <- 0 until A.length) {\n            if (A(i) % 2 == 0) evenPairs += oddPairs\n            else oddPairs += evenPairs\n        }\n        evenPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        var evenPairs = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) evenPairs += 1\n            }\n        }\n        evenPairs",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        var evens = 0L\n        var odds = 0L\n        for (i <- A) {\n            if (i % 2 == 0) evens += 1\n            else odds += 1\n        }\n        evens * evens + odds * odds",
    "        var even = 0L\n        var odd = 0L\n        for (i <- A) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenPairs = even.map(x => even.count(_ == x)).sum / 2\n        val oddPairs = odd.map(x => odd.count(_ == x)).sum / 2\n        evenPairs + oddPairs",
    "        var even = 0L\n        var odd = 0L\n        for (x <- A) {\n            if (x % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * (even - 1) / 2 + odd * (odd - 1) / 2",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPairs = even.map(x => even.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odd.map(x => odd.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        evens.size * (evens.size - 1) / 2 + odds.size * (odds.size - 1) / 2",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 != 0)\n        val evenPairs = evens.map(even => odds.count(_ % 2 == even % 2)).sum\n        val oddPairs = odds.map(odd => evens.count(_ % 2 == odd % 2)).sum\n        evenPairs + oddPairs",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.size * odd.size",
    "        var evenPairs = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) evenPairs += 1\n            }\n        }\n        evenPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPairs = even.map(x => even.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odd.map(x => odd.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 != 0)\n        val evenPairs = evens.map(x => evens.count(_ == x) - 1).sum / 2\n        val oddPairs = odds.map(x => odds.count(_ == x) - 1).sum / 2\n        val evenOddPairs = evens.map(x => odds.count(_ == x)).sum\n        evenPairs + oddPairs + evenOddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        var even = 0L\n        var odd = 0L\n        for (i <- 0 until A.length) {\n            if (A(i) % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        even.length * odd.length + even.length * (even.length - 1) / 2",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 != 0)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.size * odd.size + even.size * (even.size - 1) / 2",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        val evens = A.filter(x => (x & 1) == 0)\n        val odds = A.filter(x => (x & 1) == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val evens = A.filter(x => (x & 1) == 0)\n        val odds = A.filter(x => (x & 1) == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.size * (evens.size - 1) / 2\n        val oddPairs = odds.size * (odds.size - 1) / 2\n        evenPairs + oddPairs",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenCount = evens.length\n        val oddCount = odds.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(_ == x)).sum / 2\n        val oddPairs = odds.map(x => odds.count(_ == x)).sum / 2\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val evens = A.filter(x => (x & 1) == 0)\n        val odds = A.filter(x => (x & 1) == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.size * odd.size + even.size * (even.size - 1) / 2",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        evens.size * (evens.size - 1) / 2 + odds.size * (odds.size - 1) / 2",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        var even = 0L\n        var odd = 0L\n        for (i <- A) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        even.size * (even.size - 1) / 2 + odd.size * (odd.size - 1) / 2",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 != 0)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        val evens = A.filter(x => (x & 1) == 0)\n        val odds = A.filter(x => (x & 1) == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.size * odd.size + even.size * (even.size - 1) / 2",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.size * odd.size",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        evens.length * (evens.length - 1) / 2 + odds.length * (odds.length - 1) / 2",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        even.length * odd.length",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        even.size * odd.size",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        var even = 0L\n        var odd = 0L\n        for (i <- 0 until A.length) {\n            if (A(i) % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPairs = even.map(x => even.filter(y => (x ^ y) % 2 == 0).size).sum\n        val oddPairs = odd.map(x => odd.filter(y => (x ^ y) % 2 == 0).size).sum\n        evenPairs + oddPairs",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenPairs = even.map(x => even.count(_ == x)).sum / 2\n        val oddPairs = odd.map(x => odd.count(_ == x)).sum / 2\n        evenPairs + oddPairs",
    "        val even = A.filter(x => (x % 2 == 0))\n        val odd = A.filter(x => (x % 2 == 1))\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenPairs = even.size * (even.size - 1) / 2\n        val oddPairs = odd.size * (odd.size - 1) / 2\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val even = A.filter(x => (x & 1) == 0)\n        val odd = A.filter(x => (x & 1) == 1)\n        even.length * (even.length - 1) / 2 + odd.length * (odd.length - 1) / 2",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.size * (evens.size - 1) / 2\n        val oddPairs = odds.size * (odds.size - 1) / 2\n        evenPairs + oddPairs",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2 + odds.length * (odds.length - 1) / 2\n        evenPairs",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenPairs = even.size * (even.size - 1) / 2\n        val oddPairs = odd.size * (odd.size - 1) / 2\n        evenPairs + oddPairs",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenPairs = even.length * (even.length - 1) / 2\n        val oddPairs = odd.length * (odd.length - 1) / 2\n        evenPairs + oddPairs",
    "        var even = 0L\n        var odd = 0L\n        for (i <- A) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * (even - 1) / 2 + odd * (odd - 1) / 2",
    "        var even = 0L\n        var odd = 0L\n        for (a <- A) {\n            if (a % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        evens.length * (evens.length - 1) / 2 + odds.length * (odds.length - 1) / 2",
    "        var even = 0L\n        var odd = 0L\n        for (i <- A) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n        }\n        even * odd",
    "        val evens = A.filter(_ % 2 == 0)\n        val odds = A.filter(_ % 2 == 1)\n        val evenPairs = evens.length * (evens.length - 1) / 2\n        val oddPairs = odds.length * (odds.length - 1) / 2\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val evenCount = A.filter(x => x % 2 == 0).size\n        val oddCount = A.size - evenCount\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2",
    "        var result = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) result += 1\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 == 1)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        val even = A.filter(_ % 2 == 0)\n        val odd = A.filter(_ % 2 != 0)\n        val evenCount = even.length\n        val oddCount = odd.length\n        evenCount * (evenCount - 1) / 2 + oddCount * (oddCount - 1) / 2",
    "        var evenCount = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) evenCount += 1\n            }\n        }\n        evenCount",
    "        val evens = A.filter(x => (x % 2) == 0)\n        val odds = A.filter(x => (x % 2) == 1)\n        val evenPairs = evens.map(x => evens.count(y => (x ^ y) % 2 == 0)).sum\n        val oddPairs = odds.map(x => odds.count(y => (x ^ y) % 2 == 0)).sum\n        evenPairs + oddPairs",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) count += 1\n            }\n        }\n        count",
    "        var evenPairs = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) evenPairs += 1\n            }\n        }\n        evenPairs",
    "        val even = A.filter(x => x % 2 == 0)\n        val odd = A.filter(x => x % 2 != 0)\n        even.size * (even.size - 1) / 2 + odd.size * (odd.size - 1) / 2",
    "        val evens = A.filter(x => x % 2 == 0)\n        val odds = A.filter(x => x % 2 == 1)\n        val evenPairs = evens.size * (evens.size - 1) / 2\n        val oddPairs = odds.size * (odds.size - 1) / 2\n        evenPairs + oddPairs",
    "        var evenCount = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) evenCount += 1\n            }\n        }\n        evenCount",
    "        var evenPairs = 0L\n        for (i <- 0 until A.length) {\n            for (j <- i + 1 until A.length) {\n                if ((A(i) ^ A(j)) % 2 == 0) evenPairs += 1\n            }\n        }\n        evenPairs"
  ]
}