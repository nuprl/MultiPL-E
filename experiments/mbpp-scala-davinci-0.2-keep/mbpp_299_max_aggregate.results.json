{
  "name": "mbpp_299_max_aggregate",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(x) => Left(x)\n            case Right(x) => Right(x)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(x) => true\n            case Right(x) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(x) => false\n            case Right(x) => true\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        else {\n            return Right(rights.map(x => x match {\n                case Right(x) => x\n            }).max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl8y35w6h.scala:28:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl8y35w6h.scala:28:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl8y35w6h.scala:28:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No numeric data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            lefts(0)\n        } else {\n            val rights = data.filter(x => x match {\n                case Left(s) => false\n                case Right(l) => true\n            })\n            Right(rights.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).reduceLeft(_ + _))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp451yf1g6.scala:28:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp451yf1g6.scala:28:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp451yf1g6.scala:28:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val l = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val s = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (l.length == 0) {\n            Left(\"No data\")\n        } else if (s.length == 0) {\n            Right(l.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max)\n        } else {\n            Left(\"Mixed data\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbivo2ytj.scala:30:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbivo2ytj.scala:30:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbivo2ytj.scala:30:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2wzliwy_.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2wzliwy_.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2wzliwy_.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, longs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(longs.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\",\"))\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpid444da_.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpid444da_.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpid444da_.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.size > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.size == 0) {\n            return Left(\"No data\")\n        }\n        val sum = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).sum\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        val min = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).min\n        val avg = sum / rights.size\n        val maxAggregate = max + min + avg\n        return Right(maxAggregate)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510652,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgrclyiv4.scala:41:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgrclyiv4.scala:41:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgrclyiv4.scala:41:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, lngs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(lngs.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\",\"))\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyutod154.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyutod154.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyutod154.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, longs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(longs.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl8vibnh.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl8vibnh.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjl8vibnh.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.size == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbw17nscy.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbw17nscy.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbw17nscy.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510652,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncvqgiaf.scala:31:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncvqgiaf.scala:31:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncvqgiaf.scala:31:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x.isLeft)\n        if (lefts.size > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x.isRight)\n        val rights2 = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val max = rights2.max\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0fza_mvz.scala:23:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0fza_mvz.scala:23:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0fza_mvz.scala:23:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = 0L\n        var max_index = 0\n        var max_index_count = 0\n        var max_index_sum = 0L\n        var index = 0\n        var count = 0\n        var sum = 0L\n        for (e <- stdata) {\n            e match {\n                case Left(s) => {\n                    if (count > max_index_count) {\n                        max_index_count = count\n                        max_index_sum = sum\n                        max_index = index\n                    }\n                    count = 0\n                    sum = 0L\n                    index += 1\n                }\n                case Right(l) => {\n                    count += 1\n                    sum += l\n                }\n            }\n        }\n        if (count > max_index_count) {\n            max_index_count = count\n            max_index_sum = sum\n            max_index = index\n        }\n        if (max_index_count == 0) Left(\"No data\")\n        else Right(max_index_sum)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510652,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8qlmp1di.scala:40:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8qlmp1di.scala:40:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8qlmp1di.scala:40:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\") else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptfxcfkkv.scala:10:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptfxcfkkv.scala:10:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptfxcfkkv.scala:10:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.length > 0) Left(strs.map(_.left.get).mkString(\",\"))\n        else Right(nums.map(_.right.get).sum)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppndv5re1.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppndv5re1.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppndv5re1.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = 0L\n        var error = \"\"\n        for (i <- stdata) {\n            i match {\n                case Left(s) => error = s\n                case Right(l) => max = max + l\n            }\n        }\n        if (error != \"\") Left(error) else Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptn0kq5ri.scala:17:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptn0kq5ri.scala:17:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptn0kq5ri.scala:17:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.size == 0) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe8v4nm1u.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe8v4nm1u.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe8v4nm1u.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        if (data.contains(Left(\"error\"))) Left(\"error\")\n        else Right(data.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5dlrp2__.scala:17:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5dlrp2__.scala:17:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5dlrp2__.scala:17:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\",\"))\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp45zzqqa1.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp45zzqqa1.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp45zzqqa1.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(i) => Right(i)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(i) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(i) => true\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(i) => i\n        }).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9moiomy6.scala:27:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9moiomy6.scala:27:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9moiomy6.scala:27:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\") else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpje64eba3.scala:10:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpje64eba3.scala:10:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpje64eba3.scala:10:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg39tt_9x.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg39tt_9x.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg39tt_9x.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\") else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpje64eba3.scala:10:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpje64eba3.scala:10:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpje64eba3.scala:10:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (left, right) = stdata.partition(_.isLeft)\n        if (left.isEmpty) {\n            val max = right.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(left.map(_.left.get).mkString(\"\\n\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5pc016ah.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5pc016ah.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5pc016ah.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\",\"))\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp45zzqqa1.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp45zzqqa1.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp45zzqqa1.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.length > 0) {\n            Left(lefts.map(x => x match {\n                case Left(s) => s\n            }).mkString(\",\"))\n        } else {\n            Right(rights.map(x => x match {\n                case Right(l) => l\n            }).max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123647,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6tz7qxv.scala:29:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6tz7qxv.scala:29:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6tz7qxv.scala:29:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val stdata_map = stdata.map(x => x match {\n            case Left(s) => (s, 0)\n            case Right(l) => (l.toString, l)\n        })\n        val stdata_map_group = stdata_map.groupBy(_._1)\n        val stdata_map_group_max = stdata_map_group.map(x => (x._1, x._2.map(_._2).max))\n        val stdata_map_group_max_list = stdata_map_group_max.toList\n        val stdata_map_group_max_list_sort = stdata_map_group_max_list.sortBy(_._2)\n        val stdata_map_group_max_list_sort_reverse = stdata_map_group_max_list_sort.reverse\n        val stdata_map_group_max_list_sort_reverse_head = stdata_map_group_max_list_sort_reverse.head\n        val stdata_map_group_max_list_sort_reverse_head_key = stdata_map_group_max_list_sort_reverse_head._1\n        val stdata_map_group_max_list_sort_reverse_head_value = stdata_map_group_max_list_sort_reverse_head._2\n        if (stdata_map_group_max_list_sort_reverse_head_key.forall(_.isDigit)) Right(stdata_map_group_max_list_sort_reverse_head_value)\n        else Left(stdata_map_group_max_list_sort_reverse_head_key)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpgmi1zpap.scala:11:86 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mstdata_map_group_max\u001b[0m = stdata_map_group.map(\u001b[36mx\u001b[0m => (x._1, x._2.map(_._2).max))\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                      ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mwhere:    B is a type variable with constraint >: AnyVal\n\u001b[31m   |\u001b[0m..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mB\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[B]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[B].\n\u001b[31m\u001b[31m-- Error: /tmp/tmpgmi1zpap.scala:13:83 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mstdata_map_group_max_list_sort\u001b[0m = stdata_map_group_max_list.sortBy(_._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                   ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[AnyVal]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgmi1zpap.scala:22:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            Right(rights.map(_.right.get).max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123630,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0yy9f3x.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0yy9f3x.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe0yy9f3x.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val sum = data.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        }).filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        }).foldLeft(0L)((a, b) => a + b.right.get)\n        val count = data.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        }).filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        }).foldLeft(0)((a, b) => a + 1)\n        val avg = sum / count\n        val max = data.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        }).filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        }).foldLeft(0L)((a, b) => max(a, b.right.get))\n        if (count == 0) Left(\"No data\") else Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpotkbetfk.scala:40:34 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m40 |\u001b[0m        }).foldLeft(\u001b[31m0L\u001b[0m)((a, b) => max(a, b.right.get))\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpotkbetfk.scala:44:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpotkbetfk.scala:44:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = 0L\n        for (i <- stdata) {\n            i match {\n                case Left(s) => return Left(s)\n                case Right(l) => if (l > max) max = l\n            }\n        }\n        Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfd6zduv.scala:16:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfd6zduv.scala:16:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfd6zduv.scala:16:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\") else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpje64eba3.scala:10:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpje64eba3.scala:10:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpje64eba3.scala:10:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) {\n            Left(\"No data\")\n        } else {\n            Right(data.max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm8ne2q9e.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm8ne2q9e.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm8ne2q9e.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val longs = stdata.filter(_.isRight).map(_.right.get)\n        if (longs.isEmpty) Left(\"No longs\")\n        else Right(longs.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1bxyaqsm.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1bxyaqsm.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1bxyaqsm.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        if (stdata.isEmpty) Left(\"Empty list\")\n        else if (stdata.forall(_.isLeft)) Left(\"All elements are strings\")\n        else if (stdata.forall(_.isRight)) Right(stdata.map(_.right.get).max)\n        else Left(\"List contains both strings and numbers\")\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ys4tjep.scala:12:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ys4tjep.scala:12:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0ys4tjep.scala:12:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1cqy2rbl.scala:31:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1cqy2rbl.scala:31:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1cqy2rbl.scala:31:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get).sorted\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.last)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpufqnk2j9.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpufqnk2j9.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpufqnk2j9.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = 0L\n        var maxStr = \"\"\n        for (e <- stdata) {\n            e match {\n                case Left(str) => {\n                    if (str.length > maxStr.length) {\n                        maxStr = str\n                        max = str.length\n                    }\n                }\n                case Right(num) => {\n                    if (num > max) {\n                        max = num\n                        maxStr = \"\"\n                    }\n                }\n            }\n        }\n        if (maxStr == \"\") Right(max) else Left(maxStr)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpioxukiya.scala:27:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpioxukiya.scala:27:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpioxukiya.scala:27:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2wzliwy_.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2wzliwy_.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2wzliwy_.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No numeric data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val max = stdata.foldLeft(0L)((a, b) => {\n            b match {\n                case Left(s) => a\n                case Right(n) => max(a, n)\n            }\n        })\n        if (max == 0L) Left(\"No data\") else Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_jxryi8t.scala:9:33 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mcase\u001b[0m Right(n) => max(a, n)\n\u001b[31m\u001b[31m  |\u001b[0m                                 ^\u001b[0m\n\u001b[31m  |\u001b[0m                                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_jxryi8t.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_jxryi8t.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (l, r) = stdata.partition(_.isLeft)\n        if (l.isEmpty) Right(r.map(_.right.get).max)\n        else Left(l.map(_.left.get).mkString(\"\\n\"))\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaql67wmj.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaql67wmj.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaql67wmj.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val lst = stdata.filter(_.isRight).map(_.right.get)\n        if (lst.isEmpty) Left(\"No data\")\n        else Right(lst.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxs230eec.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxs230eec.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxs230eec.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(x => x.isRight).map(x => x.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123605,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqfvmjzkr.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqfvmjzkr.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqfvmjzkr.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            Left(lefts.head.left.get)\n        } else {\n            Right(data.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1ulwtcsg.scala:24:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1ulwtcsg.scala:24:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1ulwtcsg.scala:24:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var maxAggregate = 0L\n        var maxAggregateString = \"\"\n        var maxAggregateStringLength = 0\n        var maxAggregateStringLengthCount = 0\n        var maxAggregateStringLengthCountMax = 0\n        var maxAggregateStringLengthCountMaxString = \"\"\n        var maxAggregateStringLengthCountMaxStringLength = 0\n        var maxAggregateStringLengthCountMaxStringLengthCount = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMax = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxString = \"\"\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLength = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCount = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMax = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxString = \"\"\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLength = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCount = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMax = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxString = \"\"\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLength = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCount = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMax = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxString = \"\"\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLength = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCount = 0\n        var maxAggregateStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMaxStringLengthCountMax = 0\n        var maxAggregateStringLengthCountMaxString\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpmpxe_4hs.scala:32:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmpxe_4hs.scala:32:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Either[String, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmpxe_4hs.scala:34:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmpxe_4hs.scala:34:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val lst = stdata.filter(x => x.isRight).map(x => x.right.get)\n        if (lst.isEmpty) Left(\"No data\")\n        else Right(lst.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp68qz3_xu.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp68qz3_xu.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp68qz3_xu.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) Right(num.map(_.right.get).max)\n        else Left(\"Error: String found\")\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekqrm3z0.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekqrm3z0.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekqrm3z0.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.length > 0) Left(\"Error\")\n        else Right(nums.map(_.right.get).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1toob4yl.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1toob4yl.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1toob4yl.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.length > 0) Left(\"error\")\n        else Right(nums.map(_.right.get).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyahukyaa.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyahukyaa.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyahukyaa.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (l, r) = stdata.partition(_.isLeft)\n        if (l.isEmpty) {\n            val max = r.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(l.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnezvgciy.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnezvgciy.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnezvgciy.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\"\\n\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaxw_ycza.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaxw_ycza.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaxw_ycza.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val lst = stdata.filter(_.isRight).map(_.right.get)\n        if (lst.isEmpty) Left(\"No data\")\n        else Right(lst.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxs230eec.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxs230eec.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxs230eec.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x.isLeft)\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x.isRight)\n        val longs = rights.map(x => x match {\n            case Right(l) => l\n        })\n        val max = longs.max\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv8tvp5r_.scala:22:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv8tvp5r_.scala:22:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv8tvp5r_.scala:22:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpky1474cm.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpky1474cm.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpky1474cm.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\" \"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjb383wm2.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjb383wm2.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjb383wm2.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No numeric data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplppzzszy.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"Empty list\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123666,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxrf2d8gl.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxrf2d8gl.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxrf2d8gl.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510652,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncvqgiaf.scala:31:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncvqgiaf.scala:31:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncvqgiaf.scala:31:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val rights2 = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val max = rights2.max\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123624,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgfx4rxx.scala:29:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgfx4rxx.scala:29:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgfx4rxx.scala:29:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.size > 0) {\n            return lefts.head\n        }\n        Right(data.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8m3kergx.scala:23:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8m3kergx.scala:23:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8m3kergx.scala:23:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data : List[Long] = stdata.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val max = data.max\n        if (max == 0) Left(\"No data\") else Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn7ko_vhd.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn7ko_vhd.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn7ko_vhd.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.size == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbw17nscy.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbw17nscy.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbw17nscy.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val max = stdata.foldLeft(0L)((a, b) => {\n            b match {\n                case Left(x) => a\n                case Right(x) => max(a, x)\n            }\n        })\n        Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpakbwown8.scala:9:33 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                \u001b[33mcase\u001b[0m Right(x) => max(a, x)\n\u001b[31m\u001b[31m  |\u001b[0m                                 ^\u001b[0m\n\u001b[31m  |\u001b[0m                                 Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpakbwown8.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpakbwown8.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (str, num) = stdata.partition(_.isLeft)\n        if (str.length > 0) Left(str.head.left.get)\n        else Right(num.map(_.right.get).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123666,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqwjhtprs.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqwjhtprs.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqwjhtprs.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = 0L\n        var max_str = \"\"\n        for (i <- stdata) {\n            i match {\n                case Left(str) => {\n                    max_str = str\n                }\n                case Right(num) => {\n                    max = max + num\n                }\n            }\n        }\n        if (max_str == \"\") {\n            Right(max)\n        } else {\n            Left(max_str)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123665,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6w7y1anh.scala:25:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6w7y1anh.scala:25:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6w7y1anh.scala:25:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = 0L\n        var maxString = \"\"\n        var maxStringCount = 0\n        var maxLongCount = 0\n        for (i <- stdata) {\n            i match {\n                case Left(s) => {\n                    maxStringCount += 1\n                    maxString = s\n                }\n                case Right(l) => {\n                    maxLongCount += 1\n                    max = max + l\n                }\n            }\n        }\n        if (maxStringCount > maxLongCount) Left(maxString) else Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvlf74j2j.scala:25:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvlf74j2j.scala:25:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvlf74j2j.scala:25:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty)\n            Left(\"No data\")\n        else\n            Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1l5ryvu.scala:13:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1l5ryvu.scala:13:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv1l5ryvu.scala:13:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x.isLeft)\n        if (lefts.length > 0) {\n            Left(lefts.map(x => x match {\n                case Left(s) => s\n            }).mkString(\"\\n\"))\n        } else {\n            val rights = data.filter(x => x.isRight)\n            val max = rights.map(x => x match {\n                case Right(l) => l\n            }).max\n            Right(max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6_n4otr.scala:24:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6_n4otr.scala:24:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6_n4otr.scala:24:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (str, num) = stdata.partition(_.isLeft)\n        if (str.length > 0) Left(str.head.left.get)\n        else Right(num.map(_.right.get).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123666,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqwjhtprs.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqwjhtprs.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqwjhtprs.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (l, r) = stdata.partition(_.isLeft)\n        if (l.isEmpty) {\n            val max = r.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(l.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnezvgciy.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnezvgciy.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnezvgciy.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\",\"))\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp45zzqqa1.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp45zzqqa1.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp45zzqqa1.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        if (stdata.isEmpty) Left(\"Empty list\")\n        else {\n            val (lefts, rights) = stdata.partition(_.isLeft)\n            if (lefts.isEmpty) Right(rights.map(_.right.get).max)\n            else Left(lefts.map(_.left.get).mkString(\"\\n\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123666,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyr7ajooh.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyr7ajooh.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyr7ajooh.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val sdata = stdata.filter(_.isRight).map(_.right.get)\n        if (sdata.length == 0) Left(\"No data\")\n        else Right(sdata.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajka4qib.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajka4qib.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpajka4qib.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x.right.getOrElse(0L))\n        val max = data.max\n        val min = data.min\n        val sum = data.sum\n        val avg = sum / data.length\n        val result = max + min + sum + avg\n        Right(result)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjm9az1ox.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjm9az1ox.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjm9az1ox.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) {\n            val max = num.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(\"Error\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpedg7tuny.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpedg7tuny.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpedg7tuny.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) Right(num.map(_.right.get).max)\n        else Left(\"Error: String found\")\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekqrm3z0.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekqrm3z0.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekqrm3z0.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp37ae904l.scala:28:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp37ae904l.scala:28:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp37ae904l.scala:28:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = 0L\n        for (i <- stdata) {\n            if (i.isRight) {\n                val v = i.right.get\n                if (v > max) max = v\n            }\n        }\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp24nznoz3.scala:16:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp24nznoz3.scala:16:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp24nznoz3.scala:16:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.size > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.size == 0) {\n            return Left(\"No data\")\n        }\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_56bcbq0.scala:31:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_56bcbq0.scala:31:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_56bcbq0.scala:31:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        if (rights.length == 0) {\n            return Left(\"Empty list\")\n        }\n        val max = rights.maxBy(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphilbslno.scala:31:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphilbslno.scala:31:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphilbslno.scala:31:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(x => x.isRight).map(x => x.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptwy5007j.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptwy5007j.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptwy5007j.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) {\n            Left(\"No data\")\n        } else {\n            Right(data.max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm8ne2q9e.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm8ne2q9e.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm8ne2q9e.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, longs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(longs.map(_.right.get).max)\n        } else {\n            Left(\"No Longs\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123667,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0nlc6nuo.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0nlc6nuo.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0nlc6nuo.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw_9vezlv.scala:30:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw_9vezlv.scala:30:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw_9vezlv.scala:30:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val sdata = stdata.filter(_.isRight).map(_.right.get)\n        if (sdata.isEmpty) Left(\"No data\")\n        else Right(sdata.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp31noqhc4.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp31noqhc4.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp31noqhc4.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = 0L\n        for (elem <- stdata) {\n            elem match {\n                case Left(s) => return Left(s)\n                case Right(l) => max = max max l\n            }\n        }\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfgh7i1nh.scala:16:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfgh7i1nh.scala:16:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfgh7i1nh.scala:16:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get).sorted\n        if (l.length == 0) Left(\"No data\")\n        else Right(l.last)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7exu_w61.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7exu_w61.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7exu_w61.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510652,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncvqgiaf.scala:31:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncvqgiaf.scala:31:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncvqgiaf.scala:31:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) {\n            Right(num.map(_.right.get).max)\n        } else {\n            Left(str.map(_.left.get).mkString(\" \"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplplnhomi.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplplnhomi.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplplnhomi.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val longList = stdata.filter(_.isRight).map(_.right.get)\n        if (longList.isEmpty) Left(\"No longs\")\n        else Right(longList.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdzr3mpm.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdzr3mpm.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdzr3mpm.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) Right(num.map(_.right.get).max)\n        else Left(\"Error: String found in list\")\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123668,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu9gzjyqw.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu9gzjyqw.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu9gzjyqw.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = 0L\n        var maxString = \"\"\n        for (elem <- stdata) {\n            elem match {\n                case Left(str) => maxString = str\n                case Right(num) => max = max + num\n            }\n        }\n        if (maxString == \"\") {\n            Right(max)\n        } else {\n            Left(maxString)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123684,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprze0hobd.scala:21:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprze0hobd.scala:21:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprze0hobd.scala:21:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.nonEmpty) Left(lefts.map(_.left.get).mkString(\",\"))\n        else Right(rights.map(_.right.get).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123684,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvlv2gr9.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvlv2gr9.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmvlv2gr9.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val stdata_ = stdata.filter(_.isRight)\n        if (stdata_.length == 0) {\n            Left(\"No data\")\n        } else {\n            val stdata__ = stdata_.map(_.right.get)\n            val max = stdata__.max\n            val min = stdata__.min\n            Right(max - min)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123684,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnv59v_6g.scala:17:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnv59v_6g.scala:17:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnv59v_6g.scala:17:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.length > 0) {\n            Left(lefts.head.left.get)\n        } else {\n            Right(rights.map(x => x.right.get).max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq2siyqrx.scala:25:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq2siyqrx.scala:25:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq2siyqrx.scala:25:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val longs = stdata.filter(_.isRight).map(_.right.get)\n        if (longs.isEmpty) Left(\"No longs found\") else Right(longs.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptckr6ver.scala:10:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptckr6ver.scala:10:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptckr6ver.scala:10:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.length > 0) Left(\"Error: List contains strings\")\n        else Right(nums.map(_.right.get).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpispeet3e.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpispeet3e.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpispeet3e.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No numeric data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_lsmmy_3.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_lsmmy_3.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_lsmmy_3.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val max = stdata.filter(_.isRight).map(_.right.get).max\n        val min = stdata.filter(_.isRight).map(_.right.get).min\n        if (max > 0 && min > 0) Right(max - min)\n        else Left(\"No data\")\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4d021n6c.scala:12:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4d021n6c.scala:12:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4d021n6c.scala:12:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length != 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvyu4268j.scala:31:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvyu4268j.scala:31:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvyu4268j.scala:31:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) return lefts(0)\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (rights.length == 0) return Left(\"No Data\")\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_q4x2qul.scala:26:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_q4x2qul.scala:26:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_q4x2qul.scala:26:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.size == 0) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe8v4nm1u.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe8v4nm1u.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe8v4nm1u.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        return Right(rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_a7n_3j9.scala:27:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_a7n_3j9.scala:27:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_a7n_3j9.scala:27:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) {\n            Right(num.map(_.right.get).max)\n        } else {\n            Left(str.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123625,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetn13mxs.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetn13mxs.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpetn13mxs.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val rightsum = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).sum\n        return Right(rightsum)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123686,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6lcywox.scala:28:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6lcywox.scala:28:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6lcywox.scala:28:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).sum)\n        else Left(strs.map(_.left.get).mkString(\",\"))\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgudsk2fu.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgudsk2fu.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgudsk2fu.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = 0L\n        for (i <- stdata) {\n            i match {\n                case Left(s) => return Left(s)\n                case Right(l) => if (l > max) max = l\n            }\n        }\n        Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfd6zduv.scala:16:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfd6zduv.scala:16:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxfd6zduv.scala:16:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => (s, 0)\n            case Right(l) => (l.toString, l)\n        })\n        val max = data.map(x => x._2).max\n        val maxdata = data.filter(x => x._2 == max)\n        if (maxdata.length == 1) Right(maxdata(0)._2)\n        else Left(maxdata.map(x => x._1).mkString(\",\"))\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmps1sgwtba.scala:10:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = data.map(\u001b[36mx\u001b[0m => x._2).max\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mwhere:    B is a type variable with constraint >: AnyVal\n\u001b[31m   |\u001b[0m..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mB\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[java.util.Comparator[B]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type java.util.Comparator[B].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1sgwtba.scala:12:50 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (maxdata.length == \u001b[31m1\u001b[0m) Right(maxdata(\u001b[31m0\u001b[0m)._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    \u001b[1m\u001b[31mInt\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m|\u001b[0m\u001b[1m\u001b[31m \u001b[0mLong\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1sgwtba.scala:16:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explan",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val rights2 = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        })\n        val sum = rights2.foldLeft(0L)((x, y) => x + y)\n        return Right(sum)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp79o6l_zg.scala:29:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp79o6l_zg.scala:29:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp79o6l_zg.scala:29:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x.isLeft)\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        val rights = data.filter(x => x.isRight)\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        return Right(rights.map(x => x.right.get).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123688,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgywpdauw.scala:21:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgywpdauw.scala:21:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgywpdauw.scala:21:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val l = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (l.isEmpty) {\n            Left(\"No data\")\n        } else {\n            Right(l.map(x => x match {\n                case Left(s) => 0\n                case Right(l) => l\n            }).max)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2htgmqeu.scala:24:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2htgmqeu.scala:24:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2htgmqeu.scala:24:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (lefts, rights) = stdata.partition(_.isLeft)\n        if (lefts.isEmpty) {\n            val max = rights.map(_.right.get).max\n            Right(max)\n        } else {\n            Left(lefts.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2wzliwy_.scala:15:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2wzliwy_.scala:15:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2wzliwy_.scala:15:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).max)\n        else Left(strs.map(_.left.get).mkString(\", \"))\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123626,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sp5xu5w.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sp5xu5w.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4sp5xu5w.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.length == 0) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123569,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwk1_aewi.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Right(y) => y\n            case Left(y) => 0\n        })\n        val max = data.max\n        val min = data.min\n        val sum = data.sum\n        val avg = sum / data.length\n        val agg = max + min + sum + avg\n        if (agg > Int.MaxValue) Left(\"Aggregate is too large\")\n        else Right(agg)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzffnlhy4.scala:19:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzffnlhy4.scala:19:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzffnlhy4.scala:19:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        if (lefts.length > 0) {\n            return lefts(0)\n        }\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123587,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp37ae904l.scala:28:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp37ae904l.scala:28:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp37ae904l.scala:28:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strings, longs) = stdata.partition(_.isLeft)\n        if (strings.isEmpty) {\n            Right(longs.map(_.right.get).sum)\n        } else {\n            Left(strings.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphao0ula4.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphao0ula4.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphao0ula4.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x.right.getOrElse(0L))\n        val max = data.max\n        val min = data.min\n        val sum = data.sum\n        val count = data.length\n        val avg = sum / count\n        val diff = max - min\n        val maxAgg = List(max, min, sum, count, avg, diff).max\n        Right(maxAgg)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp3sfr5u_y.scala:13:62 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmaxAgg\u001b[0m = List(max, min, sum, count, avg, diff).max\n\u001b[31m\u001b[31m   |\u001b[0m                                                              ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for B\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mwhere:    B is a type variable with constraint >: AnyVal\n\u001b[31m   |\u001b[0m..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mB\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[B]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[B].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3sfr5u_y.scala:17:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3sfr5u_y.scala:17:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (str, num) = stdata.partition(_.isLeft)\n        if (str.length > 0) Left(str.map(_.left.get).mkString(\",\"))\n        else Right(num.map(_.right.get).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgsytwn2o.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgsytwn2o.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgsytwn2o.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        var max = 0L\n        var max_string = \"\"\n        for (i <- stdata) {\n            i match {\n                case Left(s) => {\n                    if (s.length > max_string.length) max_string = s\n                }\n                case Right(n) => {\n                    if (n > max) max = n\n                }\n            }\n        }\n        if (max_string.length > 0) Left(max_string) else Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfbt_psc_.scala:21:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfbt_psc_.scala:21:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfbt_psc_.scala:21:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val sum = stdata.foldLeft(0L)((acc, x) => x match {\n            case Left(s) => acc\n            case Right(l) => acc + l\n        })\n        val count = stdata.foldLeft(0L)((acc, x) => x match {\n            case Left(s) => acc\n            case Right(l) => acc + 1\n        })\n        if (count == 0) Left(\"No data\")\n        else Right(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123687,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5qfdg1tm.scala:18:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5qfdg1tm.scala:18:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5qfdg1tm.scala:18:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val sum = data.foldLeft(0L)((x, y) => y match {\n            case Left(s) => x\n            case Right(l) => x + l\n        })\n        val count = data.foldLeft(0L)((x, y) => y match {\n            case Left(s) => x\n            case Right(l) => x + 1\n        })\n        if (count == 0) Left(\"No data\")\n        else Right(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0pzdc_r3.scala:22:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0pzdc_r3.scala:22:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0pzdc_r3.scala:22:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val max = data.foldLeft(Long.MinValue)((x, y) => y match {\n            case Left(s) => x\n            case Right(l) => max(x, l)\n        })\n        if (max == Long.MinValue) Left(\"No data\")\n        else Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp59k2cysb.scala:12:29 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mcase\u001b[0m Right(l) => max(x, l)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp59k2cysb.scala:18:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp59k2cysb.scala:18:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (str, num) = stdata.partition(_.isLeft)\n        if (str.size > 0) Left(str.map(_.left.get).mkString(\",\"))\n        else Right(num.map(_.right.get).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmy1l2rok.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmy1l2rok.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmy1l2rok.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(x) => Left(x)\n            case Right(x) => Right(x)\n        })\n        val sum = data.filter(_.isRight).map(_.right.get).sum\n        val count = data.filter(_.isRight).length\n        if (count == 0) Left(\"No data\")\n        else Right(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123694,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphaspfx4l.scala:16:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphaspfx4l.scala:16:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphaspfx4l.scala:16:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\")\n        else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510639,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9gg763od.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).sum)\n        } else {\n            Left(strs.map(_.left.get).mkString(\" \"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp71ir8sh4.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp71ir8sh4.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp71ir8sh4.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg39tt_9x.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg39tt_9x.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg39tt_9x.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (str, num) = stdata.partition(_.isLeft)\n        if (str.isEmpty) Right(num.map(_.right.get).max)\n        else Left(\"Error: String found\")\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123607,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekqrm3z0.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekqrm3z0.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekqrm3z0.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val stdata_right = stdata.filter(_.isRight)\n        if (stdata_right.isEmpty) Left(\"No data\")\n        else Right(stdata_right.map(_.right.get).max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsd9222hh.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsd9222hh.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsd9222hh.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val lefts = data.filter(x => x match {\n            case Left(s) => true\n            case Right(l) => false\n        })\n        val rights = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        })\n        if (lefts.length > 0) {\n            return lefts.head\n        }\n        if (rights.length == 0) {\n            return Left(\"No data\")\n        }\n        val max = rights.map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        return Right(max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ujgebrw.scala:31:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ujgebrw.scala:31:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ujgebrw.scala:31:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => Left(s)\n            case Right(l) => Right(l)\n        })\n        val max = data.filter(x => x match {\n            case Left(s) => false\n            case Right(l) => true\n        }).map(x => x match {\n            case Left(s) => 0\n            case Right(l) => l\n        }).max\n        val maxIndex = data.indexOf(Right(max))\n        data(maxIndex)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123588,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8h7x81v.scala:21:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8h7x81v.scala:21:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8h7x81v.scala:21:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) {\n            Right(nums.map(_.right.get).max)\n        } else {\n            Left(strs.map(_.left.get).mkString(\",\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg39tt_9x.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg39tt_9x.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg39tt_9x.scala:14:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.map(x => x match {\n            case Left(s) => (s, 0)\n            case Right(l) => (l.toString, l)\n        })\n        val max = data.maxBy(_._2)\n        if (max._2 == 0) Left(max._1) else Right(max._2)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp15kt629o.scala:10:34 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = data.maxBy(_._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for AnyVal..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAnyVal\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[AnyVal]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[AnyVal].\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15kt629o.scala:14:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15kt629o.scala:14:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, nums) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(nums.map(_.right.get).sum)\n        else Left(strs.map(_.left.get).mkString(\",\"))\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123685,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgudsk2fu.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgudsk2fu.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgudsk2fu.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val l = stdata.filter(_.isRight).map(_.right.get)\n        if (l.isEmpty) Left(\"No data\") else Right(l.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123648,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpje64eba3.scala:10:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpje64eba3.scala:10:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpje64eba3.scala:10:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val (strs, longs) = stdata.partition(_.isLeft)\n        if (strs.isEmpty) Right(longs.map(_.right.get).max)\n        else Left(\"No Longs\")\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp28x32v0g.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp28x32v0g.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp28x32v0g.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the maximum aggregate from the list of tuples.\n    def maxAggregate(stdata : List[Either[String, Long]]) : Either[String, Long] = {\n        val data = stdata.filter(_.isRight).map(_.right.get)\n        if (data.isEmpty) Left(\"No data\")\n        else Right(data.max)\n    }\n    def main(args: Array[String]) = {\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 90l), (\"Sabah Colley\", 88l), (\"Peter Nichols\", 7l), (\"Juan Whelan\", 122l), (\"Sabah Colley\", 84l)))).equals((\"Juan Whelan\", 212l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 50l), (\"Sabah Colley\", 48l), (\"Peter Nichols\", 37l), (\"Juan Whelan\", 22l), (\"Sabah Colley\", 14l)))).equals((\"Juan Whelan\", 72l)));\n    assert(maxAggregate((List[Either[String, Long]]((\"Juan Whelan\", 10l), (\"Sabah Colley\", 20l), (\"Peter Nichols\", 30l), (\"Juan Whelan\", 40l), (\"Sabah Colley\", 50l)))).equals((\"Sabah Colley\", 70l)));\n    }\n\n}\n",
      "timestamp": 1665510640,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:74 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31m7l\u001b[0m), (\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m122l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m84l\u001b[0m)))).equals((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m212l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                          ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    \u001b[1m\u001b[31m(\u001b[0mString, Long\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m                                          Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0mString, Long\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe528itor.scala:11:97 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(maxAggregate((List[\u001b[35mEither\u001b[0m[\u001b[35mString\u001b[0m, \u001b[35mLong\u001b[0m]]((\u001b[31m\"Juan Whelan\"\u001b[0m, \u001b[31m90l\u001b[0m), (\u001b[31m\"Sabah Colley\"\u001b[0m, \u001b[31m88l\u001b[0m), (\u001b[31m\"Peter Nichols\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}