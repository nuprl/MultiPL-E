{
  "name": "mbpp_126_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to min(a, b)) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var result = 0L\n        for (i <- 1L to min(a, b)) {\n            if (a % i == 0 && b % i == 0) result += i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) {\n                sum += i\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        val l = lcm(a, b)\n        val s = sqrt(l).toLong\n        var sum = 0L\n        for (i <- 1 to s) {\n            if (l % i == 0) {\n                sum += i\n                if (i != l / i) sum += l / i\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpd4wi2tzp.scala:6:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ml\u001b[0m = lcm(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: lcm\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd4wi2tzp.scala:9:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to s) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (s : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        val min = min(a, b)\n        val max = max(a, b)\n        var sum = 0L\n        for (i <- 1 to min.toInt) {\n            if (min % i == 0 && max % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_ubn9766.scala:6:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_ubn9766.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        val min = min(a, b)\n        for (i <- 1 to min.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvjh16z9a.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        val min = min(a, b)\n        for (i <- 1 to min.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvjh16z9a.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to min(a, b)) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        val divisors = ArrayBuffer[Long]()\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) divisors += i\n        }\n        divisors.sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        val min = min(a, b)\n        for (i <- 1 to min.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvjh16z9a.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        val min = min(a, b)\n        for (i <- 1 to min.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvjh16z9a.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) {\n                sum += i\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        var min = min(a, b)\n        for (i <- 1 to min.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124257,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpja6tyk49.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvariable\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        def gcd(a : Long, b : Long) : Long = {\n            if (b == 0) a\n            else gcd(b, a % b)\n        }\n        def sumDivisors(n : Long) : Long = {\n            var sum = 0L\n            for (i <- 1L to sqrt(n).toLong) {\n                if (n % i == 0) {\n                    sum += i\n                    if (i != n / i) sum += n / i\n                }\n            }\n            sum\n        }\n        sumDivisors(gcd(a, b))\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        def gcd(a : Long, b : Long) : Long = if (b == 0) a else gcd(b, a % b)\n        def sumDivisors(n : Long) : Long = {\n            var sum = 0L\n            for (i <- 1L to sqrt(n).toLong) {\n                if (n % i == 0) {\n                    sum += i\n                    if (i != n / i) sum += n / i\n                }\n            }\n            sum\n        }\n        val g = gcd(a, b)\n        sumDivisors(g)\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        val gcd = BigInt(a).gcd(b).toLong\n        var sum = 0L\n        for (i <- 1 to gcd) {\n            if (gcd % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyz7yrfmu.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to gcd) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (gcd : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        val min = min(a, b)\n        val max = max(a, b)\n        val divisors = ArrayBuffer[Long]()\n        for (i <- 1 to min.toInt) {\n            if (min % i == 0 && max % i == 0) divisors += i\n        }\n        divisors.sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_lwh8f24.scala:6:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_lwh8f24.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        val min = min(a, b)\n        for (i <- 1 to min.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp952slv0g.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        val max = min(a, b)\n        for (i <- 1 to max.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to min(a, b)) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        val min = min(a, b)\n        for (i <- 1 to min.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvjh16z9a.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to min(a, b)) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        val min = min(a, b)\n        val max = max(a, b)\n        var sum = 0L\n        for (i <- 1 to min.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpv8k229eu.scala:6:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpv8k229eu.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        val min = min(a, b)\n        for (i <- 1 to min.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvjh16z9a.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to min(a, b)) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        def gcd(a : Long, b : Long) : Long = {\n            if (b == 0) a else gcd(b, a % b)\n        }\n        def divisors(n : Long) : List[Long] = {\n            val sqrt = sqrt(n).toLong\n            val l = (1 to sqrt).filter(n % _ == 0).toList\n            val l2 = l.map(n / _)\n            l ::: l2\n        }\n        val g = gcd(a, b)\n        val d = divisors(g)\n        d.sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp815b52jy.scala:10:23 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp815b52jy.scala:13:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            l ::: l2\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (l : List[Int])\n\u001b[31m   |\u001b[0m            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        val min = min(a, b)\n        for (i <- 1 to min.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp952slv0g.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var result = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) result += i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        val min = min(a, b)\n        for (i <- 1 to min.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp952slv0g.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to min(a, b)) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        val g = gcd(a, b)\n        val aa = a / g\n        val bb = b / g\n        var sum = 0L\n        for (i <- 1 to sqrt(aa).toInt) {\n            if (aa % i == 0) {\n                if (bb % i == 0) {\n                    sum += i\n                    if (i != aa / i) sum += aa / i\n                }\n            }\n        }\n        for (i <- 1 to sqrt(bb).toInt) {\n            if (bb % i == 0) {\n                if (aa % i == 0) {\n                    sum += i\n                    if (i != bb / i) sum += bb / i\n                }\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk8x2st6b.scala:6:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mg\u001b[0m = gcd(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: gcd\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var result = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) result += i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        def gcd(a : Long, b : Long) : Long = {\n            if (b == 0) a else gcd(b, a % b)\n        }\n        def sumDivisors(n : Long) : Long = {\n            var sum = 0L\n            for (i <- 1L to sqrt(n).toLong) {\n                if (n % i == 0) {\n                    sum += i\n                    if (i != n / i) sum += n / i\n                }\n            }\n            sum\n        }\n        val g = gcd(a, b)\n        sumDivisors(g)\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        val min = min(a, b)\n        for (i <- 1 to min.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp952slv0g.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var s = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) s += i\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var s = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) s += i\n        }\n        return s\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to min(a, b)) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        var n = min(a, b)\n        while (n > 0) {\n            if (a % n == 0 && b % n == 0) sum += n\n            n -= 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        val min = min(a, b)\n        val max = max(a, b)\n        var sum = 0L\n        for (i <- 1 to min.toInt) {\n            if (min % i == 0 && max % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwzupnnen.scala:6:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwzupnnen.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b)) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6b5o11jf.scala:7:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to min(a, b)) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (a : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6b5o11jf.scala:7:30 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to min(a, b)) {\n\u001b[31m\u001b[31m  |\u001b[0m                              ^\u001b[0m\n\u001b[31m  |\u001b[0m                              Found:    (b : Long)\n\u001b[31m  |\u001b[0m                              Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to min(a, b)) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        val min = min(a, b)\n        val max = max(a, b)\n        var sum = 0L\n        for (i <- 1 to min.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpv8k229eu.scala:6:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpv8k229eu.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to min(a, b)) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        val min = min(a, b)\n        val max = max(a, b)\n        var sum = 0L\n        for (i <- 1 to min.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpv8k229eu.scala:6:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpv8k229eu.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        val min = min(a, b)\n        for (i <- 1 to min.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvjh16z9a.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var result = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) result += i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to min(a, b)) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124260,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        val min = min(a, b)\n        for (i <- 1 to min.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvjh16z9a.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) {\n                sum += i\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        val min = min(a, b)\n        for (i <- 1 to min.toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvjh16z9a.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        val g = gcd(a, b)\n        val d = divisors(g)\n        d.sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124257,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvjfcucq6.scala:6:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mg\u001b[0m = gcd(a, b)\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: gcd\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvjfcucq6.scala:7:16 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36md\u001b[0m = divisors(g)\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                Not found: divisors\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of common divisors of two given numbers.\n    def sum(a : Long, b : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to min(a, b).toInt) {\n            if (a % i == 0 && b % i == 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sum((10l), (15l)) == (6l));\n    assert(sum((100l), (150l)) == (93l));\n    assert(sum((4l), (6l)) == (3l));\n    }\n\n}\n",
      "timestamp": 1665509756,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}