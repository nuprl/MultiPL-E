{
  "name": "mbpp_468_max_product",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    def maxProduct(arr : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](3l.toLong, 100l.toLong, 4l.toLong, 5l.toLong, 150l.toLong, 6l.toLong))) == (3000l));\n    assert(maxProduct((List[Long](4l.toLong, 42l.toLong, 55l.toLong, 68l.toLong, 80l.toLong))) == (50265600l));\n    assert(maxProduct((List[Long](10l.toLong, 22l.toLong, 9l.toLong, 33l.toLong, 21l.toLong, 50l.toLong, 41l.toLong, 60l.toLong))) == (2460l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        val dp2 = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        for (i <- n - 1 to 0 by -1) {\n            for (j <- n - 1 to i by -1) {\n                if (arr(i) > arr(j)) {\n                    dp2(i) = max(dp2(i), dp2(j) * arr(i))\n                }\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result = max(result, dp(i) * dp2(i))\n        }\n        result",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            dp(i) = max(dp(i - 1) * arr(i), arr(i))\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        var max = dp(0)\n        for (i <- 1 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i) = arr(i)\n        }\n        for (i <- 0 until n; j <- i + 1 until n) {\n            dp(i)(j) = dp(i)(j - 1) * arr(j)\n        }\n        var max = Long.MinValue\n        for (i <- 0 until n; j <- i until n) {\n            max = max(max, dp(i)(j))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        var max = 0L\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        var max = 0L\n        var dp = Array.fill(arr.length)(0L)\n        for (i <- 0 until arr.length) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        return max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            dp(i) = max(dp(i - 1) * arr(i), arr(i))\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = arr(i)\n        for (i <- 0 until n; j <- 0 until i) {\n            dp(i)(j) = dp(i)(i) / dp(j)(j)\n        }\n        for (i <- 0 until n; j <- 0 until i; k <- 0 until j) {\n            dp(i)(j) = max(dp(i)(j), dp(i)(k) / dp(j)(k))\n        }\n        dp.map(_.max).max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until arr.length) {\n            dp(i) = max(dp(i - 1) * arr(i), arr(i))\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until arr.length) {\n            dp(i) = max(arr(i), dp(i - 1) * arr(i))\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        var max = dp(0)\n        for (i <- 1 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            var max = 1L\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    max = max max (dp(j) * arr(i))\n                }\n            }\n            dp(i) = max\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        var max = 0L\n        var dp = Array.fill(arr.length)(1L)\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        var max = 0L\n        var i = 0\n        while (i < arr.length) {\n            var j = i + 1\n            while (j < arr.length) {\n                if (arr(j) > arr(i)) {\n                    var product = arr(i) * arr(j)\n                    if (product > max) max = product\n                }\n                j += 1\n            }\n            i += 1\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        var max = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            max = max max arr(i)\n            maxProduct = maxProduct max (max * arr(i))\n        }\n        maxProduct",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        var max = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            max = max max arr(i)\n            maxProduct = maxProduct max (max * arr(i))\n        }\n        maxProduct",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            var max = 1L\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    max = max max dp(j)\n                }\n            }\n            dp(i) = max * arr(i)\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 to arr.length - 1) {\n            for (j <- 0 to i - 1) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        var max = dp(0)\n        for (i <- 1 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        var max = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n                maxProduct = max\n            } else {\n                maxProduct = maxProduct * arr(i)\n            }\n        }\n        maxProduct",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            dp(i) = max(dp(i - 1) * arr(i), arr(i))\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until arr.length) {\n            dp(i) = max(dp(i - 1) * arr(i), arr(i))\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until arr.length) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        var max = 0L\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i) = arr(i)\n            for (j <- i + 1 until n) {\n                dp(i)(j) = dp(i)(j - 1) * arr(j)\n            }\n        }\n        var max = Long.MinValue\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                max = max.max(dp(i)(j))\n            }\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        var max = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n                maxProduct = max\n            } else {\n                maxProduct = maxProduct * arr(i)\n            }\n        }\n        maxProduct",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        var max = dp(0)\n        for (i <- 1 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.size\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        var max = 1\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = arr(i)\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                dp(i)(j) = dp(i)(j - 1) * arr(j)\n            }\n        }\n        dp.map(x => x.max).max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        val dp2 = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                    dp2(i) = max(dp2(i), dp2(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until arr.length) {\n            dp(i) = max(dp(i - 1) * arr(i), arr(i))\n        }\n        dp.max",
    "        val dp = new Array[Long](arr.length)\n        dp(0) = arr(0)\n        for (i <- 1 until arr.length) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until arr.length) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    max = max max (dp(j) * arr(i))\n                }\n            }\n            dp(i) = max max arr(i)\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        var max = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            max = max max arr(i)\n            maxProduct = maxProduct max (max * arr(i))\n        }\n        maxProduct",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        var max = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n                maxProduct = max\n            } else {\n                maxProduct *= arr(i)\n            }\n        }\n        maxProduct",
    "        val n = arr.length\n        var dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val max = Array.fill(arr.length)(0L)\n        val min = Array.fill(arr.length)(0L)\n        max(0) = arr(0)\n        min(0) = arr(0)\n        for (i <- 1 until arr.length) {\n            max(i) = max(i - 1) * arr(i)\n            min(i) = min(i - 1) * arr(i)\n            if (arr(i) > 0) {\n                max(i) = max(i) max arr(i)\n                min(i) = min(i) min arr(i)\n            } else {\n                max(i) = min(i - 1) max arr(i)\n                min(i) = max(i - 1) min arr(i)\n            }\n        }\n        max.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        var max = 0L\n        var min = 0L\n        var result = 1L\n        for (i <- arr) {\n            if (i > 0) {\n                max = max * i\n                min = min * i\n            } else if (i == 0) {\n                max = 0\n                min = 0\n            } else {\n                val temp = max\n                max = min * i\n                min = temp * i\n            }\n            if (max == 0) max = i\n            if (min == 0) min = i\n            result = max(result, max)\n        }\n        result",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val max = arr.max\n        val maxIndex = arr.indexOf(max)\n        val left = arr.slice(0, maxIndex)\n        val right = arr.slice(maxIndex + 1, arr.length)\n        val leftProduct = if (left.length == 0) 1 else left.product\n        val rightProduct = if (right.length == 0) 1 else right.product\n        max * max(leftProduct, rightProduct)",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until arr.length) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            if (arr(i) < 0) {\n                val temp = max\n                max = min\n                min = temp\n            }\n            max = max(arr(i), max * arr(i))\n            min = min(arr(i), min * arr(i))\n            result = max(result, max)\n        }\n        result",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && dp(i) < dp(j) * arr(i)) {\n                    dp(i) = dp(j) * arr(i)\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        val dp2 = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                    dp2(i) = max(dp2(i), dp2(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && dp(i) < dp(j) * arr(i)) {\n                    dp(i) = dp(j) * arr(i)\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            var max = 1L\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    max = max max dp(j)\n                }\n            }\n            dp(i) = max * arr(i)\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            dp(i) = max(arr(i), dp(i - 1) * arr(i))\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(0L)\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 to n - 1) {\n            for (j <- 0 to i - 1) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        var maxProduct = 0L\n        var maxProductEndingHere = 1L\n        for (i <- 0 until arr.length) {\n            maxProductEndingHere *= arr(i)\n            maxProduct = max(maxProduct, maxProductEndingHere)\n            if (maxProductEndingHere == 0) maxProductEndingHere = 1\n        }\n        maxProduct",
    "        val dp = Array.fill(arr.length)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until arr.length) {\n            dp(i) = max(dp(i - 1) * arr(i), arr(i))\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    max = max max dp(j)\n                }\n            }\n            dp(i) = max * arr(i)\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        var max = 1L\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            dp(i) = max(dp(i - 1) * arr(i), arr(i))\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && dp(i) < dp(j) * arr(i)) {\n                    dp(i) = dp(j) * arr(i)\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        var max = 0L\n        var product = 1L\n        for (i <- 0 until arr.length) {\n            product *= arr(i)\n            max = max max product\n            if (product == 0) product = 1\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        var max = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            max = max max arr(i)\n            maxProduct = maxProduct max (max * arr(i))\n        }\n        maxProduct",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max"
  ]
}