{
  "name": "mbpp_599_sum_average",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find sum and average of first n natural numbers.\n    def sumAverage(number : Long) : Either[Long, Float] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumAverage((10l)).equals((55l, 5.5f)));\n    assert(sumAverage((15l)).equals((120l, 8.0f)));\n    assert(sumAverage((20l)).equals((210l, 10.5f)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (number < 0) {\n            Left(number)\n        } else {\n            val sum = (1L to number).sum\n            val average = sum.toFloat / number\n            Right(average)\n        }",
    "        if (number < 0) {\n            Left(number)\n        } else {\n            val sum = (1L to number).sum\n            val average = sum.toFloat / number\n            Right(average)\n        }",
    "        if (number < 0) {\n            Left(number)\n        } else {\n            val sum = (number * (number + 1)) / 2\n            val average = sum.toFloat / number\n            Right(average)\n        }",
    "        if (number < 0) {\n            Left(number)\n        } else {\n            Right((number * (number + 1)) / 2, number / 2.0f)\n        }",
    "        if (number < 0) {\n            Left(number)\n        } else {\n            val sum = (number * (number + 1)) / 2\n            val average = sum.toFloat / number\n            Right(average)\n        }",
    "        val sum = (1L to number).sum\n        val average = sum.toFloat / number\n        if (average.isNaN) Left(sum) else Right(average)",
    "        val sum = (1L to number).sum\n        val average = sum.toFloat / number\n        if (average.isNaN) Left(sum) else Right(average)",
    "        if (number < 0) {\n            Left(number)\n        } else {\n            val sum = (number * (number + 1)) / 2\n            val average = sum.toFloat / number\n            Right(average)\n        }",
    "        if (number < 0) Left(number)\n        else {\n            val sum = (1L to number).sum\n            val average = sum.toFloat / number\n            Right(average)\n        }",
    "        if (number < 0) {\n            Left(number)\n        } else {\n            val sum = (1L to number).sum\n            val average = sum.toFloat / number\n            Right(average)\n        }",
    "        if (number < 0) Left(0)\n        else {\n            var sum = 0L\n            for (i <- 1 to number.toInt) {\n                sum += i\n            }\n            Right(sum.toFloat / number)\n        }",
    "        if (number < 0) {\n            Left(number)\n        } else {\n            val sum = (1L to number).sum\n            val average = sum.toFloat / number\n            Right(average)\n        }",
    "        if (number < 0) {\n            Left(number)\n        } else {\n            val sum = (1L to number).sum\n            val average = sum.toFloat / number\n            Right(average)\n        }",
    "        if(number < 0) Left(number)\n        else {\n            val sum = (1L to number).sum\n            val average = sum.toFloat / number\n            Right(average)\n        }",
    "        if (number < 0) {\n            Left(number)\n        } else {\n            val sum = (1L to number).sum\n            val average = sum.toFloat / number\n            Right(average)\n        }",
    "        if (number < 0) {\n            Left(number)\n        } else {\n            val sum = (number * (number + 1)) / 2\n            val average = sum.toFloat / number\n            Right(average)\n        }",
    "        val sum = (1L to number).sum\n        val average = sum.toFloat / number\n        Right(average)",
    "        if (number < 0) {\n            Left(number)\n        } else {\n            val sum = (1L to number).sum\n            val average = sum.toFloat / number\n            Right(average)\n        }",
    "        if (number < 0) Left(number)\n        else {\n            val sum = (1L to number).sum\n            val average = sum.toFloat / number\n            Right(average)\n        }",
    "        if (number < 0) Left(number)\n        else {\n            val sum = (1L to number).sum\n            val average = sum.toFloat / number\n            Right(average)\n        }"
  ]
}