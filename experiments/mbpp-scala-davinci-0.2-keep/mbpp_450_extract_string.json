{
  "name": "mbpp_450_extract_string",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract specified size of strings from a given list of string values.\n    def extractString(str : List[String], l : Long) : List[String] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (8l)).equals((List[String](\"practice\", \"solution\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (6l)).equals((List[String](\"Python\"))));\n    assert(extractString((List[String](\"Python\", \"list\", \"exercises\", \"practice\", \"solution\")), (9l)).equals((List[String](\"exercises\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        str.filter(x => x.length == l)",
    "        var result : List[String] = Nil\n        for (i <- str) {\n            if (i.length == l) result = i :: result\n        }\n        result",
    "        str.filter(x => x.length == l)",
    "        var result : List[String] = List()\n        for (s <- str) {\n            if (s.length() == l) {\n                result = s :: result\n            }\n        }\n        result",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(s => s.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(s => s.length == l)",
    "        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result",
    "        str.filter(x => x.length() == l)",
    "        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        val result = new ListBuffer[String]()\n        for (s <- str) {\n            if (s.length == l) result += s\n        }\n        result.toList",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(s => s.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result",
    "        str.filter(x => x.length == l)",
    "        var result : List[String] = List()\n        for (s <- str) {\n            if (s.length == l) result = result :+ s\n        }\n        result",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        val result = new ListBuffer[String]\n        for (s <- str) {\n            if (s.length == l) result += s\n        }\n        result.toList",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(s => s.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(s => s.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result",
    "        str.filter(x => x.length == l)",
    "        var result : List[String] = List()\n        for (s <- str) {\n            if (s.length == l) {\n                result = result :+ s\n            }\n        }\n        result",
    "        str.filter(x => x.length == l)",
    "        str.filter(s => s.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(s => s.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(s => s.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(s => s.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(s => s.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(s => s.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        val result = new ListBuffer[String]\n        for (s <- str) {\n            if (s.length == l) result += s\n        }\n        result.toList",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(s => s.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(s => s.length() == l)",
    "        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(s => s.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result",
    "        str.filter(x => x.length() == l)",
    "        str.filter(s => s.length == l)",
    "        str.filter(x => x.length == l)",
    "        var result = List[String]()\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result",
    "        str.filter(x => x.length() == l)",
    "        str.filter(s => s.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        var result : List[String] = Nil\n        for (s <- str) {\n            if (s.length == l) result = s :: result\n        }\n        result",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(s => s.length == l)",
    "        str.filter(s => s.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)",
    "        str.filter(x => x.length == l)"
  ]
}