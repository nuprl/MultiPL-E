{
  "name": "mbpp_594_diff_even_odd",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the difference of the first even and first odd number of a given list.\n    def diffEvenOdd(list1 : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(diffEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (3l));\n    assert(diffEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (1l));\n    assert(diffEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (9l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        if (even.isEmpty || odd.isEmpty) 0\n        else even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        var even : Long = 0\n        var odd : Long = 0\n        var flag : Boolean = false\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                if (!flag) {\n                    even = i\n                    flag = true\n                }\n            }\n            else {\n                odd = i\n                return even - odd\n            }\n        }\n        return 0",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        var even = 0L\n        var odd = 0L\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i\n                return even - odd\n            }\n            else {\n                odd = i\n            }\n        }\n        return even - odd",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0)\n            return 0\n        else if (odd.length == 0)\n            return 0\n        else\n            return even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head - odd.head",
    "        var even = 0L\n        var odd = 0L\n        for (i <- list1) {\n            if (i % 2 == 0) {\n                even = i\n                return even - odd\n            }\n            else {\n                odd = i\n            }\n        }\n        return even - odd",
    "        val evens = list1.filter(_ % 2 == 0)\n        val odds = list1.filter(_ % 2 != 0)\n        if (evens.isEmpty || odds.isEmpty)\n            0\n        else\n            evens.head - odds.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even - odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        if (even.isEmpty)\n            0\n        else if (odd.isEmpty)\n            even.head\n        else\n            even.head - odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head - odd.head"
  ]
}