{
  "name": "mbpp_625_swap_List",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to interchange the first and last element in a given list.\n    def swapList(newList : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(swapList((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](3l.toLong, 2l.toLong, 1l.toLong))));\n    assert(swapList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))).equals((List[Long](4l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 1l.toLong))));\n    assert(swapList((List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong, 4l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle :+ first",
    "        val newList = List(1, 2, 3, 4, 5, 6)\n        val newList2 = List(newList(newList.length - 1)) ::: newList.slice(1, newList.length - 1) ::: List(newList(0))\n        newList2",
    "        val temp = newList.head\n        val temp2 = newList.last\n        val newList2 = newList.drop(1)\n        val newList3 = newList2.dropRight(1)\n        val newList4 = temp2 :: newList3\n        val newList5 = newList4 :+ temp\n        return newList5",
    "        val temp = newList(0)\n        newList(0) = newList(newList.length - 1)\n        newList(newList.length - 1) = temp\n        return newList",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle :+ first",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle :+ first",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        return newList.last :: newList.init.tail :+ newList.head",
    "        val newList = List(1,2,3,4,5)\n        val newList = newList.head :: newList.tail.reverse\n        return newList",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        var list = newList\n        val temp = list(0)\n        list = list.updated(0, list(list.length - 1))\n        list = list.updated(list.length - 1, temp)\n        list",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val newList = List(1, 2, 3, 4, 5)\n        val newList = newList.reverse\n        return newList",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        var tempList = newList\n        val first = tempList.head\n        val last = tempList.last\n        tempList = tempList.dropRight(1)\n        tempList = tempList.drop(1)\n        tempList = last :: tempList\n        tempList = tempList :+ first\n        return tempList",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ++ middle ++ List(first)",
    "        val newList = List(1,2,3,4,5,6,7,8,9,10)\n        val newList2 = newList.reverse\n        val newList3 = newList2.tail\n        val newList4 = newList3.reverse\n        val newList5 = newList4.tail\n        val newList6 = newList5.reverse\n        val newList7 = newList6.tail\n        val newList8 = newList7.reverse\n        val newList9 = newList8.tail\n        val newList10 = newList9.reverse\n        val newList11 = newList10.tail\n        val newList12 = newList11.reverse\n        val newList13 = newList12.tail\n        val newList14 = newList13.reverse\n        val newList15 = newList14.tail\n        val newList16 = newList15.reverse\n        val newList17 = newList16.tail\n        val newList18 = newList17.reverse\n        val newList19 = newList18.tail\n        val newList20 = newList19.reverse\n        val newList21 = newList20.tail\n        val newList22 = newList21.reverse\n        val newList23 = newList22.tail\n        val newList24 = newList23.reverse\n        val newList25 = newList24.tail\n        val newList26 = newList25.reverse\n        val newList27 = newList26.tail\n        val newList28 = newList27.reverse\n        val newList29 = newList28.tail\n        val newList30 = newList29.reverse\n        val newList31 = newList30.tail\n        val newList32 = newList31.reverse\n        val newList33 = newList32.tail\n        val newList34 = newList33.reverse\n        val newList35 = newList34.tail\n        val newList36 = newList35.reverse\n        val newList37 = newList36.tail\n        val newList38 = newList37.reverse\n        val newList39 = newList38.tail\n        val newList40 = newList39.reverse\n        val newList41 = newList40.tail\n        val newList",
    "        val first = newList.head\n        val last = newList.last\n        val mid = newList.slice(1, newList.length - 1)\n        last :: mid ::: List(first)",
    "        val newList = List(1,2,3,4,5)\n        val newList2 = newList.reverse\n        val newList3 = newList2.tail.reverse\n        val newList4 = newList3.tail.reverse\n        val newList5 = newList4.tail.reverse\n        val newList6 = newList5.tail.reverse\n        val newList7 = newList6.tail.reverse\n        val newList8 = newList7.tail.reverse\n        val newList9 = newList8.tail.reverse\n        val newList10 = newList9.tail.reverse\n        val newList11 = newList10.tail.reverse\n        val newList12 = newList11.tail.reverse\n        val newList13 = newList12.tail.reverse\n        val newList14 = newList13.tail.reverse\n        val newList15 = newList14.tail.reverse\n        val newList16 = newList15.tail.reverse\n        val newList17 = newList16.tail.reverse\n        val newList18 = newList17.tail.reverse\n        val newList19 = newList18.tail.reverse\n        val newList20 = newList19.tail.reverse\n        val newList21 = newList20.tail.reverse\n        val newList22 = newList21.tail.reverse\n        val newList23 = newList22.tail.reverse\n        val newList24 = newList23.tail.reverse\n        val newList25 = newList24.tail.reverse\n        val newList26 = newList25.tail.reverse\n        val newList27 = newList26.tail.reverse\n        val newList28 = newList27.tail.reverse\n        val newList29 = newList28.tail.reverse\n        val newList30 = newList29.tail.reverse\n        val newList31 = newList30.tail.reverse\n        val newList32 = newList31.tail.reverse\n        val newList33 = newList32.tail.reverse\n        val newList34 = newList33.tail.reverse\n        val newList35 = newList34.tail.reverse\n        val newList36 = newList35.tail.reverse\n        val newList37 =",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val temp = newList.head\n        val temp2 = newList.last\n        val newList2 = newList.drop(1)\n        val newList3 = newList2.dropRight(1)\n        val newList4 = temp2 :: newList3\n        val newList5 = temp :: newList4\n        newList5",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ++ middle ++ List(first)",
    "        val temp = newList.head\n        newList.tail :+ temp",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        val newList = List(last) ++ middle ++ List(first)\n        return newList",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val temp = newList.head\n        val temp2 = newList.last\n        val newList2 = newList.drop(1)\n        val newList3 = newList2.dropRight(1)\n        val newList4 = temp2 :: newList3\n        val newList5 = newList4 :+ temp\n        newList5",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle :+ first",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle ::: List(first)",
    "        // newList.reverse.tail.reverse ::: newList.head :: Nil\n        newList.last :: newList.init.tail ::: newList.init.head :: Nil",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle :+ first",
    "        val newList = List(1, 2, 3, 8, 5, 6)\n        val newList2 = newList.reverse\n        val newList3 = newList2.tail.reverse\n        val newList4 = newList3 :+ newList2.head\n        newList4",
    "        val first = newList.head\n        val last = newList.last\n        val newList2 = newList.dropRight(1).drop(1)\n        return last :: newList2 :+ first",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val temp = newList.head\n        val temp2 = newList.last\n        val newList2 = newList.drop(1)\n        val newList3 = newList2.dropRight(1)\n        temp2 :: newList3 :+ temp",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ++ middle ++ List(first)",
    "        val newList = List(1, 2, 3, 4, 5)\n        val newList2 = newList.head :: newList.reverse.tail\n        newList2",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val temp = newList.head\n        val temp2 = newList.last\n        val temp3 = newList.drop(1)\n        val temp4 = temp3.dropRight(1)\n        return temp2 :: temp4 ::: List(temp)",
    "        val temp = newList.head\n        val temp2 = newList.last\n        val newList2 = newList.drop(1)\n        val newList3 = newList2.dropRight(1)\n        val newList4 = temp2 :: newList3\n        val newList5 = newList4 :+ temp\n        return newList5",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ++ middle ++ List(first)",
    "        val temp = newList(0)\n        newList(0) = newList(newList.length - 1)\n        newList(newList.length - 1) = temp\n        return newList",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val temp = newList.head\n        newList.drop(1).dropRight(1) :+ temp :+ newList.last",
    "        val temp = newList(0)\n        newList(0) = newList(newList.size - 1)\n        newList(newList.size - 1) = temp\n        newList",
    "        val length = newList.length\n        val first = newList(0)\n        val last = newList(length - 1)\n        val newList2 = newList.drop(1)\n        val newList3 = newList2.dropRight(1)\n        return List(last) ::: newList3 ::: List(first)",
    "        val temp = newList.head\n        newList.tail :+ temp",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val temp = newList.head\n        newList.tail.init :+ temp",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val newList2 = newList.drop(1).dropRight(1)\n        List(last) ++ newList2 ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val newList2 = newList.dropRight(1).drop(1)\n        val newList3 = last :: newList2\n        val newList4 = newList3 :+ first\n        return newList4",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ++ middle ++ List(first)",
    "        var list = newList\n        val temp = list.head\n        list = list.tail\n        list = list :+ temp\n        list",
    "        val newList = List(1,2,3,4,5)\n        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        val newList = List(last) ++ middle ++ List(first)\n        newList",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val temp = newList.head\n        newList.tail.init :+ temp",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle :+ first",
    "        var list = newList\n        var temp = list(0)\n        list = list.drop(1)\n        list = list :+ temp\n        return list",
    "        val temp = newList.head\n        newList.tail.init :+ temp",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ++ middle ++ List(first)",
    "        newList match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => xs.last :: xs.init :+ x\n        }",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle :+ first",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val newList = List(1, 2, 3, 4, 5)\n        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val newList2 = newList.reverse\n        return newList2",
    "        val temp = newList(0)\n        newList(0) = newList(newList.length - 1)\n        newList(newList.length - 1) = temp\n        newList",
    "        val temp = newList.head\n        val temp2 = newList.last\n        val newList2 = newList.drop(1)\n        val newList3 = newList2.dropRight(1)\n        val newList4 = temp2 :: newList3\n        val newList5 = newList4 :+ temp\n        newList5",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ++ middle ++ List(first)",
    "        val temp = newList.head\n        val temp2 = newList.last\n        val newList2 = newList.drop(1)\n        val newList3 = newList2.dropRight(1)\n        val newList4 = temp2 :: newList3\n        val newList5 = newList4 :+ temp\n        newList5",
    "        val first = newList(0)\n        val last = newList(newList.length - 1)\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle :+ first",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val size = newList.size\n        val first = newList(0)\n        val last = newList(size - 1)\n        val middle = newList.slice(1, size - 1)\n        return List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ++ middle ++ List(first)",
    "        val temp = newList(0)\n        newList(0) = newList(newList.length - 1)\n        newList(newList.length - 1) = temp\n        return newList",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        List(last) ::: middle ::: List(first)",
    "        val temp = newList.head\n        newList.tail.init :+ temp",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ++ middle ++ List(first)",
    "        val temp = newList.head\n        val temp2 = newList.last\n        val newList2 = newList.drop(1)\n        val newList3 = newList2.dropRight(1)\n        val newList4 = temp2 :: newList3\n        val newList5 = newList4 :+ temp\n        return newList5",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return List(last) ::: middle ::: List(first)",
    "        newList match {\n            case Nil => Nil\n            case x :: Nil => x :: Nil\n            case x :: xs => xs.last :: xs.init :+ x\n        }",
    "        val temp = newList(0)\n        newList(0) = newList(newList.length - 1)\n        newList(newList.length - 1) = temp\n        newList",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return List(last) ::: middle ::: List(first)",
    "        val temp = newList.head\n        val temp2 = newList.last\n        val newList2 = newList.drop(1)\n        val newList3 = newList2.dropRight(1)\n        val newList4 = temp2 :: newList3\n        val newList5 = newList4 :+ temp\n        newList5",
    "        val list = newList.toArray\n        val temp = list(0)\n        list(0) = list(list.length - 1)\n        list(list.length - 1) = temp\n        list.toList",
    "        val temp = newList.head\n        val temp2 = newList.last\n        newList.updated(0, temp2).updated(newList.length - 1, temp)",
    "        val newList = List(1, 2, 3, 8, 5, 6)\n        val newList = newList.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n        val newList = newList.tail.reverse\n       ",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        return List(last) ++ middle ++ List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)",
    "        val temp = newList.head\n        newList.tail.init :+ temp",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.tail.init\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle ::: List(first)",
    "        val temp = newList(0)\n        newList(0) = newList(newList.length - 1)\n        newList(newList.length - 1) = temp\n        newList",
    "        val newListSize = newList.size\n        val firstElement = newList(0)\n        val lastElement = newList(newListSize - 1)\n        val newListWithoutFirstAndLast = newList.slice(1, newListSize - 1)\n        return List(lastElement) ::: newListWithoutFirstAndLast ::: List(firstElement)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        last :: middle :+ first",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.drop(1).dropRight(1)\n        List(last) ::: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        List(last) ::: middle ::: List(first)",
    "        val length = newList.length\n        val first = newList(0)\n        val last = newList(length - 1)\n        val middle = newList.slice(1, length - 1)\n        return last :: middle ::: List(first)",
    "        val first = newList.head\n        val last = newList.last\n        val middle = newList.slice(1, newList.length - 1)\n        return last :: middle ::: List(first)"
  ]
}