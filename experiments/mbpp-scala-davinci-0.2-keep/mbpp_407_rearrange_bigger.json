{
  "name": "mbpp_407_rearrange_bigger",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedR = sorted.reverse\n        val index = digits.indexOf(sortedR.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftR, rightR) = (left.reverse, right.reverse)\n        val (leftR2, rightR2) = (leftR.tail, rightR.tail)\n        val (leftR3, rightR3) = (leftR2.reverse, rightR2.reverse)\n        val leftR4 = leftR3 :+ sortedR.head\n        val rightR4 = rightR3 :+ leftR.head\n        val result = (leftR4 ::: rightR4).mkString.toLong\n        if (result == n) -1 else result",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val newRight = sortedReverse.tail :+ sortedReverse.head\n        val newLeft = left.sorted\n        val newDigits = newRight ::: newLeft\n        val newNumber = newDigits.mkString.toLong\n        if (newNumber > n) newNumber else -1",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val min = sorted.head\n        val maxIndex = digits.indexOf(max)\n        val minIndex = digits.indexOf(min)\n        if (maxIndex == minIndex) return -1\n        val newDigits = digits.updated(maxIndex, min).updated(minIndex, max)\n        newDigits.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val leftSortedReverse = leftSorted.reverse\n        val rightSortedReverse = rightSorted.reverse\n        val (leftSortedReverseHead, leftSortedReverseTail) = (leftSortedReverse.head, leftSortedReverse.tail)\n        val (rightSortedReverseHead, rightSortedReverseTail) = (rightSortedReverse.head, rightSortedReverse.tail)\n        val leftSortedReverseTailSorted = leftSortedReverseTail.sorted\n        val rightSortedReverseTailSorted = rightSortedReverseTail.sorted\n        if (leftSortedReverseHead > rightSortedReverseHead) {\n            val result = (leftSortedReverseTailSorted :+ leftSortedReverseHead) ++ (rightSortedReverseHead +: rightSortedReverseTailSorted)\n            result.mkString.toLong\n        } else {\n            -1\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        if (digits == sorted.reverse) return -1\n        val (i, j) = (digits.indexWhere(_ < digits.last), digits.lastIndexWhere(_ > digits.last))\n        val (a, b) = (digits(i), digits(j))\n        val newDigits = digits.updated(i, b).updated(j, a)\n        val result = newDigits.mkString.toLong\n        result",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedStr = sortedDigitsReversed.mkString\n        val sortedDigitsStr = sortedDigits.mkString\n        val digitsStr = digits.mkString\n        if (sortedDigitsStr == digitsStr) {\n            -1\n        } else {\n            val index = sortedDigitsReversedStr.indexOf(digitsStr.last)\n            val newDigits = digits.dropRight(1) :+ sortedDigitsReversed(index)\n            val newDigitsSorted = newDigits.sorted\n            val newDigitsSortedStr = newDigitsSorted.mkString\n            newDigitsSortedStr.toLong\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedMap = sortedDigitsReversed.zipWithIndex.toMap\n        val digitsMap = digits.zipWithIndex.toMap\n        val maxDigit = digits.max\n        val maxDigitIndex = digitsMap(maxDigit)\n        val maxDigitIndexSorted = sortedDigitsReversedMap(maxDigit)\n        val maxDigitIndexSortedNext = maxDigitIndexSorted - 1\n        val maxDigitNext = sortedDigitsReversed(maxDigitIndexSortedNext)\n        val maxDigitNextIndex = sortedDigitsReversedMap(maxDigitNext)\n        val maxDigitNextIndexSorted = sortedDigitsReversedMap(maxDigitNext)\n        val maxDigitNextIndexSortedNext = maxDigitNextIndexSorted - 1\n        val maxDigitNextNext = sortedDigitsReversed(maxDigitNextIndexSortedNext)\n        val maxDigitNextNextIndex = sortedDigitsReversedMap(maxDigitNextNext)\n        val maxDigitNextNextIndexSorted = sortedDigitsReversedMap(maxDigitNextNext)\n        val maxDigitNextNextIndexSortedNext = maxDigitNextNextIndexSorted - 1\n        val maxDigitNextNextNext = sortedDigitsReversed(maxDigitNextNextIndexSortedNext)\n        val maxDigitNextNextNextIndex = sortedDigitsReversedMap(maxDigitNextNextNext)\n        val maxDigitNextNextNextIndexSorted = sortedDigitsReversedMap(maxDigitNextNextNext)\n        val maxDigitNextNextNextIndexSortedNext = maxDigitNextNextNextIndexSorted - 1\n        val maxDigitNextNextNextNext = sortedDigitsReversed(maxDigitNextNextNextIndexSortedNext)\n        val maxDigitNextNextNextNextIndex = sortedDigitsReversedMap(maxDigitNextNextNextNext)\n        val maxDigitNextNextNextNextIndexS",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) {\n            -1\n        } else {\n            val (left, right) = digits.splitAt(index)\n            val min = right.min\n            val minIndex = right.indexOf(min)\n            val (left1, right1) = right.splitAt(minIndex)\n            val right2 = right1.tail\n            val right3 = min :: right2.sorted\n            val result = left ::: right3\n            result.mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.asDigit).sorted.reverse\n        val (first, second) = digits.splitAt(digits.indexOf(digits.min))\n        if (first.isEmpty) None else Some(first.reverse.mkString.toLong + second.mkString.toLong)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOf(sortedRev.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftRev, rightRev) = (left.reverse, right.reverse)\n        val (leftRevHead, leftRevTail) = (leftRev.head, leftRev.tail)\n        val (rightRevHead, rightRevTail) = (rightRev.head, rightRevTail)\n        val (leftRevHeadSorted, leftRevTailSorted) = (leftRevHead.sorted, leftRevTail.sorted)\n        val (leftRevHeadSortedRev, leftRevTailSortedRev) = (leftRevHeadSorted.reverse, leftRevTailSorted.reverse)\n        val (leftRevHeadSortedRevHead, leftRevHeadSortedRevTail) = (leftRevHeadSortedRev.head, leftRevHeadSortedRev.tail)\n        val (leftRevHeadSortedRevTailHead, leftRevHeadSortedRevTailTail) = (leftRevHeadSortedRevTail.head, leftRevHeadSortedRevTail.tail)\n        val (leftRevHeadSortedRevTailTailHead, leftRevHeadSortedRevTailTailTail) = (leftRevHeadSortedRevTailTail.head, leftRevHeadSortedRevTailTail.tail)\n        val (leftRevHeadSortedRevTailTailTailHead, leftRevHeadSortedRevTailTailTailTail) = (leftRevHeadSortedRevTailTailTail.head, leftRevHeadSortedRevTailTailTail.tail)\n        val (leftRevHeadSortedRevTailTailTailTailHead, leftRevHeadSortedRevTailTailTailTailTail) = (leftRevHeadSortedRevTailTailTailTail.head, leftRevHeadSortedRevTailTailTailTail.tail)\n        val (leftRevHeadSortedRevTailTailTail",
    "        def rearrangeBigger(n : Long, digits : List[Int]) : Any = {\n            if (digits.length == 1) return -1\n            val last = digits.last\n            val rest = digits.dropRight(1)\n            val index = rest.indexWhere(_ > last)\n            if (index == -1) rearrangeBigger(n, rest)\n            else {\n                val (left, right) = rest.splitAt(index)\n                val newDigits = left ::: List(last) ::: right.tail.sorted\n                val newNumber = newDigits.foldLeft(0L)((acc, x) => acc * 10 + x)\n                if (newNumber > n) newNumber\n                else rearrangeBigger(n, rest)\n            }\n        }\n        rearrangeBigger(n, n.toString.map(_.asDigit).toList)",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val sortedRight = right.sorted\n        val max = sortedRight.last\n        val min = sortedRight.head\n        if (max == min) return -1\n        val index = right.indexOf(max)\n        val newRight = right.updated(index, min)\n        val newLeft = left :+ max\n        (newLeft ::: newRight).mkString.toLong",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val sortedRevStr = sortedRev.map(_.toString).mkString\n        val sortedStr = sorted.map(_.toString).mkString\n        if (sortedRevStr == n.toString) {\n            \"Not possible\"\n        } else {\n            val sortedRevStr2 = sortedRevStr.substring(0, sortedRevStr.length - 1)\n            val sortedRevStr3 = sortedRevStr.substring(sortedRevStr.length - 1)\n            val sortedRevStr4 = sortedRevStr2 + sortedRevStr3\n            val sortedRevStr5 = sortedRevStr4.map(_.toString.toInt).toList\n            val sortedRevStr6 = sortedRevStr5.sorted\n            val sortedRevStr7 = sortedRevStr6.map(_.toString).mkString\n            val sortedRevStr8 = sortedRevStr7 + sortedRevStr3\n            sortedRevStr8.toLong\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        if (digits == sortedRev) {\n            -1\n        } else {\n            val index = digits.lastIndexWhere(x => x < sortedRev(digits.indexOf(x)))\n            val temp = digits(index)\n            digits(index) = sortedRev.find(_ > temp).get\n            sortedRev.remove(sortedRev.indexOf(digits(index)))\n            digits.remove(index)\n            (digits :+ temp).mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        var i = digits.length - 1\n        while (i > 0 && digits(i - 1) >= digits(i)) i -= 1\n        if (i == 0) return -1\n        var j = digits.length - 1\n        while (digits(j) <= digits(i - 1)) j -= 1\n        val temp = digits(i - 1)\n        digits(i - 1) = digits(j)\n        digits(j) = temp\n        digits.slice(i, digits.length).sorted.reverse.foreach(x => digits(i) = x; i += 1)\n        digits.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedTail = sortedDigitsReversed.tail\n        val sortedDigitsReversedTailSorted = sortedDigitsReversedTail.sorted\n        val sortedDigitsReversedTailSortedReversed = sortedDigitsReversedTailSorted.reverse\n        val sortedDigitsReversedTailSortedReversedHead = sortedDigitsReversedTailSortedReversed.head\n        val sortedDigitsReversedTailSortedReversedTail = sortedDigitsReversedTailSortedReversed.tail\n        val sortedDigitsReversedTailSortedReversedTailSorted = sortedDigitsReversedTailSortedReversedTail.sorted\n        val sortedDigitsReversedTailSortedReversedTailSortedReversed = sortedDigitsReversedTailSortedReversedTailSorted.reverse\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedHead = sortedDigitsReversedTailSortedReversedTailSortedReversed.head\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedTail = sortedDigitsReversedTailSortedReversedTailSortedReversed.tail\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedTailSorted = sortedDigitsReversedTailSortedReversedTailSortedReversedTail.sorted\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedTailSortedReversed = sortedDigitsReversedTailSortedReversedTailSortedReversedTailSorted.reverse\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedTailSortedReversedHead = sortedDigitsRe",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val digitsReversed = digits.reverse\n        val index = digitsReversed.indexWhere(x => x < sortedDigitsReversed(digitsReversed.indexOf(x)))\n        if (index == -1) None\n        else {\n            val (left, right) = digitsReversed.splitAt(index)\n            val (left1, right1) = right.splitAt(1)\n            val (left2, right2) = left.splitAt(left.indexWhere(x => x > left1(0)))\n            val left3 = left2 ::: left1\n            val right3 = right2 ::: right1\n            val result = (left3 ::: right3).reverse.mkString.toLong\n            Some(result)\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) return -1\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val (left, right) = digits.splitAt(index)\n        val rightSorted = right.sorted\n        val min = rightSorted.filter(_ > right.last).min\n        val (left2, right2) = rightSorted.partition(_ == min)\n        val result = (left ::: (min :: left2)) ::: right2\n        result.mkString.toLong",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftReverse, rightReverse) = left.reverse.splitAt(1)\n        val newLeft = leftReverse.head :: rightReverse\n        val newRight = sortedReverse.tail\n        val newDigits = newLeft ::: newRight\n        val newNumber = newDigits.mkString.toLong\n        if (newNumber == n) -1\n        else newNumber",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsRev = sortedDigits.reverse\n        val sortedDigitsRevStr = sortedDigitsRev.mkString\n        val sortedDigitsStr = sortedDigits.mkString\n        val nStr = n.toString\n        if (nStr == sortedDigitsStr) {\n            -1\n        } else {\n            val nStrRev = nStr.reverse\n            val index = nStrRev.indexOf(sortedDigitsRevStr)\n            val nStrRev2 = nStrRev.substring(index)\n            val nStrRev3 = nStrRev.substring(0, index)\n            val nStrRev4 = nStrRev3 + sortedDigitsRevStr\n            val nStrRev5 = nStrRev4.reverse\n            nStrRev5.toLong\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOf(sortedRev.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftRev, rightRev) = (left.reverse, right.reverse)\n        val (leftRevSorted, rightRevSorted) = (leftRev.sorted, rightRev.sorted)\n        val (leftRevSortedRev, rightRevSortedRev) = (leftRevSorted.reverse, rightRevSorted.reverse)\n        val result = (leftRevSortedRev ::: rightRevSortedRev).mkString.toLong\n        if (result == n) -1 else result",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val index = digits.indexOf(max)\n        val (left, right) = digits.splitAt(index)\n        val (left1, left2) = left.splitAt(left.length - 1)\n        val (right1, right2) = right.splitAt(1)\n        val result = left1 ::: List(max) ::: right1 ::: List(left2.head) ::: right2\n        if (result.mkString.toLong > n) result.mkString.toLong else -1",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n        val (leftSortedReverseTailSortedReverseHead, rightSortedReverseTailSortedReverseHead) = (leftSortedReverseTailSortedReverse.head, rightSortedReverseTailSortedReverse.head)\n        val (leftSortedReverseTailSortedReverseTail, rightSortedReverseTailSortedReverseTail) = (leftSortedReverseTailSortedReverse.tail, rightSortedReverseTailSortedReverse.tail)\n        val (leftSortedReverseTailSortedReverseTailSorted, rightSortedReverseTailSortedReverseTailSorted) = (leftSortedReverseTailSortedReverseTail.sorted, rightSortedReverseTailSortedReverseTail.sorted)\n        val (leftSortedReverseT",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedStr = sortedDigitsReversed.mkString\n        val nStr = n.toString\n        if (sortedDigitsReversedStr == nStr) {\n            \"Not possible\"\n        } else {\n            val sortedDigitsReversedStrList = sortedDigitsReversedStr.toList\n            val nStrList = nStr.toList\n            val nStrListSorted = nStrList.sorted\n            val nStrListSortedStr = nStrListSorted.mkString\n            val nStrListSortedStrList = nStrListSortedStr.toList\n            val nStrListSortedStrListReversed = nStrListSortedStrList.reverse\n            val nStrListSortedStrListReversedStr = nStrListSortedStrListReversed.mkString\n            val nStrListSortedStrListReversedStrList = nStrListSortedStrListReversedStr.toList\n            val nStrListSortedStrListReversedStrListReversed = nStrListSortedStrListReversedStrList.reverse\n            val nStrListSortedStrListReversedStrListReversedStr = nStrListSortedStrListReversedStrListReversed.mkString\n            val nStrListSortedStrListReversedStrListReversedStrList = nStrListSortedStrListReversedStrListReversedStr.toList\n            val nStrListSortedStrListReversedStrListReversedStrListReversed = nStrListSortedStrListReversedStrListReversedStrList.reverse\n            val nStrListSortedStrListReversedStrListReversedStrListReversedStr = nStrListSortedStrListReversedStrListReversedStrListReversed.mkString\n            val nStrListSortedStrListReversedStrListReversedStrListReversedStrList = nStrListSortedStrListReversedStrList",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val min = sorted.head\n        if (max == min) return -1\n        val index = digits.indexOf(max)\n        val newDigits = digits.updated(index, min)\n        val newDigits2 = newDigits.updated(0, max)\n        newDigits2.mkString.toLong",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOf(sortedRev.head)\n        val (left, right) = digits.splitAt(index)\n        val newRight = sortedRev.tail :+ sortedRev.head\n        val newDigits = left ::: newRight\n        if (newDigits.head == 0) None else Some(newDigits.mkString.toLong)",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedDesc = sorted.reverse\n        if (digits == sortedDesc) return -1\n        val index = digits.lastIndexWhere(x => x < digits.last)\n        val temp = digits(index)\n        digits(index) = digits.last\n        digits(digits.length - 1) = temp\n        val sortedTail = digits.drop(index + 1).sorted\n        val result = digits.take(index + 1) ++ sortedTail\n        result.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val index = digits.lastIndexWhere(_ < sorted.last)\n        if (index == -1) return -1\n        val (left, right) = digits.splitAt(index)\n        val next = sorted.filter(_ > digits(index)).min\n        val newRight = (right.filter(_ != next) :+ digits(index)).sorted\n        (left :+ next) ++ newRight",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val sortedReverseIndex = sortedReverse.indexOf(digits.last)\n        val sortedReverseIndexNext = sortedReverseIndex - 1\n        val sortedReverseIndexNextDigit = sortedReverse(sortedReverseIndexNext)\n        val sortedReverseIndexNextDigitIndex = sorted.indexOf(sortedReverseIndexNextDigit)\n        val sortedReverseIndexNextDigitIndexNext = sortedReverseIndexNextDigitIndex + 1\n        val sortedReverseIndexNextDigitIndexNextDigit = sorted(sortedReverseIndexNextDigitIndexNext)\n        val sortedReverseIndexNextDigitIndexNextDigitIndex = sortedReverse.indexOf(sortedReverseIndexNextDigitIndexNextDigit)\n        val sortedReverseIndexNextDigitIndexNextDigitIndexNext = sortedReverseIndexNextDigitIndexNextDigitIndex + 1\n        val sortedReverseIndexNextDigitIndexNextDigitIndexNextDigit = sortedReverse(sortedReverseIndexNextDigitIndexNextDigitIndexNext)\n        val sortedReverseIndexNextDigitIndexNextDigitIndexNextDigitIndex = sorted.indexOf(sortedReverseIndexNextDigitIndexNextDigitIndexNextDigit)\n        val sortedReverseIndexNextDigitIndexNextDigitIndexNextDigitIndexNext = sortedReverseIndexNextDigitIndexNextDigitIndexNextDigitIndex + 1\n        val sortedReverseIndexNextDigitIndexNextDigitIndexNextDigitIndexNextDigit = sortedReverse(sortedReverseIndexNextDigitIndexNextDigitIndexNextDigitIndexNext)\n        val sortedReverseIndexNextDigitIndexNextDigitIndexNextDigitIndexNextDigitIndex = sorted.indexOf(sortedReverseIndexNextDigitIndexNextDigitIndexNextDigitIndexNextDigit)\n        val sortedReverseIndexNextDigitIndexNextDigitIndexNextDigitIndexNextDigitIndexNext =",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val max = sorted.last\n        val maxIndex = digits.indexOf(max)\n        val maxIndexSorted = sorted.indexOf(max)\n        val maxSorted = sorted.drop(maxIndexSorted + 1)\n        val maxSorted2 = maxSorted.headOption.getOrElse(max)\n        val maxSortedIndex = sorted.indexOf(maxSorted2)\n        val maxSortedIndex2 = sorted.indexOf(maxSorted2)\n        val maxSorted2Sorted = sorted.drop(maxSortedIndex2 + 1)\n        val maxSorted2Sorted2 = maxSorted2Sorted.headOption.getOrElse(maxSorted2)\n        val maxSorted2SortedIndex = sorted.indexOf(maxSorted2Sorted2)\n        val maxSorted2SortedIndex2 = sorted.indexOf(maxSorted2Sorted2)\n        val maxSorted2Sorted2Sorted = sorted.drop(maxSorted2SortedIndex2 + 1)\n        val maxSorted2Sorted2Sorted2 = maxSorted2Sorted2Sorted.headOption.getOrElse(maxSorted2Sorted2)\n        val maxSorted2Sorted2SortedIndex = sorted.indexOf(maxSorted2Sorted2Sorted2)\n        val maxSorted2Sorted2SortedIndex2 = sorted.indexOf(maxSorted2Sorted2Sorted2)\n        val maxSorted2Sorted2Sorted2Sorted = sorted.drop(maxSorted2Sorted2SortedIndex2 + 1)\n        val maxSorted2Sorted2Sorted2Sorted2 = maxSorted2Sorted2Sorted2Sorted.headOption.getOrElse(maxSorted2Sorted2Sorted2)\n        val maxSorted2Sorted2Sorted2SortedIndex = sorted.indexOf(maxSorted2Sorted2Sorted2Sorted2)\n        val maxSorted2Sorted2Sorted2SortedIndex2 = sorted.indexOf(maxS",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val index = digits.indexOf(sorted.last)\n        val (left, right) = digits.splitAt(index)\n        val newRight = sorted.filter(_ > digits(index))\n        val newLeft = sorted.filter(_ <= digits(index))\n        val newDigits = (left ::: newRight ::: newLeft).mkString\n        if (newDigits.head == '0') -1 else newDigits.toLong",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftReverse, rightReverse) = (left.reverse, right.reverse)\n        val (leftReverseSorted, rightReverseSorted) = (leftReverse.sorted, rightReverse.sorted)\n        val (leftReverseSortedReverse, rightReverseSortedReverse) = (leftReverseSorted.reverse, rightReverseSorted.reverse)\n        val (leftReverseSortedReverseTail, rightReverseSortedReverseHead) = (leftReverseSortedReverse.tail, rightReverseSortedReverse.head)\n        val (leftReverseSortedReverseTailSorted, rightReverseSortedReverseHeadSorted) = (leftReverseSortedReverseTail.sorted, rightReverseSortedReverseHead.sorted)\n        val (leftReverseSortedReverseTailSortedReverse, rightReverseSortedReverseHeadSortedReverse) = (leftReverseSortedReverseTailSorted.reverse, rightReverseSortedReverseHeadSorted.reverse)\n        val (leftReverseSortedReverseTailSortedReverseHead, rightReverseSortedReverseHeadSortedReverseHead) = (leftReverseSortedReverseTailSortedReverse.head, rightReverseSortedReverseHeadSortedReverse.head)\n        val (leftReverseSortedReverseTailSortedReverseTail, rightReverseSortedReverseHeadSortedReverseTail) = (leftReverseSortedReverseTailSortedReverse.tail, rightReverseSortedReverse",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val max = sorted.last\n        val min = sorted.head\n        val maxIndex = digits.indexOf(max)\n        val minIndex = digits.indexOf(min)\n        if (maxIndex == 0) {\n            val newDigits = digits.updated(maxIndex, min).updated(minIndex, max)\n            newDigits.mkString.toLong\n        } else {\n            val newDigits = digits.updated(maxIndex, min).updated(minIndex, max)\n            newDigits.mkString.toLong\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReverse = sortedDigits.reverse\n        val index = digits.indexOf(sortedDigitsReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftReverse, rightReverse) = left.reverse.splitAt(left.length - 1)\n        val newDigits = leftReverse ::: rightReverse ::: right\n        val newNumber = newDigits.mkString.toLong\n        if (newNumber == n) -1 else newNumber",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val newRight = sortedReverse.tail ::: left\n        if (newRight.mkString.toLong > n) newRight.mkString.toLong else -1",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) {\n            \"Not possible\"\n        } else {\n            val index = digits.lastIndexWhere(_ < digits.last)\n            val newDigits = digits.updated(index, digits.last).updated(digits.length - 1, digits(index))\n            val newSorted = newDigits.sorted\n            val newSortedReverse = newSorted.reverse\n            val newDigits2 = newDigits.updated(index, newSortedReverse(newSortedReverse.indexOf(newDigits(index)) + 1))\n            val newSorted2 = newDigits2.sorted\n            val newSortedReverse2 = newSorted2.reverse\n            val newDigits3 = newDigits2.updated(index, newSortedReverse2(newSortedReverse2.indexOf(newDigits2(index)) + 1))\n            val newSorted3 = newDigits3.sorted\n            val newSortedReverse3 = newSorted3.reverse\n            val newDigits4 = newDigits3.updated(index, newSortedReverse3(newSortedReverse3.indexOf(newDigits3(index)) + 1))\n            val newSorted4 = newDigits4.sorted\n            val newSortedReverse4 = newSorted4.reverse\n            val newDigits5 = newDigits4.updated(index, newSortedReverse4(newSortedReverse4.indexOf(newDigits4(index)) + 1))\n            val newSorted5 = newDigits5.sorted\n            val newSortedReverse5 = newSorted5.reverse\n            val newDigits6 = newDigits5.updated(index, newSortedReverse5(newSortedReverse5.indexOf(newDigits5(index)) + 1))\n            val newSorted6 = newDigits6.sorted\n            val newS",
    "        val digits = n.toString.toArray.map(_.toString.toInt).sorted\n        val len = digits.length\n        var i = len - 1\n        while (i > 0 && digits(i - 1) >= digits(i)) i -= 1\n        if (i == 0) return -1\n        var j = len - 1\n        while (digits(j) <= digits(i - 1)) j -= 1\n        val temp = digits(i - 1)\n        digits(i - 1) = digits(j)\n        digits(j) = temp\n        val (left, right) = digits.splitAt(i)\n        (left ++ right.reverse).mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftReverse, rightReverse) = left.reverse.splitAt(1)\n        val result = (leftReverse ::: rightReverse ::: right).mkString.toLong\n        if (result == n) -1 else result",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) {\n            -1\n        } else {\n            val index = digits.indexOf(sortedReverse.find(x => x > digits.last).get)\n            val (left, right) = digits.splitAt(index)\n            val result = (left.dropRight(1) :+ sortedReverse.head) ::: sortedReverse.tail.sorted\n            result.mkString.toLong\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val newLeft = leftSortedReverse.tail :+ rightSortedReverse.head\n        val newRight = rightSortedReverse.tail :+ leftSortedReverse.head\n        val newDigits = newLeft ++ newRight\n        val newNumber = newDigits.mkString.toLong\n        if (newNumber > n) newNumber else -1",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        if (digits == sortedDigits.reverse) return -1\n        val index = (digits.length - 1 to 0 by -1).find(i => digits(i) > digits(i - 1)).get\n        val (left, right) = digits.splitAt(index)\n        val nextBigger = (left.init :+ right.min) ++ right.filter(_ != right.min).sorted\n        nextBigger.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val (left, right) = digits.span(_ == sorted.last)\n        if (left.isEmpty) None else {\n            val (left2, right2) = sorted.span(_ != sorted.last)\n            val newDigits = left2.last :: (left ::: right2)\n            Some(newDigits.mkString.toLong)\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedString = sortedDigitsReversed.mkString\n        val sortedDigitsReversedLong = sortedDigitsReversedString.toLong\n        val digitsString = digits.mkString\n        val digitsLong = digitsString.toLong\n        if (digitsLong == sortedDigitsReversedLong) {\n            -1\n        } else {\n            val digitsReversed = digits.reverse\n            val digitsReversedString = digitsReversed.mkString\n            val digitsReversedLong = digitsReversedString.toLong\n            val digitsReversedSorted = digitsReversed.sorted\n            val digitsReversedSortedString = digitsReversedSorted.mkString\n            val digitsReversedSortedLong = digitsReversedSortedString.toLong\n            val digitsReversedSortedReversed = digitsReversedSorted.reverse\n            val digitsReversedSortedReversedString = digitsReversedSortedReversed.mkString\n            val digitsReversedSortedReversedLong = digitsReversedSortedReversedString.toLong\n            if (digitsReversedLong == digitsReversedSortedReversedLong) {\n                digitsReversedSortedReversedLong\n            } else {\n                val digitsReversedSortedReversedList = digitsReversedSortedReversed.toList\n                val digitsReversedSortedReversedListTail = digitsReversedSortedReversedList.tail\n                val digitsReversedSortedReversedListTailString = digitsReversedSortedReversedListTail.mkString\n                val digitsReversedSortedReversedListTailLong = digitsReversedSortedReversedListTailString.toLong\n                val digitsReversedSortedReversedListTailSorted = digitsReversedSortedReversedListTail.sorted\n                val digitsReversedSortedRe",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val digitsReversed = digits.reverse\n        val index = digitsReversed.indexWhere(x => x < sortedDigitsReversed(digitsReversed.indexOf(x)))\n        if (index == -1) -1\n        else {\n            val (left, right) = digitsReversed.splitAt(index)\n            val (left1, right1) = right.splitAt(1)\n            val (left2, right2) = left.splitAt(left.indexWhere(x => x > left1.head))\n            val (left3, right3) = right2.splitAt(right2.indexWhere(x => x > left1.head))\n            val result = (left2 ::: left1 ::: left3 ::: right3 ::: right1).reverse\n            result.mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(x => x.asDigit)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOf(sortedRev(0))\n        val (left, right) = digits.splitAt(index)\n        val (leftRev, rightRev) = (left.reverse, right.reverse)\n        val (leftRevSorted, rightRevSorted) = (leftRev.sorted, rightRev.sorted)\n        val (leftRevSortedRev, rightRevSortedRev) = (leftRevSorted.reverse, rightRevSorted.reverse)\n        val result = (leftRevSortedRev ::: rightRevSortedRev).mkString.toLong\n        if (result == n) -1 else result",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) {\n            \"Not possible\"\n        } else {\n            val index = digits.indexOf(sortedReverse.head)\n            val (left, right) = digits.splitAt(index)\n            val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n            val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n            val leftSortedReverseTail = leftSortedReverse.tail\n            val rightSortedReverseHead = rightSortedReverse.head\n            val rightSortedReverseTail = rightSortedReverse.tail\n            val newLeft = leftSortedReverseTail :+ rightSortedReverseHead\n            val newRight = rightSortedReverseTail\n            (newLeft ::: newRight).mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        if (digits == sorted.reverse) return -1\n        val index = digits.indexWhere(digits(_) < digits(_ + 1))\n        val min = digits.indexWhere(digits(_) > digits(index))\n        val temp = digits(index)\n        digits(index) = digits(min)\n        digits(min) = temp\n        digits.slice(0, index + 1) ++ digits.slice(index + 1, digits.length).sorted",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n        val (leftSortedReverseTailSortedReverseHead, rightSortedReverseTailSortedReverseHead) = (leftSortedReverseTailSortedReverse.head, rightSortedReverseTailSortedReverse.head)\n        val (leftSortedReverseTailSortedReverseTail, rightSortedReverseTailSortedReverseTail) = (leftSortedReverseTailSortedReverse.tail, rightSortedReverseTailSortedReverse.tail)\n        val (leftSortedReverseTailSortedReverseTailSorted, rightSortedReverseTailSortedReverseTailSorted) = (leftSortedReverseTailSortedReverseTail.sorted, rightSortedReverseTailSortedReverseTail.sorted)\n        val (leftSortedReverseT",
    "        val s = n.toString.toArray\n        val l = s.length\n        var i = l - 1\n        while (i > 0 && s(i - 1) >= s(i)) i -= 1\n        if (i == 0) return -1\n        var j = l - 1\n        while (s(j) <= s(i - 1)) j -= 1\n        val t = s(i - 1)\n        s(i - 1) = s(j)\n        s(j) = t\n        val k = i\n        while (k < l - 1) {\n            val t = s(k)\n            s(k) = s(l - 1)\n            s(l - 1) = t\n            k += 1\n            l -= 1\n        }\n        s.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sorted) {\n            \"Not possible\"\n        } else {\n            val index = digits.indexOf(sortedReverse.head)\n            val (left, right) = digits.splitAt(index)\n            val (left1, right1) = right.splitAt(1)\n            val left2 = left ::: right1\n            val right2 = left1 ::: left2.sorted\n            (left2 ::: right2).mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        val index = digits.indexOf(reversed.head)\n        val (left, right) = digits.splitAt(index)\n        val newLeft = left.dropRight(1) :+ reversed.head\n        val newRight = reversed.tail :+ left.last\n        val newDigits = newLeft ++ newRight.sorted\n        if (newDigits.head == 0) None else Some(newDigits.mkString.toLong)",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsRev = sortedDigits.reverse\n        val sortedDigitsRevMap = sortedDigitsRev.zipWithIndex.toMap\n        val sortedDigitsMap = sortedDigits.zipWithIndex.toMap\n        val digitsMap = digits.zipWithIndex.toMap\n        val digitsRevMap = digits.reverse.zipWithIndex.toMap\n        val digitsRev = digits.reverse\n        val digitsRevSorted = digitsRev.sorted\n        val digitsRevSortedMap = digitsRevSorted.zipWithIndex.toMap\n        val digitsRevSortedRevMap = digitsRevSorted.reverse.zipWithIndex.toMap\n        val digitsRevSortedRev = digitsRevSorted.reverse\n        val digitsRevSortedRevSet = digitsRevSortedRev.toSet\n        val digitsRevSortedSet = digitsRevSorted.toSet\n        val digitsRevSet = digitsRev.toSet\n        val digitsSet = digits.toSet\n        val digitsSorted = digits.sorted\n        val digitsSortedMap = digitsSorted.zipWithIndex.toMap\n        val digitsSortedRevMap = digitsSorted.reverse.zipWithIndex.toMap\n        val digitsSortedRev = digitsSorted.reverse\n        val digitsSortedRevSet = digitsSortedRev.toSet\n        val digitsSortedSet = digitsSorted.toSet\n        val digitsSetSize = digitsSet.size\n        val digitsRevSetSize = digitsRevSet.size\n        val digitsSortedSetSize = digitsSortedSet.size\n        val digitsRevSortedSetSize = digitsRevSortedSet.size\n        val digitsSortedRevSetSize = digitsSortedRevSet.size\n        val digitsRevSortedRevSetSize = digitsRevSortedRevSet.size\n        val digitsSetMax = digitsSet.max\n        val digitsRevSetMax = digitsRevSet.max\n        val digitsSortedSetMax = digitsSortedSet.max\n        val digitsRevSortedSetMax = digitsRevSortedSet.max\n        val digitsSortedRevSetMax = digitsSortedRevSet.max\n        val digits",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedTail = sortedDigitsReversed.tail\n        val sortedDigitsReversedTailHead = sortedDigitsReversedTail.head\n        val sortedDigitsReversedTailTail = sortedDigitsReversedTail.tail\n        val sortedDigitsReversedTailTailSorted = sortedDigitsReversedTailTail.sorted\n        val sortedDigitsReversedTailTailSortedReversed = sortedDigitsReversedTailTailSorted.reverse\n        val sortedDigitsReversedTailTailSortedReversedHead = sortedDigitsReversedTailTailSortedReversed.head\n        val sortedDigitsReversedTailTailSortedReversedTail = sortedDigitsReversedTailTailSortedReversed.tail\n        val sortedDigitsReversedTailTailSortedReversedTailSorted = sortedDigitsReversedTailTailSortedReversedTail.sorted\n        val sortedDigitsReversedTailTailSortedReversedTailSortedReversed = sortedDigitsReversedTailTailSortedReversedTailSorted.reverse\n        val sortedDigitsReversedTailTailSortedReversedTailSortedReversedHead = sortedDigitsReversedTailTailSortedReversedTailSortedReversed.head\n        val sortedDigitsReversedTailTailSortedReversedTailSortedReversedTail = sortedDigitsReversedTailTailSortedReversedTailSortedReversed.tail\n        val sortedDigitsReversedTailTailSortedReversedTailSortedReversedTailSorted = sortedDigitsReversedTailTailSortedReversedTailSortedReversedTail.sorted\n        val sortedDigitsReversedTailTail",
    "        val digits = n.toString.map(_.asDigit).toArray\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) {\n            -1\n        } else {\n            val (left, right) = digits.splitAt(index)\n            val min = right.min\n            val minIndex = right.indexOf(min)\n            val (left2, right2) = right.splitAt(minIndex)\n            val right3 = right2.tail.sorted\n            val result = left ++ Array(min) ++ right3\n            result.mkString.toLong\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val digitsReversed = digits.reverse\n        val digitsReversedSorted = digitsReversed.sorted\n        val digitsReversedSortedReversed = digitsReversedSorted.reverse\n        val digitsReversedSortedReversedTail = digitsReversedSortedReversed.tail\n        val digitsReversedSortedReversedTailSorted = digitsReversedSortedReversedTail.sorted\n        val digitsReversedSortedReversedTailSortedReversed = digitsReversedSortedReversedTailSorted.reverse\n        val digitsReversedSortedReversedTailSortedReversedTail = digitsReversedSortedReversedTailSortedReversed.tail\n        val digitsReversedSortedReversedTailSortedReversedTailSorted = digitsReversedSortedReversedTailSortedReversedTail.sorted\n        val digitsReversedSortedReversedTailSortedReversedTailSortedReversed = digitsReversedSortedReversedTailSortedReversedTailSorted.reverse\n        val digitsReversedSortedReversedTailSortedReversedTailSortedReversedTail = digitsReversedSortedReversedTailSortedReversedTailSortedReversed.tail\n        val digitsReversedSortedReversedTailSortedReversedTailSortedReversedTailSorted = digitsReversedSortedReversedTailSortedReversedTailSortedReversedTail.sorted\n        val digitsReversedSortedReversedTailSortedReversedTailSortedReversedTailSortedReversed = digitsReversedSortedReversedTailSortedReversedTailSortedReversedTailSorted.reverse\n        val digitsReversedSortedReversedTailSorted",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedString = sortedDigitsReversed.mkString\n        val sortedDigitsReversedInt = sortedDigitsReversedString.toInt\n        val sortedDigitsReversedLong = sortedDigitsReversedInt.toLong\n        if (sortedDigitsReversedLong == n) -1\n        else {\n            val digitsReversed = digits.reverse\n            val digitsReversedString = digitsReversed.mkString\n            val digitsReversedInt = digitsReversedString.toInt\n            val digitsReversedLong = digitsReversedInt.toLong\n            val digitsReversedSorted = digitsReversed.sorted\n            val digitsReversedSortedString = digitsReversedSorted.mkString\n            val digitsReversedSortedInt = digitsReversedSortedString.toInt\n            val digitsReversedSortedLong = digitsReversedSortedInt.toLong\n            if (digitsReversedSortedLong == n) -1\n            else {\n                val digitsReversedSortedReversed = digitsReversedSorted.reverse\n                val digitsReversedSortedReversedString = digitsReversedSortedReversed.mkString\n                val digitsReversedSortedReversedInt = digitsReversedSortedReversedString.toInt\n                val digitsReversedSortedReversedLong = digitsReversedSortedReversedInt.toLong\n                digitsReversedSortedReversedLong\n            }\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        if (digits == sorted.reverse) return -1\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val (leftSorted, rightSorted) = sorted.splitAt(sorted.length - 1)\n        val rightSortedReversed = rightSorted.reverse\n        val rightSortedReversedTail = rightSortedReversed.tail\n        val rightSortedReversedHead = rightSortedReversed.head\n        val rightSortedReversedHeadIndex = rightSorted.indexOf(rightSortedReversedHead)\n        val rightSortedReversedHeadIndexPlusOne = rightSortedReversedHeadIndex + 1\n        val rightSortedReversedHeadIndexPlusOneValue = rightSorted(rightSortedReversedHeadIndexPlusOne)\n        val rightSortedReversedHeadIndexPlusOneValueIndex = rightSortedReversed.indexOf(rightSortedReversedHeadIndexPlusOneValue)\n        val rightSortedReversedHeadIndexPlusOneValueIndexPlusOne = rightSortedReversedHeadIndexPlusOneValueIndex + 1\n        val rightSortedReversedHeadIndexPlusOneValueIndexPlusOneValue = rightSortedReversed(rightSortedReversedHeadIndexPlusOneValueIndexPlusOne)\n        val rightSortedReversedHeadIndexPlusOneValueIndexPlusOneValueIndex = rightSorted.indexOf(rightSortedReversedHeadIndexPlusOneValueIndexPlusOneValue)\n        val rightSortedReversedHeadIndexPlusOneValueIndexPlusOneValueIndexPlusOne = rightSortedReversedHeadIndexPlusOneValueIndexPlusOneValueIndex + 1\n        val rightSortedReversedHeadIndexPlusOneValueIndexPlusOneValueIndexPlusOneValue = rightSorted(rightSortedReversedHeadIndexPlusOneValueIndexPlusOneValueIndexPlusOne)\n        val rightSortedReversedHeadIndexPlusOneValueIndexPlusOneValueIndexPlusOneValueIndex = rightSortedReversed.indexOf(rightSortedReversedHeadIndexPlusOneValueIndex",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        if (digits == sortedRev) {\n            \"Not possible\"\n        } else {\n            val index = digits.indexOf(sortedRev.find(x => x > digits.head).get)\n            val (left, right) = digits.splitAt(index)\n            val newLeft = left.head :: left.tail.sorted\n            val newRight = right.tail.sorted\n            (newLeft ::: newRight).mkString.toLong\n        }",
    "        val digits = n.toString.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val sortedReverseStr = sortedReverse.mkString\n        val sortedStr = sorted.mkString\n        val nStr = n.toString\n        if (sortedStr == nStr) {\n            \"Not possible\"\n        } else if (sortedReverseStr == nStr) {\n            \"Not possible\"\n        } else {\n            val sortedReverseStrList = sortedReverseStr.toList\n            val sortedReverseStrListBuffer = sortedReverseStrList.toBuffer\n            val nStrList = nStr.toList\n            val nStrListBuffer = nStrList.toBuffer\n            val nStrListBufferSorted = nStrListBuffer.sorted\n            val nStrListBufferSortedStr = nStrListBufferSorted.mkString\n            val nStrListBufferSortedStrList = nStrListBufferSortedStr.toList\n            val nStrListBufferSortedStrListBuffer = nStrListBufferSortedStrList.toBuffer\n            val nStrListBufferSortedStrListBufferSorted = nStrListBufferSortedStrListBuffer.sorted\n            val nStrListBufferSortedStrListBufferSortedStr = nStrListBufferSortedStrListBufferSorted.mkString\n            val nStrListBufferSortedStrListBufferSortedStrList = nStrListBufferSortedStrListBufferSortedStr.toList\n            val nStrListBufferSortedStrListBufferSortedStrListBuffer = nStrListBufferSortedStrListBufferSortedStrList.toBuffer\n            val nStrListBufferSortedStrListBufferSortedStrListBufferSorted = nStrListBufferSortedStrListBufferSortedStrListBuffer.sorted\n            val nStrListBufferSortedStrListBufferSortedStrListBufferSortedStr = nStrListBufferSortedStrListBufferSortedStrListBufferSorted.mkString\n            val nStrListBufferSortedStrListBufferSortedStrListBufferSortedStrList = nStrListBufferSortedStrListBufferSortedStrListBufferSortedStr.toList\n            val n",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val (left1, right1) = right.splitAt(right.length - 1)\n        val right2 = right1.head :: right1.tail.sorted\n        val left2 = left ::: right2\n        val left3 = left2.sorted\n        if (left3 == digits) -1 else left3.mkString.toLong",
    "        val digits = n.toString.toCharArray.map(_.asDigit)\n        var i = digits.length - 1\n        while (i > 0 && digits(i - 1) >= digits(i)) i -= 1\n        if (i == 0) return -1\n        var j = digits.length - 1\n        while (digits(j) <= digits(i - 1)) j -= 1\n        val temp = digits(i - 1)\n        digits(i - 1) = digits(j)\n        digits(j) = temp\n        var k = digits.length - 1\n        while (i < k) {\n            val temp = digits(i)\n            digits(i) = digits(k)\n            digits(k) = temp\n            i += 1\n            k -= 1\n        }\n        digits.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val digitsReversed = digits.reverse\n        if (digitsReversed == sortedDigitsReversed) {\n            \"Not possible\"\n        } else {\n            val index = digitsReversed.indexWhere(x => x > sortedDigitsReversed(sortedDigitsReversed.indexOf(x) + 1))\n            val digit = digitsReversed(index)\n            val nextDigit = sortedDigitsReversed(sortedDigitsReversed.indexOf(digit) + 1)\n            val newDigits = digitsReversed.updated(index, nextDigit).updated(sortedDigitsReversed.indexOf(nextDigit), digit)\n            val newDigitsSorted = newDigits.sorted\n            val newDigitsSortedReversed = newDigitsSorted.reverse\n            val newDigitsReversed = newDigits.reverse\n            val newDigitsReversedSorted = newDigitsReversed.sorted\n            val newDigitsReversedSortedReversed = newDigitsReversedSorted.reverse\n            val newDigitsReversedSortedReversedTail = newDigitsReversedSortedReversed.tail\n            newDigitsReversedSortedReversedTail.foldLeft(newDigitsReversedSortedReversed.head.toString)((a, b) => a + b)\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted.reverse\n        if (digits == sorted) return -1\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val min = right.min\n        val index = right.indexOf(min)\n        val (left2, right2) = right.splitAt(index)\n        val (left3, right3) = left2.splitAt(left2.length - 1)\n        val left4 = left3 :+ min\n        val right4 = right3 :+ right2.head\n        val left5 = left4.sorted.reverse\n        val right5 = right4.sorted\n        val result = (left5 ::: right5).mkString.toLong\n        result",
    "        val digits = n.toString.toList.map(_.asDigit).sorted\n        if (digits.reverse == n.toString.toList.map(_.asDigit)) return -1\n        val digits2 = n.toString.toList.map(_.asDigit)\n        val index = digits2.lastIndexWhere(x => x < digits2.last)\n        val temp = digits2(index)\n        digits2(index) = digits2.last\n        digits2(digits2.length - 1) = temp\n        val temp2 = digits2.slice(index + 1, digits2.length).sorted\n        digits2.slice(0, index + 1) ++ temp2\n        digits2.mkString.toLong",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedDescending = sorted.reverse\n        if (digits == sortedDescending) return -1\n        val index = digits.indexWhere(x => x != sortedDescending(digits.indexOf(x)))\n        val (left, right) = digits.splitAt(index)\n        val next = sortedDescending(index)\n        val (left2, right2) = sortedDescending.splitAt(index)\n        val newRight = (next :: right2.tail).sorted\n        val newDigits = left ::: (next :: newRight)\n        newDigits.foldLeft(0L)((x, y) => x * 10 + y)",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedR = sorted.reverse\n        val index = digits.indexOfSlice(sortedR)\n        if (index == -1) return -1\n        val (left, right) = digits.splitAt(index)\n        val min = right.min\n        val minIndex = right.indexOf(min)\n        val (left1, right1) = right.splitAt(minIndex)\n        val right2 = right1.tail\n        val result = left ::: List(min) ::: (right2 ::: left1).sorted\n        result.mkString.toLong",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedString = sortedDigitsReversed.mkString\n        val sortedDigitsReversedLong = sortedDigitsReversedString.toLong\n        if (sortedDigitsReversedLong == n) {\n            -1\n        } else {\n            val index = digits.length - 1 - sortedDigits.indexWhere(_ > digits.last)\n            val (left, right) = digits.splitAt(index)\n            val (left1, right1) = right.splitAt(1)\n            val (left2, right2) = left1.splitAt(1)\n            val left3 = left2.head\n            val right3 = right2 ::: left3 :: right1\n            val right4 = right3.sorted\n            val result = left ::: right4\n            result.mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedIndex = sortedDigitsReversed.zipWithIndex\n        val sortedDigitsReversedIndexSorted = sortedDigitsReversedIndex.sortBy(_._1)\n        val sortedDigitsReversedIndexSortedReversed = sortedDigitsReversedIndexSorted.reverse\n        val sortedDigitsReversedIndexSortedReversedIndex = sortedDigitsReversedIndexSortedReversed.zipWithIndex\n        val sortedDigitsReversedIndexSortedReversedIndexSorted = sortedDigitsReversedIndexSortedReversedIndex.sortBy(_._2)\n        val sortedDigitsReversedIndexSortedReversedIndexSortedDigits = sortedDigitsReversedIndexSortedReversedIndexSorted.map(_._1._1)\n        val sortedDigitsReversedIndexSortedReversedIndexSortedDigitsJoined = sortedDigitsReversedIndexSortedReversedIndexSortedDigits.mkString\n        sortedDigitsReversedIndexSortedReversedIndexSortedDigitsJoined.toLong",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftReverse, rightReverse) = (left.reverse, right.reverse)\n        val (leftReverseSorted, rightReverseSorted) = (leftReverse.sorted, rightReverse.sorted)\n        val (leftReverseSortedReverse, rightReverseSortedReverse) = (leftReverseSorted.reverse, rightReverseSorted.reverse)\n        val (leftReverseSortedReverseTail, rightReverseSortedReverseTail) = (leftReverseSortedReverse.tail, rightReverseSortedReverse.tail)\n        val (leftReverseSortedReverseTailSorted, rightReverseSortedReverseTailSorted) = (leftReverseSortedReverseTail.sorted, rightReverseSortedReverseTail.sorted)\n        val (leftReverseSortedReverseTailSortedReverse, rightReverseSortedReverseTailSortedReverse) = (leftReverseSortedReverseTailSorted.reverse, rightReverseSortedReverseTailSorted.reverse)\n        val (leftReverseSortedReverseTailSortedReverseHead, rightReverseSortedReverseTailSortedReverseHead) = (leftReverseSortedReverseTailSortedReverse.head, rightReverseSortedReverseTailSortedReverse.head)\n        val (leftReverseSortedReverseTailSortedReverseTail, rightReverseSortedReverseTailSortedReverseTail) = (leftReverseSortedReverseTailSortedReverse.tail, rightR",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val maxIndex = digits.indexOf(max)\n        val min = sorted.head\n        val minIndex = digits.indexOf(min)\n        if (maxIndex == digits.length - 1) {\n            if (minIndex == 0) {\n                return -1\n            } else {\n                val newDigits = digits.updated(minIndex, max).updated(maxIndex, min)\n                return newDigits.mkString.toLong\n            }\n        } else {\n            val newDigits = digits.updated(minIndex, max).updated(maxIndex, min)\n            return newDigits.mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        if (digits == sorted.reverse) return -1\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val (leftSorted, rightSorted) = sorted.splitAt(digits.length - 1)\n        val rightSortedReversed = rightSorted.reverse\n        val rightReversed = right.reverse\n        val rightIndex = rightSortedReversed.indexWhere(_ > rightReversed.head)\n        val rightSwap = rightSortedReversed(rightIndex)\n        val rightSwapIndex = right.indexOf(rightSwap)\n        val rightSwapReversedIndex = right.length - rightSwapIndex - 1\n        val rightSwapped = right.updated(rightSwapIndex, rightReversed.head).updated(rightReversed.length - 1, rightSwap)\n        val rightSwappedReversed = rightSwapped.reverse\n        val leftSortedReversed = leftSorted.reverse\n        val leftReversed = left.reverse\n        val leftIndex = leftSortedReversed.indexWhere(_ > leftReversed.head)\n        val leftSwap = leftSortedReversed(leftIndex)\n        val leftSwapIndex = left.indexOf(leftSwap)\n        val leftSwapReversedIndex = left.length - leftSwapIndex - 1\n        val leftSwapped = left.updated(leftSwapIndex, leftReversed.head).updated(leftReversed.length - 1, leftSwap)\n        val leftSwappedReversed = leftSwapped.reverse\n        val result = (leftSwappedReversed ++ rightSwappedReversed).mkString.toLong\n        result",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        val index = digits.indexOf(reversed.head)\n        val (left, right) = digits.splitAt(index)\n        val newRight = reversed.tail ::: left\n        val newNumber = (newRight.mkString(\"\")).toLong\n        if (newNumber == n) -1 else newNumber",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted.reverse\n        if (digits == sorted) -1\n        else {\n            val (left, right) = digits.splitAt(digits.length - 1)\n            val (min, index) = right.zipWithIndex.minBy(_._1)\n            val (max, _) = left.zipWithIndex.maxBy(_._1)\n            if (min < max) {\n                val (left2, right2) = left.splitAt(index)\n                val result = (left2 :+ min) ++ (right2.tail :+ max)\n                result.mkString.toLong\n            }\n            else {\n                val (left2, right2) = left.splitAt(index + 1)\n                val result = (left2 :+ min) ++ (right2.tail :+ max)\n                result.mkString.toLong\n            }\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) {\n            -1\n        } else {\n            val (left, right) = digits.splitAt(index)\n            val (leftReverse, rightReverse) = left.reverse.splitAt(1)\n            val newLeft = leftReverse.head :: rightReverse.sorted\n            val newRight = right.sorted\n            (newLeft ::: newRight).mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) {\n            \"Not Possible\"\n        } else {\n            val index = digits.indexOf(sortedReverse.find(x => x > digits.last).get)\n            val (left, right) = digits.splitAt(index)\n            val (left2, right2) = right.splitAt(1)\n            val result = (left ::: List(right2.head) ::: left2.sorted ::: right2.tail.sorted).mkString.toLong\n            result\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val newRight = sortedReverse.tail ::: right\n        val newLeft = sortedReverse.head :: left.sorted\n        if (newRight.isEmpty) None else Some(newLeft.mkString.toLong)",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        if (digits == sortedReversed) {\n            return \"Not possible\"\n        }\n        val index = digits.indexOf(sortedReversed.head)\n        val (left, right) = digits.splitAt(index)\n        val newRight = sortedReversed.head :: right.tail.sorted\n        val newLeft = left ::: newRight\n        newLeft.mkString.toLong",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val index = digits.lastIndexWhere(_ < digits.last)\n        if (index == -1) return -1\n        val (left, right) = digits.splitAt(index)\n        val (left1, right1) = right.splitAt(right.indexWhere(_ > left.last))\n        (left ::: right1.head :: left1.sorted ::: right1.tail.sorted).mkString.toLong",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = sortedReverse.splitAt(sortedReverse.indexOf(digits(index)))\n        val result = (left ::: rightSorted.reverse) ::: leftSorted\n        if (result.head == 0) -1 else result.mkString.toLong",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) {\n            \"Not possible\"\n        } else {\n            val index = digits.indexOf(sortedReverse.head)\n            val (left, right) = digits.splitAt(index)\n            val (leftReverse, rightReverse) = (left.reverse, right.reverse)\n            val (leftReverseSorted, rightReverseSorted) = (leftReverse.sorted, rightReverse.sorted)\n            val (leftReverseSortedReverse, rightReverseSortedReverse) = (leftReverseSorted.reverse, rightReverseSorted.reverse)\n            val (leftReverseSortedReverseTail, rightReverseSortedReverseTail) = (leftReverseSortedReverse.tail, rightReverseSortedReverse.tail)\n            val (leftReverseSortedReverseTailSorted, rightReverseSortedReverseTailSorted) = (leftReverseSortedReverseTail.sorted, rightReverseSortedReverseTail.sorted)\n            val (leftReverseSortedReverseTailSortedReverse, rightReverseSortedReverseTailSortedReverse) = (leftReverseSortedReverseTailSorted.reverse, rightReverseSortedReverseTailSorted.reverse)\n            val (leftReverseSortedReverseTailSortedReverseHead, rightReverseSortedReverseTailSortedReverseHead) = (leftReverseSortedReverseTailSortedReverse.head, rightReverseSortedReverseTailSortedReverse.head)\n            val (leftReverseSortedReverseTailSortedReverseTail, rightReverseSortedReverseTailSortedReverseTail",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        if (digits == reversed) {\n            \"Not possible\"\n        } else {\n            val index = digits.indexOf(reversed.head)\n            val (a, b) = digits.splitAt(index)\n            val c = a.reverse.tail.reverse\n            val d = reversed.tail.reverse\n            (c ::: List(reversed.head) ::: d).mkString.toLong\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedTail = sortedDigitsReversed.tail\n        val sortedDigitsReversedHead = sortedDigitsReversed.head\n        val sortedDigitsReversedTailSorted = sortedDigitsReversedTail.sorted\n        val sortedDigitsReversedTailSortedReversed = sortedDigitsReversedTailSorted.reverse\n        val sortedDigitsReversedTailSortedReversedHead = sortedDigitsReversedTailSortedReversed.head\n        val sortedDigitsReversedTailSortedReversedTail = sortedDigitsReversedTailSortedReversed.tail\n        val sortedDigitsReversedTailSortedReversedTailSorted = sortedDigitsReversedTailSortedReversedTail.sorted\n        val sortedDigitsReversedTailSortedReversedTailSortedReversed = sortedDigitsReversedTailSortedReversedTailSorted.reverse\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedHead = sortedDigitsReversedTailSortedReversedTailSortedReversed.head\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedTail = sortedDigitsReversedTailSortedReversedTailSortedReversed.tail\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedTailSorted = sortedDigitsReversedTailSortedReversedTailSortedReversedTail.sorted\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedTailSortedReversed = sortedDigitsReversedTailSortedReversedTailSortedReversedTailSorted.reverse\n        val sortedDigitsReversedTailSortedReversedTailSorted",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        if (digits == sortedDigits.reverse) {\n            \"Not possible\"\n        } else {\n            val index = digits.indexWhere(x => x < digits.drop(digits.indexOf(x)).max)\n            val max = digits.drop(index).max\n            val maxIndex = digits.indexOf(max)\n            val newDigits = digits.updated(maxIndex, digits(index)).updated(index, max)\n            val newDigitsSorted = newDigits.drop(index + 1).sorted\n            (newDigits.take(index + 1) ++ newDigitsSorted).mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) -1 else digits.slice(0, index) ++ sortedReverse",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        val index = digits.indexOf(sortedReversed.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReversed, rightSortedReversed) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReversedTail, rightSortedReversedHead) = (leftSortedReversed.tail, rightSortedReversed.head)\n        val (leftSortedReversedTailSorted, rightSortedReversedHeadSorted) = (leftSortedReversedTail.sorted, rightSortedReversedHead.sorted)\n        val (leftSortedReversedTailSortedReversed, rightSortedReversedHeadSortedReversed) = (leftSortedReversedTailSorted.reverse, rightSortedReversedHeadSortedReversed.reverse)\n        val (leftSortedReversedTailSortedReversedHead, rightSortedReversedHeadSortedReversedHead) = (leftSortedReversedTailSortedReversed.head, rightSortedReversedHeadSortedReversed.head)\n        val (leftSortedReversedTailSortedReversedTail, rightSortedReversedHeadSortedReversedTail) = (leftSortedReversedTailSortedReversed.tail, rightSortedReversedHeadSortedReversed.tail)\n        val (leftSortedReversedTailSortedReversedTailSorted, rightSortedReversedHeadSortedReversedTailSorted) = (leftSortedReversedTailSortedReversedTail.sorted, rightSortedReversedHeadSortedReversedTail.sorted)\n        val (leftSortedReversedTailSortedReversedTail",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        if (digits == sorted.reverse) return -1\n        val (left, right) = digits.splitAt(digits.length - 2)\n        val (min, max) = (left.last, right.min)\n        val (left2, right2) = left.splitAt(left.length - 1)\n        val left3 = left2 :+ max\n        val right3 = right.filter(_ != max) :+ min\n        val result = (left3 ::: right3).mkString.toLong\n        result",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedString = sortedDigitsReversed.mkString\n        val sortedDigitsReversedLong = sortedDigitsReversedString.toLong\n        if (sortedDigitsReversedLong == n) -1\n        else sortedDigitsReversedLong",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val max = sorted.last\n        val maxIndex = digits.indexOf(max)\n        val min = sorted.head\n        val minIndex = digits.indexOf(min)\n        if (minIndex == maxIndex) return -1\n        val newDigits = digits.updated(minIndex, max).updated(maxIndex, min)\n        newDigits.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReverse = sortedDigits.reverse\n        val digitsReverse = digits.reverse\n        if (digitsReverse == sortedDigitsReverse) {\n            \"Not possible\"\n        } else {\n            val index = digitsReverse.zipWithIndex.find(x => x._1 != sortedDigitsReverse(x._2)).get._2\n            val (left, right) = digitsReverse.splitAt(index)\n            val leftReverse = left.reverse\n            val rightReverse = right.reverse\n            val min = rightReverse.min\n            val minIndex = rightReverse.indexOf(min)\n            val (leftMin, rightMin) = rightReverse.splitAt(minIndex)\n            val leftMinReverse = leftMin.reverse\n            val rightMinReverse = rightMin.reverse\n            val newRight = min :: leftMinReverse ::: rightMinReverse.tail\n            val newLeft = leftReverse ::: newRight.reverse\n            newLeft.mkString.toLong\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        val index = digits.indexOf(reversed.head)\n        val (left, right) = digits.splitAt(index)\n        val newDigits = left ::: reversed.tail ::: List(reversed.head)\n        newDigits.mkString.toLong",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val sortedRight = right.sorted\n        val min = sortedRight.head\n        val max = sortedRight.last\n        if (min < max) {\n            val (left2, right2) = sortedRight.splitAt(sortedRight.indexOf(max))\n            val newRight = min :: right2.tail\n            val newDigits = left ::: newRight\n            newDigits.mkString.toLong\n        } else {\n            val (left2, right2) = left.splitAt(left.length - 1)\n            val newLeft = left2 ::: List(left.last, right.head)\n            val newRight = right2.tail.sorted\n            val newDigits = newLeft ::: newRight\n            newDigits.mkString.toLong\n        }",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedTail = sortedDigitsReversed.tail\n        val sortedDigitsReversedTailSorted = sortedDigitsReversedTail.sorted\n        val sortedDigitsReversedTailSortedReversed = sortedDigitsReversedTailSorted.reverse\n        val sortedDigitsReversedTailSortedReversedHead = sortedDigitsReversedTailSortedReversed.head\n        val sortedDigitsReversedHead = sortedDigitsReversed.head\n        val sortedDigitsReversedTailSortedReversedHeadIndex = sortedDigitsReversedTailSortedReversed.indexOf(sortedDigitsReversedTailSortedReversedHead)\n        val sortedDigitsReversedTailSortedReversedHeadIndexPlusOne = sortedDigitsReversedTailSortedReversedHeadIndex + 1\n        val sortedDigitsReversedTailSortedReversedHeadIndexPlusOneToEnd = sortedDigitsReversedTailSortedReversed.slice(sortedDigitsReversedTailSortedReversedHeadIndexPlusOne, sortedDigitsReversedTailSortedReversed.length)\n        val sortedDigitsReversedTailSortedReversedHeadIndexPlusOneToEndSorted = sortedDigitsReversedTailSortedReversedHeadIndexPlusOneToEnd.sorted\n        val sortedDigitsReversedTailSortedReversedHeadIndexPlusOneToEndSortedReversed = sortedDigitsReversedTailSortedReversedHeadIndexPlusOneToEndSorted.reverse\n        val sortedDigitsReversedTailSortedReversedHeadIndexPlusOneToEndSortedReversedHead = sortedDigitsReversedTailSortedReversedHeadIndexPlusOneToEndSortedReversed.head\n        val sortedDigitsReversedTailSortedReversedHeadIndexPlusOneToEnd",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val leftSortedReverseTail = leftSortedReverse.tail\n        val rightSortedReverseTail = rightSortedReverse.tail\n        val newLeft = leftSortedReverse.head :: leftSortedReverseTail\n        val newRight = rightSortedReverse.head :: rightSortedReverseTail\n        val newDigits = newLeft ::: newRight\n        val newDigitsString = newDigits.mkString\n        val newNumber = newDigitsString.toLong\n        if (newNumber > n) newNumber else -1",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedString = sortedDigitsReversed.mkString(\"\")\n        val sortedDigitsString = sortedDigits.mkString(\"\")\n        val sortedDigitsReversedLong = sortedDigitsReversedString.toLong\n        val sortedDigitsLong = sortedDigitsString.toLong\n        if (sortedDigitsReversedLong == n) {\n            \"Not possible\"\n        } else {\n            sortedDigitsReversedLong\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftReverse, rightReverse) = left.reverse.splitAt(1)\n        val newLeft = leftReverse.head :: rightReverse\n        val newRight = sortedReverse.tail\n        val newDigits = newLeft ::: newRight\n        if (newDigits.head == 0) -1 else newDigits.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) {\n            -1\n        } else {\n            val index = digits.lastIndexWhere(digits(_) < digits.last)\n            val (left, right) = digits.splitAt(index)\n            val min = sortedReverse.filter(right.contains(_)).min\n            val (left2, right2) = right.partition(_ == min)\n            val (left3, right3) = left2.partition(_ < min)\n            val result = (left3 :+ min) ++ right2 ++ right3 ++ left\n            result.mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val sortedRevStr = sortedRev.mkString\n        val nStr = n.toString\n        if (nStr == sortedRevStr) return -1\n        val index = sortedRev.indexOf(digits.last)\n        val last = sortedRev(index - 1)\n        val lastIndex = digits.indexOf(last)\n        val (left, right) = digits.splitAt(lastIndex)\n        val newLeft = left.dropRight(1) :+ digits.last\n        val newRight = right.dropRight(1) :+ last\n        val newDigits = newLeft ++ newRight.sorted\n        newDigits.mkString.toLong",
    "        val digits = n.toString.map(_.asDigit).toList\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val rightSorted = right.sorted\n        val rightSortedIndex = rightSorted.indexOf(right.head)\n        val rightSortedHead = rightSorted(rightSortedIndex)\n        val rightSortedTail = rightSorted.take(rightSortedIndex) ++ rightSorted.drop(rightSortedIndex + 1)\n        val rightSortedTailSorted = rightSortedTail.sorted\n        val result = left ++ List(rightSortedHead) ++ rightSortedTailSorted\n        if (result.head == 0) -1 else result.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        if (digits == sorted.reverse) return -1\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val (left, right) = digits.splitAt(index)\n        val min = right.min\n        val minIndex = right.indexOf(min)\n        val newRight = right.updated(minIndex, right(right.length - 1))\n        val newLeft = left ::: newRight.updated(newRight.length - 1, right(index))\n        newLeft.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOf(sortedRev(0))\n        val (left, right) = digits.splitAt(index)\n        val newRight = sortedRev.drop(1) ::: left\n        val newNum = (newRight ::: right).mkString.toLong\n        if (newNum > n) newNum else -1",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted.reverse\n        if (digits == sortedDigits) {\n            \"Not possible\"\n        } else {\n            val index = digits.zipWithIndex.find(x => x._1 != sortedDigits(x._2)).get._2\n            val (first, second) = digits.splitAt(index)\n            val (first1, second1) = second.splitAt(1)\n            val (first2, second2) = second1.splitAt(1)\n            val (first3, second3) = second2.splitAt(1)\n            val (first4, second4) = second3.splitAt(1)\n            val (first5, second5) = second4.splitAt(1)\n            val (first6, second6) = second5.splitAt(1)\n            val (first7, second7) = second6.splitAt(1)\n            val (first8, second8) = second7.splitAt(1)\n            val (first9, second9) = second8.splitAt(1)\n            val (first10, second10) = second9.splitAt(1)\n            val (first11, second11) = second10.splitAt(1)\n            val (first12, second12) = second11.splitAt(1)\n            val (first13, second13) = second12.splitAt(1)\n            val (first14, second14) = second13.splitAt(1)\n            val (first15, second15) = second14.splitAt(1)\n            val (first16, second16) = second15.splitAt(1)\n            val (first17, second17) = second16.splitAt(1)\n            val (first18, second18) = second17.splitAt(1)\n            val (first19, second19) = second18.splitAt(1)\n            val (first20, second20) = second19.splitAt(1)\n            val (first21, second21) = second20.splitAt(1)\n            val (first22, second22) = second21",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val index = digits.lastIndexWhere(_ < digits.last)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val min = right.min\n            val minIndex = right.indexOf(min)\n            val newRight = right.updated(minIndex, right.last).dropRight(1)\n            val newLeft = left :+ min\n            (newLeft ::: newRight).mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val index = digits.indexOf(max)\n        val (left, right) = digits.splitAt(index)\n        val next = sorted.filter(_ > max).min\n        val nextIndex = sorted.indexOf(next)\n        val (left2, right2) = sorted.splitAt(nextIndex)\n        val newLeft = left2 ++ right2.tail\n        val newRight = right.sorted\n        val newDigits = left ++ List(next) ++ newLeft ++ newRight\n        if (newDigits.head == 0) -1 else newDigits.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) -1\n        else {\n            val index = digits.indexOf(sortedReverse.find(x => x > digits.last).get)\n            val (a, b) = digits.splitAt(index)\n            val c = a.filter(_ != sortedReverse(index))\n            val d = b.filter(_ != sortedReverse(index))\n            val e = c ::: List(sortedReverse(index)) ::: d\n            e.mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOf(sortedRev.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedRev, rightSortedRev) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedRevTail, rightSortedRevTail) = (leftSortedRev.tail, rightSortedRev.tail)\n        val (leftSortedRevTailSorted, rightSortedRevTailSorted) = (leftSortedRevTail.sorted, rightSortedRevTail.sorted)\n        val leftSortedRevTailSortedRev = leftSortedRevTailSorted.reverse\n        val rightSortedRevTailSortedRev = rightSortedRevTailSorted.reverse\n        val leftSortedRevTailSortedRevHead = leftSortedRevTailSortedRev.head\n        val rightSortedRevTailSortedRevHead = rightSortedRevTailSortedRev.head\n        val leftSortedRevTailSortedRevHeadIndex = leftSortedRevTailSortedRev.indexOf(rightSortedRevTailSortedRevHead)\n        val leftSortedRevTailSortedRevHeadIndexPlusOne = leftSortedRevTailSortedRevHeadIndex + 1\n        val (leftSortedRevTailSortedRevHeadLeft, leftSortedRevTailSortedRevHeadRight) = leftSortedRevTailSortedRev.splitAt(leftSortedRevTailSortedRevHeadIndexPlusOne)\n        val leftSortedRevTailSortedRevHeadLeftSorted = leftSortedRevTailSortedRevHeadLeft.sorted\n        val leftSortedRevTailSortedRevHeadLeftSortedRev = leftSortedRevTailSortedRevHeadLeftSorted.reverse\n        val leftSortedRevTailSortedRevHeadLeftSortedRevHead = leftSortedRevTailSorted",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val (left, right) = digits.span(_ != sortedDigitsReversed.head)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val leftSortedReversed = leftSorted.reverse\n        val rightSortedReversed = rightSorted.reverse\n        val (leftSortedReversedHead, leftSortedReversedTail) = (leftSortedReversed.head, leftSortedReversed.tail)\n        val (rightSortedReversedHead, rightSortedReversedTail) = (rightSortedReversed.head, rightSortedReversed.tail)\n        if (leftSortedReversedHead > rightSortedReversedHead) {\n            val newLeft = leftSortedReversedHead :: leftSortedReversedTail\n            val newRight = rightSortedReversedHead :: rightSortedReversedTail\n            val newLeftSorted = newLeft.sorted\n            val newRightSorted = newRight.sorted\n            val newLeftSortedReversed = newLeftSorted.reverse\n            val newRightSortedReversed = newRightSorted.reverse\n            val newDigits = newLeftSortedReversed ++ newRightSortedReversed\n            newDigits.mkString.toLong\n        } else {\n            -1\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val rightSorted = right.sorted\n        val rightSortedReverse = rightSorted.reverse\n        val rightSortedReverseTail = rightSortedReverse.tail\n        val rightSortedReverseHead = rightSortedReverse.head\n        val rightSortedReverseHeadIndex = right.indexOf(rightSortedReverseHead)\n        val (rightLeft, rightRight) = right.splitAt(rightSortedReverseHeadIndex)\n        val rightLeftSorted = rightLeft.sorted\n        val rightLeftSortedReverse = rightLeftSorted.reverse\n        val rightLeftSortedReverseTail = rightLeftSortedReverse.tail\n        val rightLeftSortedReverseHead = rightLeftSortedReverse.head\n        val rightLeftSortedReverseHeadIndex = rightLeft.indexOf(rightLeftSortedReverseHead)\n        val (rightLeftLeft, rightLeftRight) = rightLeft.splitAt(rightLeftSortedReverseHeadIndex)\n        val rightLeftLeftSorted = rightLeftLeft.sorted\n        val rightLeftLeftSortedReverse = rightLeftLeftSorted.reverse\n        val rightLeftLeftSortedReverseTail = rightLeftLeftSortedReverse.tail\n        val rightLeftLeftSortedReverseHead = rightLeftLeftSortedReverse.head\n        val rightLeftLeftSortedReverseHeadIndex = rightLeftLeft.indexOf(rightLeftLeftSortedReverseHead)\n        val (rightLeftLeftLeft, rightLeftLeftRight) = rightLeftLeft.splitAt(rightLeftLeftSortedReverseHeadIndex)\n        val rightLeftLeftLeftSorted = rightLeftLeftLeft.sorted\n        val rightLeftLeftLeftSortedReverse = rightLeftLeftLeftSorted.reverse\n        val rightLeftLeftLeftSortedRever",
    "        def nextPermutation(n : Long) : Long = {\n            val digits = n.toString.map(_.asDigit).toArray\n            var i = digits.length - 1\n            while (i > 0 && digits(i - 1) >= digits(i)) i -= 1\n            if (i == 0) return -1\n            var j = digits.length - 1\n            while (digits(j) <= digits(i - 1)) j -= 1\n            val temp = digits(i - 1)\n            digits(i - 1) = digits(j)\n            digits(j) = temp\n            j = digits.length - 1\n            while (i < j) {\n                val temp = digits(i)\n                digits(i) = digits(j)\n                digits(j) = temp\n                i += 1\n                j -= 1\n            }\n            digits.mkString.toLong\n        }\n        val next = nextPermutation(n)\n        if (next == -1) \"Not Possible\" else next",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseHead, rightSortedReverseHead) = (leftSortedReverse.head, rightSortedReverse.head)\n        val leftSortedReverseTailSorted = leftSortedReverseTail.sorted\n        val leftSortedReverseTailSortedReverse = leftSortedReverseTailSorted.reverse\n        val leftSortedReverseTailSortedReverseHead = leftSortedReverseTailSortedReverse.head\n        val leftSortedReverseTailSortedReverseTail = leftSortedReverseTailSortedReverse.tail\n        val leftSortedReverseTailSortedReverseTailSorted = leftSortedReverseTailSortedReverseTail.sorted\n        val leftSortedReverseTailSortedReverseTailSortedReverse = leftSortedReverseTailSortedReverseTailSorted.reverse\n        val leftSortedReverseTailSortedReverseTailSortedReverseHead = leftSortedReverseTailSortedReverseTailSortedReverse.head\n        val leftSortedReverseTailSortedReverseTailSortedReverseTail = leftSortedReverseTailSortedReverseTailSortedReverse.tail\n       ",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val index = digits.indexOf(sorted.last)\n        val (left, right) = digits.splitAt(index)\n        val newRight = sorted.filter(x => !right.contains(x))\n        val newLeft = left :+ newRight.head\n        val result = (newLeft ::: newRight.tail).mkString.toLong\n        if (result == n) \"Not possible\" else result",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val reversed = sorted.reverse\n        val reversedDigits = reversed.map(_.toString).mkString.toLong\n        if (reversedDigits == n) \"Not possible\"\n        else {\n            val index = digits.indexOf(reversed.head)\n            val (first, second) = digits.splitAt(index)\n            val newFirst = first :+ reversed.head\n            val newSecond = reversed.tail ::: second\n            val newDigits = newFirst ::: newSecond.sorted\n            newDigits.map(_.toString).mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) return -1\n        val index = digits.lastIndexWhere(digits(_) < digits.last)\n        val (left, right) = digits.splitAt(index)\n        val rightSorted = right.sorted\n        val rightSortedReverse = rightSorted.reverse\n        val rightSortedReverseTail = rightSortedReverse.tail\n        val newRight = rightSortedReverse.head :: rightSortedReverseTail.sorted\n        val newDigits = left ::: newRight\n        newDigits.mkString.toLong",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val sortedRight = right.sorted\n        if (sortedRight.head > right.head) {\n            val newRight = sortedRight.filter(_ != right.head)\n            val newDigits = left ::: (right.head :: newRight)\n            newDigits.mkString.toLong\n        } else {\n            val newLeft = left.init\n            val newRight = (left.last :: sortedRight).sorted\n            val newDigits = newLeft ::: newRight\n            newDigits.mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseHead, rightSortedReverseHead) = (leftSortedReverse.head, rightSortedReverse.head)\n        val leftSortedReverseHeadIndex = rightSortedReverse.indexOf(leftSortedReverseHead)\n        val (rightSortedReverseHeadLeft, rightSortedReverseHeadRight) = rightSortedReverse.splitAt(leftSortedReverseHeadIndex)\n        val rightSortedReverseHeadLeftSorted = rightSortedReverseHeadLeft.sorted\n        val rightSortedReverseHeadLeftSortedReverse = rightSortedReverseHeadLeftSorted.reverse\n        val rightSortedReverseHeadLeftSortedReverseTail = rightSortedReverseHeadLeftSortedReverse.tail\n        val rightSortedReverseHeadLeftSortedReverseHead = rightSortedReverseHeadLeftSortedReverse.head\n        val rightSortedReverseHeadLeftSortedReverseHeadIndex = rightSortedReverseHeadRight.indexOf(rightSortedReverseHeadLeftSortedReverseHead)\n        val (rightSortedReverseHeadLeftSortedReverseHeadLeft, rightSortedReverseHeadLeftSortedReverseHeadRight) = rightSortedReverseHeadRight.splitAt(rightSortedReverseHeadLeftSorted",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val max = sorted.last\n        val maxIndex = digits.indexOf(max)\n        val maxIndex2 = digits.lastIndexOf(max)\n        val maxIndex3 = digits.indexOf(max, maxIndex + 1)\n        val maxIndex4 = digits.lastIndexOf(max, maxIndex - 1)\n        val maxIndex5 = digits.indexOf(max, maxIndex3 + 1)\n        val maxIndex6 = digits.lastIndexOf(max, maxIndex3 - 1)\n        val maxIndex7 = digits.indexOf(max, maxIndex5 + 1)\n        val maxIndex8 = digits.lastIndexOf(max, maxIndex5 - 1)\n        val maxIndex9 = digits.indexOf(max, maxIndex7 + 1)\n        val maxIndex10 = digits.lastIndexOf(max, maxIndex7 - 1)\n        val maxIndex11 = digits.indexOf(max, maxIndex9 + 1)\n        val maxIndex12 = digits.lastIndexOf(max, maxIndex9 - 1)\n        val maxIndex13 = digits.indexOf(max, maxIndex11 + 1)\n        val maxIndex14 = digits.lastIndexOf(max, maxIndex11 - 1)\n        val maxIndex15 = digits.indexOf(max, maxIndex13 + 1)\n        val maxIndex16 = digits.lastIndexOf(max, maxIndex13 - 1)\n        val maxIndex17 = digits.indexOf(max, maxIndex15 + 1)\n        val maxIndex18 = digits.lastIndexOf(max, maxIndex15 - 1)\n        val maxIndex19 = digits.indexOf(max, maxIndex17 + 1)\n        val maxIndex20 = digits.lastIndexOf(max, maxIndex17 - 1)\n        val maxIndex21 = digits.indexOf(max, maxIndex19 + 1)\n        val maxIndex22 = digits.lastIndexOf(max, maxIndex19 - 1)\n        val maxIndex23 = digits.indexOf(max, maxIndex21 + 1)\n        val maxIndex24 = digits.lastIndexOf(max, maxIndex21 - 1",
    "        val digits = n.toString.toArray.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) return -1\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val digit = digits(index)\n        val newDigits = digits.updated(index, digits.last).updated(digits.length - 1, digit)\n        val sortedNewDigits = newDigits.sorted\n        val sortedNewDigitsReverse = sortedNewDigits.reverse\n        val result = sortedNewDigitsReverse.mkString.toLong\n        result",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted.reverse\n        if (digits == sorted) return -1\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val (left, right) = digits.splitAt(index)\n        val min = right.min\n        val minIndex = right.indexOf(min)\n        val newRight = right.updated(minIndex, digits(index))\n        val newLeft = left.updated(index, min)\n        (newLeft ++ newRight).mkString.toLong",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        if (digits == sortedDigitsReversed) {\n            \"Not possible\"\n        } else {\n            val index = digits.indexOf(sortedDigitsReversed.head)\n            val (left, right) = digits.splitAt(index)\n            val newLeft = left.dropRight(1) :+ sortedDigitsReversed.head\n            val newRight = sortedDigitsReversed.tail ::: right\n            (newLeft ::: newRight).mkString.toLong\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val digitsReversed = digits.reverse\n        val sortedDigitsReversedTail = sortedDigitsReversed.tail\n        val sortedDigitsReversedTailSorted = sortedDigitsReversedTail.sorted\n        val sortedDigitsReversedTailSortedReversed = sortedDigitsReversedTailSorted.reverse\n        val sortedDigitsReversedTailSortedReversedTail = sortedDigitsReversedTailSortedReversed.tail\n        val sortedDigitsReversedTailSortedReversedTailSorted = sortedDigitsReversedTailSortedReversedTail.sorted\n        val sortedDigitsReversedTailSortedReversedTailSortedReversed = sortedDigitsReversedTailSortedReversedTailSorted.reverse\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedTail = sortedDigitsReversedTailSortedReversedTailSortedReversed.tail\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedTailSorted = sortedDigitsReversedTailSortedReversedTailSortedReversedTail.sorted\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedTailSortedReversed = sortedDigitsReversedTailSortedReversedTailSortedReversedTailSorted.reverse\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedTailSortedReversedTail = sortedDigitsReversedTailSortedReversedTailSortedReversedTailSortedReversed.tail\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedTailSortedReversedTailSorted = sortedDigitsReversedTailSortedRe",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) {\n            \"Not possible\"\n        } else {\n            val index = digits.indexOf(sortedReverse.head)\n            val (left, right) = digits.splitAt(index)\n            val newRight = sortedReverse.head :: right.tail.sorted\n            (left ::: newRight).mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftReverse, rightReverse) = left.reverse.splitAt(left.length - 1)\n        val leftReverseSorted = leftReverse.sorted\n        val rightReverseSorted = rightReverse.sorted\n        val newDigits = leftReverseSorted ++ rightReverseSorted\n        val newDigitsString = newDigits.mkString\n        if (newDigitsString.length == digits.length) newDigitsString.toLong else -1",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        val sortedReversedIndices = sortedReversed.map(digits.indexOf(_))\n        val sortedReversedIndicesReversed = sortedReversedIndices.reverse\n        val sortedReversedIndicesReversedTail = sortedReversedIndicesReversed.tail\n        val sortedReversedIndicesReversedTailHead = sortedReversedIndicesReversedTail.head\n        val sortedReversedIndicesReversedTailHeadIndex = sortedReversedIndicesReversed.indexOf(sortedReversedIndicesReversedTailHead)\n        val sortedReversedIndicesReversedTailHeadIndexPlusOne = sortedReversedIndicesReversedTailHeadIndex + 1\n        val sortedReversedIndicesReversedTailHeadIndexPlusOneValue = sortedReversedIndicesReversed(sortedReversedIndicesReversedTailHeadIndexPlusOne)\n        val sortedReversedIndicesReversedTailHeadIndexPlusOneValueIndex = sortedReversedIndicesReversedTail.indexOf(sortedReversedIndicesReversedTailHeadIndexPlusOneValue)\n        val sortedReversedIndicesReversedTailHeadIndexPlusOneValueIndexPlusOne = sortedReversedIndicesReversedTailHeadIndexPlusOneValueIndex + 1\n        val sortedReversedIndicesReversedTailHeadIndexPlusOneValueIndexPlusOneValue = sortedReversedIndicesReversedTail(sortedReversedIndicesReversedTailHeadIndexPlusOneValueIndexPlusOne)\n        val sortedReversedIndicesReversedTailHeadIndexPlusOneValueIndexPlusOneValueIndex = sortedReversedIndicesReversed.indexOf(sortedReversedIndicesReversedTailHeadIndexPlusOneValueIndexPlusOneValue)\n        val sortedReversedIndicesReversedTailHeadIndexPlusOneValueIndexPlusOneValueIndexPlusOne = sortedReversedIndicesRe",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val digitsReversed = digits.reverse\n        val index = digitsReversed.indexWhere(x => x < sortedDigitsReversed(digitsReversed.indexOf(x)))\n        if (index == -1) -1\n        else {\n            val (left, right) = digitsReversed.splitAt(index)\n            val (left1, right1) = right.splitAt(1)\n            val right2 = right1.tail\n            val left2 = left ::: left1 ::: right2\n            val left3 = left2.sorted\n            val left4 = left3.reverse\n            val result = left4.mkString.toLong\n            result\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (leftReverse, rightReverse) = (left.reverse, right.reverse)\n            val (leftSorted, rightSorted) = (leftReverse.sorted, rightReverse.sorted)\n            val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n            val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n            val (leftSortedReverseTailReverse, rightSortedReverseTailReverse) = (leftSortedReverseTail.reverse, rightSortedReverseTail.reverse)\n            val (leftSortedReverseTailReverseSorted, rightSortedReverseTailReverseSorted) = (leftSortedReverseTailReverse.sorted, rightSortedReverseTailReverse.sorted)\n            val (leftSortedReverseTailReverseSortedReverse, rightSortedReverseTailReverseSortedReverse) = (leftSortedReverseTailReverseSorted.reverse, rightSortedReverseTailReverseSorted.reverse)\n            val (leftSortedReverseTailReverseSortedReverseHead, rightSortedReverseTailReverseSortedReverseHead) = (leftSortedReverseTailReverseSortedReverse.head, rightSortedReverseTailReverseSortedReverse.head)\n            val (leftSortedReverseTailReverseSortedReverseTail, rightSortedR",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val rightSorted = right.sorted\n        val rightSortedReversed = rightSorted.reverse\n        val leftSorted = left.sorted\n        val leftSortedReversed = leftSorted.reverse\n        val leftSortedReversedTail = leftSortedReversed.tail\n        val leftSortedReversedTailSorted = leftSortedReversedTail.sorted\n        val leftSortedReversedTailSortedReversed = leftSortedReversedTailSorted.reverse\n        val leftSortedReversedTailSortedReversedTail = leftSortedReversedTailSortedReversed.tail\n        val leftSortedReversedTailSortedReversedTailSorted = leftSortedReversedTailSortedReversedTail.sorted\n        val leftSortedReversedTailSortedReversedTailSortedReversed = leftSortedReversedTailSortedReversedTailSorted.reverse\n        val leftSortedReversedTailSortedReversedTailSortedReversedTail = leftSortedReversedTailSortedReversedTailSortedReversed.tail\n        val leftSortedReversedTailSortedReversedTailSortedReversedTailSorted = leftSortedReversedTailSortedReversedTailSortedReversedTail.sorted\n        val leftSortedReversedTailSortedReversedTailSortedReversedTailSortedReversed = leftSortedReversedTailSortedReversedTailSortedReversedTailSorted.reverse\n        val leftSortedReversedTailSortedReversedTailSortedReversedTailSortedReversedTail = leftSortedReversedTailSortedReversedTailSortedReversedTailSortedReversed.tail\n        val leftSortedReversed",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReverse = sortedDigits.reverse\n        val sortedDigitsReverseString = sortedDigitsReverse.mkString\n        val sortedDigitsReverseStringLong = sortedDigitsReverseString.toLong\n        if (sortedDigitsReverseStringLong == n) {\n            \"Not possible\"\n        } else {\n            sortedDigitsReverseStringLong\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        val sortedReversedTail = sortedReversed.tail\n        val sortedReversedTailSorted = sortedReversedTail.sorted\n        val sortedReversedTailSortedReversed = sortedReversedTailSorted.reverse\n        val sortedReversedTailSortedReversedHead = sortedReversedTailSortedReversed.head\n        val sortedReversedTailSortedReversedTail = sortedReversedTailSortedReversed.tail\n        val sortedReversedTailSortedReversedTailSorted = sortedReversedTailSortedReversedTail.sorted\n        val sortedReversedTailSortedReversedTailSortedReversed = sortedReversedTailSortedReversedTailSorted.reverse\n        val sortedReversedTailSortedReversedTailSortedReversedHead = sortedReversedTailSortedReversedTailSortedReversed.head\n        val sortedReversedTailSortedReversedTailSortedReversedTail = sortedReversedTailSortedReversedTailSortedReversed.tail\n        val sortedReversedTailSortedReversedTailSortedReversedTailSorted = sortedReversedTailSortedReversedTailSortedReversedTail.sorted\n        val sortedReversedTailSortedReversedTailSortedReversedTailSortedReversed = sortedReversedTailSortedReversedTailSortedReversedTailSorted.reverse\n        val sortedReversedTailSortedReversedTailSortedReversedTailSortedReversedHead = sortedReversedTailSortedReversedTailSortedReversedTailSortedReversed.head\n        val sortedReversedTailSortedReversedTailSortedReversedTailSortedReversedTail =",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val rightSorted = right.sorted\n        if (rightSorted == right) return -1\n        val rightSortedMin = rightSorted.min\n        val rightSortedMinIndex = right.indexOf(rightSortedMin)\n        val rightSortedMinIndexInSorted = rightSorted.indexOf(rightSortedMin)\n        val rightSortedMinSwapped = rightSorted.updated(rightSortedMinIndexInSorted, right(rightSortedMinIndex))\n        val rightSortedMinSwappedSorted = rightSortedMinSwapped.sorted\n        val leftRightSortedMinSwappedSorted = left ++ rightSortedMinSwappedSorted\n        leftRightSortedMinSwappedSorted.mkString.toLong",
    "        def rearrange(n : Long, digits : List[Int]) : Any = {\n            if (digits.length == 1) None\n            else {\n                val (left, right) = digits.splitAt(digits.length - 1)\n                val rightSorted = right.sorted\n                val rightSortedMin = rightSorted.min\n                val rightSortedMinIndex = right.indexOf(rightSortedMin)\n                val rightSortedMinIndexInSorted = rightSorted.indexOf(rightSortedMin)\n                val rightSortedMinIndexInSortedPlusOne = rightSortedMinIndexInSorted + 1\n                val rightSortedMinIndexInSortedPlusOneValue = rightSorted(rightSortedMinIndexInSortedPlusOne)\n                val rightSortedMinIndexInSortedPlusOneValueIndex = right.indexOf(rightSortedMinIndexInSortedPlusOneValue)\n                val rightSortedMinIndexInSortedPlusOneValueIndexPlusOne = rightSortedMinIndexInSortedPlusOneValueIndex + 1\n                val rightSortedMinIndexInSortedPlusOneValueIndexPlusOneValue = right(rightSortedMinIndexInSortedPlusOneValueIndexPlusOne)\n                val rightSortedMinIndexInSortedPlusOneValueIndexPlusOneValueIndex = right.indexOf(rightSortedMinIndexInSortedPlusOneValueIndexPlusOneValue)\n                val rightSortedMinIndexInSortedPlusOneValueIndexPlusOneValueIndexPlusOne = rightSortedMinIndexInSortedPlusOneValueIndexPlusOneValueIndex + 1\n                val rightSortedMinIndexInSortedPlusOneValueIndexPlusOneValueIndexPlusOneValue = right(rightSortedMinIndexInSortedPlusOneValueIndexPlusOneValueIndexPlusOne)\n                val rightSortedMinIndexInSortedPlusOneValueIndexPlusOneValueIndexPlusOneValueIndex = right.indexOf(rightSortedMinIndexInSortedPlusOneValueIndexPlusOneValueIndexPlusOneValue)\n                val rightSortedMinIndexInSortedPlusOneValueIndexPlusOneValueIndexPlusOneValueIndexPlusOne = rightSortedMinIndexInSortedPlusOneValueIndexPlusOneValueIndexPlusOneValueIndex + 1\n                val rightSortedMinIndexInSorted",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        val index = digits.indexOf(sortedReversed.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReversed, rightSortedReversed) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReversedTail, rightSortedReversedTail) = (leftSortedReversed.tail, rightSortedReversed.tail)\n        val (leftSortedReversedTailSorted, rightSortedReversedTailSorted) = (leftSortedReversedTail.sorted, rightSortedReversedTail.sorted)\n        val (leftSortedReversedTailSortedReversed, rightSortedReversedTailSortedReversed) = (leftSortedReversedTailSorted.reverse, rightSortedReversedTailSorted.reverse)\n        val (leftSortedReversedTailSortedReversedTail, rightSortedReversedTailSortedReversedTail) = (leftSortedReversedTailSortedReversed.tail, rightSortedReversedTailSortedReversed.tail)\n        val (leftSortedReversedTailSortedReversedTailSorted, rightSortedReversedTailSortedReversedTailSorted) = (leftSortedReversedTailSortedReversedTail.sorted, rightSortedReversedTailSortedReversedTail.sorted)\n        val (leftSortedReversedTailSortedReversedTailSortedReversed, rightSortedReversedTailSortedReversedTailSortedReversed) = (leftSortedReversedTailSortedReversedTailSorted.reverse, rightSortedReversedTailSortedRe",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n            val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n            val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n            val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n            val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n            val (leftSortedReverseTailSortedReverseHead, rightSortedReverseTailSortedReverseHead) = (leftSortedReverseTailSortedReverse.head, rightSortedReverseTailSortedReverse.head)\n            val (leftSortedReverseTailSortedReverseTail, rightSortedReverseTailSortedReverseTail) = (leftSortedReverseTailSortedReverse.tail, rightSortedReverseTailSortedReverse.tail)\n            val (leftSortedReverseTailSortedReverseTailSorted, rightSortedReverseTailSortedReverseTailSorted) = (leftSortedReverseTailSortedReverseTail.sorted, rightSortedReverseTailSortedReverseT",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val digitsReversed = digits.reverse\n        val index = digitsReversed.indexWhere(x => x < sortedDigitsReversed(digitsReversed.indexOf(x)))\n        if (index == -1) return -1\n        val (left, right) = digitsReversed.splitAt(index)\n        val (left1, right1) = right.splitAt(1)\n        val (left2, right2) = sortedDigitsReversed.splitAt(sortedDigitsReversed.indexOf(right1.head))\n        val (left3, right3) = right2.splitAt(1)\n        val result = (left ::: left2 ::: right1 ::: right3 ::: left3 ::: left1).reverse.mkString.toLong\n        if (result == n) -1 else result",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted.reverse\n        val digitsSet = digits.toSet\n        if (digitsSet.size == 1) {\n            -1\n        } else if (digits == sortedDigits) {\n            -1\n        } else {\n            val index = digits.indexOf(sortedDigits.head)\n            val (left, right) = digits.splitAt(index)\n            val newDigits = left ::: sortedDigits.tail ::: sortedDigits.head :: right.tail\n            newDigits.mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOfSlice(sortedRev)\n        if (index == -1) return -1\n        val (left, right) = digits.splitAt(index)\n        val (leftRev, rightRev) = (left.reverse, right.reverse)\n        val (leftRevSorted, rightRevSorted) = (leftRev.sorted, rightRev.sorted)\n        val (leftRevSortedRev, rightRevSortedRev) = (leftRevSorted.reverse, rightRevSorted.reverse)\n        val (leftRevSortedRevTail, rightRevSortedRevHead) = (leftRevSortedRev.tail, rightRevSortedRev.head)\n        val (leftRevSortedRevTailSorted, rightRevSortedRevHeadSorted) = (leftRevSortedRevTail.sorted, rightRevSortedRevHead.sorted)\n        val (leftRevSortedRevTailSortedRev, rightRevSortedRevHeadSortedRev) = (leftRevSortedRevTailSorted.reverse, rightRevSortedRevHeadSorted.reverse)\n        val (leftRevSortedRevTailSortedRevTail, rightRevSortedRevHeadSortedRevTail) = (leftRevSortedRevTailSortedRev.tail, rightRevSortedRevHeadSortedRev.tail)\n        val (leftRevSortedRevTailSortedRevTailRev, rightRevSortedRevHeadSortedRevTailRev) = (leftRevSortedRevTailSortedRevTail.reverse, rightRevSortedRevHeadSortedRevTail.reverse)\n        val (leftRevSortedRevTailSortedRevTailRevHead, rightRevSortedRevHeadSortedRevTailRevHead) = (leftRevSortedRevTailSortedRevTailRev.head, rightRevSortedRevHeadSortedRevTailRev.head)\n        val (leftRevSortedRevTailSortedRevTailRevHeadSorted, rightRevSortedRevHeadSortedRevTailRev",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        if (digits == sortedDigits.reverse) {\n            -1\n        } else {\n            val index = digits.lastIndexWhere(digits(_) < digits(_ + 1))\n            val minIndex = digits.lastIndexWhere(digits(_) > digits(index))\n            val newDigits = digits.updated(index, digits(minIndex)).updated(minIndex, digits(index))\n            val (left, right) = newDigits.splitAt(index + 1)\n            (left ++ right.sorted).mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = sortedReverse.indexOf(digits.last)\n        if (index == 0) return -1\n        val last = sortedReverse(index - 1)\n        val lastIndex = digits.indexOf(last)\n        val (first, second) = digits.splitAt(lastIndex)\n        val result = (first :+ digits.last) ++ second.tail\n        result.mkString.toLong",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) return -1\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, leftSortedReverse) = left.sorted.reverse.splitAt(left.length - 1)\n        val (rightSorted, rightSortedReverse) = right.sorted.reverse.splitAt(right.length - 1)\n        val result = (leftSorted ++ rightSortedReverse ++ leftSortedReverse ++ rightSorted).mkString.toLong\n        if (result == n) -1 else result",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (leftSorted, rightSorted) = left.sorted.splitAt(left.length - 1)\n            val (leftSortedReverse, rightSortedReverse) = right.sorted.splitAt(right.length - 1)\n            val newDigits = leftSortedReverse ++ rightSortedReverse ++ leftSorted ++ rightSorted\n            newDigits.mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val index = digits.indexOf(sorted.last)\n        val (left, right) = digits.splitAt(index)\n        val (left1, right1) = right.splitAt(right.length - 1)\n        val left2 = left1 ::: left\n        val right2 = right1.head :: right1.tail.sorted\n        val result = (left2 ::: right2).mkString.toLong\n        if (result > n) result else -1",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val rightSorted = right.sorted\n        val rightSortedIndex = rightSorted.indexOf(right.head)\n        val rightSortedHead = rightSorted(rightSortedIndex)\n        val rightSortedTail = rightSorted.drop(rightSortedIndex + 1)\n        val newRight = rightSortedHead :: rightSortedTail.sorted\n        val newDigits = left ::: newRight\n        val newNumber = newDigits.mkString.toLong\n        if (newNumber > n) newNumber else -1",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val sortedDigits = digits.sorted.reverse\n        val sortedDigitsStr = sortedDigits.map(_.toString).mkString\n        if (n.toString == sortedDigitsStr) \"Not possible\"\n        else {\n            val (left, right) = digits.span(_ == sortedDigits.head)\n            val newLeft = left.reverse.tail.reverse\n            val newRight = sortedDigits.tail\n            val newLeftStr = newLeft.map(_.toString).mkString\n            val newRightStr = newRight.map(_.toString).mkString\n            val newStr = newLeftStr + sortedDigits.head + newRightStr\n            newStr.toLong\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val sortedReverseIndex = sortedReverse.indexOf(digits.last)\n        val sortedReverseIndexValue = sortedReverse(sortedReverseIndex)\n        val sortedReverseIndexValueIndex = digits.indexOf(sortedReverseIndexValue)\n        val sortedReverseIndexValueIndexValue = digits(sortedReverseIndexValueIndex)\n        val sortedReverseIndexValueIndexValueIndex = sortedReverse.indexOf(sortedReverseIndexValueIndexValue)\n        val sortedReverseIndexValueIndexValueIndexValue = sortedReverse(sortedReverseIndexValueIndexValueIndex)\n        val sortedReverseIndexValueIndexValueIndexValueIndex = digits.indexOf(sortedReverseIndexValueIndexValueIndexValue)\n        val sortedReverseIndexValueIndexValueIndexValueIndexValue = digits(sortedReverseIndexValueIndexValueIndexValueIndex)\n        val sortedReverseIndexValueIndexValueIndexValueIndexValueIndex = sortedReverse.indexOf(sortedReverseIndexValueIndexValueIndexValueIndexValue)\n        val sortedReverseIndexValueIndexValueIndexValueIndexValueIndexValue = sortedReverse(sortedReverseIndexValueIndexValueIndexValueIndexValueIndex)\n        val sortedReverseIndexValueIndexValueIndexValueIndexValueIndexValueIndex = digits.indexOf(sortedReverseIndexValueIndexValueIndexValueIndexValueIndexValue)\n        val sortedReverseIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue = digits(sortedReverseIndexValueIndexValueIndexValueIndexValueIndexValueIndex)\n        val sortedReverseIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex = sortedReverse.indexOf(sortedReverseIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue)\n        val sortedReverseIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndexValue = sortedReverse(sortedReverseIndexValueIndexValueIndexValueIndexValueIndexValueIndexValueIndex)\n        val sortedReverseIndexValue",
    "        val s = n.toString\n        val l = s.length\n        val a = s.toArray\n        var i = l - 1\n        while (i > 0 && a(i - 1) >= a(i)) i -= 1\n        if (i == 0) return -1\n        var j = l - 1\n        while (a(j) <= a(i - 1)) j -= 1\n        val t = a(i - 1)\n        a(i - 1) = a(j)\n        a(j) = t\n        var k = l - 1\n        while (i < k) {\n            val t = a(i)\n            a(i) = a(k)\n            a(k) = t\n            i += 1\n            k -= 1\n        }\n        a.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val index = digits.indexOf(sorted.last)\n        val (left, right) = digits.splitAt(index)\n        val newLeft = left.dropRight(1) :+ sorted.last\n        val newRight = sorted.dropRight(1) :+ left.last\n        val result = (newLeft ::: newRight).mkString.toLong\n        if (result == n) -1 else result",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedR = sorted.reverse\n        if (digits == sortedR) return -1\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val (left, right) = digits.splitAt(index)\n        val (leftR, rightR) = right.splitAt(right.indexOf(right.minBy(_ > right.head)))\n        val newLeft = left ::: rightR.head :: leftR.tail\n        val newRight = rightR.tail.sorted\n        (newLeft ::: newRight).mkString.toLong",
    "        val digits = n.toString.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsRev = sortedDigits.reverse\n        val sortedDigitsRevStr = sortedDigitsRev.mkString\n        val sortedDigitsStr = sortedDigits.mkString\n        if (sortedDigitsStr == n.toString) {\n            \"Not possible\"\n        } else {\n            val sortedDigitsRevStrNum = sortedDigitsRevStr.toLong\n            val sortedDigitsStrNum = sortedDigitsStr.toLong\n            val diff = sortedDigitsRevStrNum - sortedDigitsStrNum\n            val diffStr = diff.toString\n            val diffStrNum = diffStr.toLong\n            val diffStrNumStr = diffStrNum.toString\n            val diffStrNumStrNum = diffStrNumStr.toLong\n            val diffStrNumStrNumStr = diffStrNumStrNum.toString\n            val diffStrNumStrNumStrNum = diffStrNumStrNumStr.toLong\n            val diffStrNumStrNumStrNumStr = diffStrNumStrNumStrNum.toString\n            val diffStrNumStrNumStrNumStrNum = diffStrNumStrNumStrNumStr.toLong\n            val diffStrNumStrNumStrNumStrNumStr = diffStrNumStrNumStrNumStrNum.toString\n            val diffStrNumStrNumStrNumStrNumStrNum = diffStrNumStrNumStrNumStrNumStr.toLong\n            val diffStrNumStrNumStrNumStrNumStrNumStr = diffStrNumStrNumStrNumStrNumStrNum.toString\n            val diffStrNumStrNumStrNumStrNumStrNumStrNum = diffStrNumStrNumStrNumStrNumStrNumStr.toLong\n            val diffStrNumStrNumStrNumStrNumStrNumStrNumStr = diffStrNumStrNumStrNumStrNumStrNumStrNum.toString\n            val diffStrNumStrNumStrNumStrNumStrNumStrNumStrNum = diffStrNumStrNumStrNumStrNumStrNumStrNumStr.toLong\n            val diffStrNumStrNumStrNumStrNumStrNumStrNumStrNumStr = diffStrNumStrNumStrNumStrNumStrNumStrNumStrNum.toString\n            val",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOfSlice(sortedRev)\n        if (index == -1) return -1\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedRev, rightSortedRev) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedRevTail, rightSortedRevHead) = (leftSortedRev.tail, rightSortedRev.head)\n        val (leftSortedRevTailSorted, rightSortedRevHeadSorted) = (leftSortedRevTail.sorted, rightSortedRevHead.sorted)\n        val (leftSortedRevTailSortedRev, rightSortedRevHeadSortedRev) = (leftSortedRevTailSorted.reverse, rightSortedRevHeadSorted.reverse)\n        val (leftSortedRevTailSortedRevHead, rightSortedRevHeadSortedRevTail) = (leftSortedRevTailSortedRev.head, rightSortedRevHeadSortedRev.tail)\n        val (leftSortedRevTailSortedRevHeadSorted, rightSortedRevHeadSortedRevTailSorted) = (leftSortedRevTailSortedRevHead.sorted, rightSortedRevHeadSortedRevTail.sorted)\n        val (leftSortedRevTailSortedRevHeadSortedRev, rightSortedRevHeadSortedRevTailSortedRev) = (leftSortedRevTailSortedRevHeadSorted.reverse, rightSortedRevHeadSortedRevTailSorted.reverse)\n        val (leftSortedRevTailSortedRevHeadSortedRevTail, rightSortedRevHeadSortedRevTailSortedRevHead) = (leftSortedRevTailSortedRevHeadSortedRev.tail, rightSortedRevHeadSortedRevTailSortedRev.head)\n        val (leftSortedRevTailSortedRev",
    "        val digits = n.toString.toList.map(_.toString.toInt).sorted\n        val digitsReverse = digits.reverse\n        val digitsReverseString = digitsReverse.mkString\n        val digitsString = digits.mkString\n        if (digitsString == digitsReverseString) -1\n        else {\n            val digitsReverseStringBuffer = new StringBuffer(digitsReverseString)\n            val index = digitsReverseStringBuffer.indexOf(digitsString)\n            val (head, tail) = digitsReverseStringBuffer.splitAt(index)\n            val headBuffer = new StringBuffer(head)\n            val tailBuffer = new StringBuffer(tail)\n            val headString = headBuffer.toString\n            val tailString = tailBuffer.toString\n            val headStringBuffer = new StringBuffer(headString)\n            val tailStringBuffer = new StringBuffer(tailString)\n            val headStringBufferSorted = headStringBuffer.sorted\n            val tailStringBufferSorted = tailStringBuffer.sorted\n            val headStringBufferSortedString = headStringBufferSorted.mkString\n            val tailStringBufferSortedString = tailStringBufferSorted.mkString\n            val result = headStringBufferSortedString + tailStringBufferSortedString\n            result.toLong\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOf(sortedRev.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftRev, rightRev) = (left.reverse, right.reverse)\n        val (leftRevHead, leftRevTail) = (leftRev.head, leftRev.tail)\n        val (rightRevHead, rightRevTail) = (rightRev.head, rightRev.tail)\n        if (leftRevHead > rightRevHead) {\n            val newLeftRev = leftRevHead :: rightRevHead :: leftRevTail\n            val newRightRev = rightRevTail\n            val newLeft = newLeftRev.reverse\n            val newRight = newRightRev.reverse\n            val newDigits = newLeft ::: newRight\n            newDigits.mkString.toLong\n        } else {\n            None\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val index = digits.lastIndexWhere(_ < digits.last)\n        if (index == -1) -1\n        else {\n            val newDigits = digits.updated(index, digits.last).updated(digits.length - 1, digits(index))\n            val newDigitsSorted = newDigits.sorted\n            val newDigitsSortedTail = newDigitsSorted.tail\n            val newDigitsSortedTailIndex = newDigitsSortedTail.indexOf(newDigits.last)\n            val newDigitsSortedTailUpdated = newDigitsSortedTail.updated(newDigitsSortedTailIndex, newDigitsSorted.last)\n            val newDigitsSortedUpdated = newDigitsSorted.updated(newDigitsSorted.length - 1, newDigitsSortedTailUpdated.head)\n            val newDigitsSortedUpdatedTail = newDigitsSortedUpdated.tail\n            val newDigitsSortedUpdatedTailIndex = newDigitsSortedUpdatedTail.indexOf(newDigits.last)\n            val newDigitsSortedUpdatedTailUpdated = newDigitsSortedUpdatedTail.updated(newDigitsSortedUpdatedTailIndex, newDigitsSortedUpdated.last)\n            val newDigitsSortedUpdatedUpdated = newDigitsSortedUpdated.updated(newDigitsSortedUpdated.length - 1, newDigitsSortedUpdatedTailUpdated.head)\n            val newDigitsSortedUpdatedUpdatedTail = newDigitsSortedUpdatedUpdated.tail\n            val newDigitsSortedUpdatedUpdatedTailIndex = newDigitsSortedUpdatedUpdatedTail.indexOf(newDigits.last)\n            val newDigitsSortedUpdatedUpdatedTailUpdated = newDigitsSortedUpdatedUpdatedTail.updated(newDigitsSortedUpdatedUpdatedTailIndex, newDigitsSortedUpdatedUpdated.last)\n            val newDigitsSortedUpdatedUpdatedUpdated = newDigitsSortedUpdatedUpdated.updated(newDigitsSortedUpdatedUpdated.length - 1, newDigitsSortedUpdatedUpdatedTail",
    "        val digits = n.toString.toArray.map(_.toString.toInt)\n        var i = digits.length - 1\n        while (i > 0 && digits(i - 1) >= digits(i)) i -= 1\n        if (i == 0) return -1\n        var j = digits.length - 1\n        while (digits(j) <= digits(i - 1)) j -= 1\n        val temp = digits(i - 1)\n        digits(i - 1) = digits(j)\n        digits(j) = temp\n        j = digits.length - 1\n        while (i < j) {\n            val temp = digits(i)\n            digits(i) = digits(j)\n            digits(j) = temp\n            i += 1\n            j -= 1\n        }\n        digits.mkString.toLong",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseHead, rightSortedReverseHead) = (leftSortedReverse.head, rightSortedReverse.head)\n        val (leftSortedReverseHeadTail, rightSortedReverseHeadTail) = (leftSortedReverseHead.toString.tail, rightSortedReverseHead.toString.tail)\n        if (leftSortedReverseHeadTail.isEmpty) {\n            val leftSortedReverseHeadTail = leftSortedReverseHead.toString.tail\n            val leftSortedReverseHeadTailInt = leftSortedReverseHeadTail.toInt\n            val leftSortedReverseHeadTailIntPlusOne = leftSortedReverseHeadTailInt + 1\n            val leftSortedReverseHeadTailIntPlusOneString = leftSortedReverseHeadTailIntPlusOne.toString\n            val leftSortedReverseHeadTailIntPlusOneStringHead = leftSortedReverseHeadTailIntPlusOneString.head\n            val leftSortedReverseHeadTailIntPlusOneStringHeadInt = leftSortedReverseHeadTailIntPlusOneStringHead.toInt\n            val leftSortedReverseHeadTailIntPlusOneStringHeadIntString = leftSortedReverseHeadTailIntPlusOneStringHeadInt.toString\n            val leftSortedReverseHeadTailInt",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted.reverse\n        if (digits == sorted) return -1\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val (left, right) = digits.splitAt(index)\n        val min = right.min\n        val minIndex = right.indexOf(min)\n        val newRight = right.patch(minIndex, Nil, 1).sorted.reverse\n        val newDigits = left ::: min :: newRight\n        newDigits.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val index = digits.indexOf(sortedDigitsReversed.head)\n        val (left, right) = digits.splitAt(index)\n        val newLeft = left.dropRight(1) :+ sortedDigitsReversed.head\n        val newRight = sortedDigitsReversed.tail :+ left.last\n        val newDigits = newLeft ++ newRight\n        val newNumber = newDigits.mkString.toLong\n        if (newNumber > n) newNumber else -1",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) return -1\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val last = digits.last\n        val newDigits = digits.updated(index, last).updated(digits.length - 1, digits(index))\n        val (left, right) = newDigits.splitAt(index + 1)\n        val newRight = right.sorted\n        (left ::: newRight).mkString.toLong",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexWhere(digits(_) != sorted(_))\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = sorted.splitAt(index)\n        val (leftSortedReverse, rightSortedReverse) = sortedReverse.splitAt(index)\n        val leftSortedReverseHead = leftSortedReverse.head\n        val leftSortedReverseTail = leftSortedReverse.tail\n        val leftSortedReverseTailSorted = leftSortedReverseTail.sorted\n        val leftSortedReverseTailSortedReverse = leftSortedReverseTailSorted.reverse\n        val leftSortedReverseTailSortedReverseHead = leftSortedReverseTailSortedReverse.head\n        val leftSortedReverseTailSortedReverseTail = leftSortedReverseTailSortedReverse.tail\n        val leftSortedReverseTailSortedReverseTailSorted = leftSortedReverseTailSortedReverseTail.sorted\n        val leftSortedReverseTailSortedReverseTailSortedReverse = leftSortedReverseTailSortedReverseTailSorted.reverse\n        val leftSortedReverseTailSortedReverseTailSortedReverseHead = leftSortedReverseTailSortedReverseTailSortedReverse.head\n        val leftSortedReverseTailSortedReverseTailSortedReverseTail = leftSortedReverseTailSortedReverseTailSortedReverse.tail\n        val leftSortedReverseTailSortedReverseTailSortedReverseTailSorted = leftSortedReverseTailSortedReverseTailSortedReverseTail.s",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        if (digits == sortedDigits.reverse) {\n            \"Not possible\"\n        } else {\n            val index = digits.indexOf(sortedDigits.reverse.find(x => x > digits.last).get)\n            val (left, right) = digits.splitAt(index)\n            (left :+ digits.last) ::: right.tail.sorted\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        if (digits == sortedReversed) return -1\n        val index = digits.indexOf(sortedReversed.head)\n        val (left, right) = digits.splitAt(index)\n        val newRight = sortedReversed.head :: right.tail\n        val newLeft = sortedReversed.tail ::: left\n        (newLeft ::: newRight).mkString.toLong",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted.reverse\n        if (digits == sorted) {\n            \"Not possible\"\n        } else {\n            val (left, right) = digits.span(_ == digits.last)\n            val (head, tail) = sorted.span(_ != digits.last)\n            (left ::: head.reverse ::: right.tail ::: List(right.head)).mkString.toLong\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseHead) = (leftSortedReverse.tail, rightSortedReverse.head)\n        val (leftSortedReverseTailSorted, rightSortedReverseHeadSorted) = (leftSortedReverseTail.sorted, rightSortedReverseHead.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseHeadSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseHeadSortedReverse.reverse)\n        val (leftSortedReverseTailSortedReverseHead, rightSortedReverseHeadSortedReverseTail) = (leftSortedReverseTailSortedReverse.head, rightSortedReverseHeadSortedReverseTail.tail)\n        val (leftSortedReverseTailSortedReverseTail, rightSortedReverseHeadSortedReverseTailSorted) = (leftSortedReverseTailSortedReverse.tail, rightSortedReverseHeadSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverseTailSorted, rightSortedReverseHeadSortedReverseTailSortedReverse) = (leftSortedReverseTailSortedReverseTail.sorted, rightSortedReverseHeadSortedReverseTailSorted.reverse)\n        val (leftSorted",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val sortedReverseIndex = sortedReverse.indexOf(digits.last)\n        val sortedReverseIndexPlusOne = sortedReverseIndex + 1\n        val sortedReverseIndexPlusOneValue = sortedReverse(sortedReverseIndexPlusOne)\n        val sortedReverseIndexPlusOneValueIndex = sortedReverse.indexOf(sortedReverseIndexPlusOneValue)\n        val sortedReverseIndexPlusOneValueIndexPlusOne = sortedReverseIndexPlusOneValueIndex + 1\n        val sortedReverseIndexPlusOneValueIndexPlusOneValue = sortedReverse(sortedReverseIndexPlusOneValueIndexPlusOne)\n        val sortedReverseIndexPlusOneValueIndexPlusOneValueIndex = sortedReverse.indexOf(sortedReverseIndexPlusOneValueIndexPlusOneValue)\n        val sortedReverseIndexPlusOneValueIndexPlusOneValueIndexPlusOne = sortedReverseIndexPlusOneValueIndexPlusOneValueIndex + 1\n        val sortedReverseIndexPlusOneValueIndexPlusOneValueIndexPlusOneValue = sortedReverse(sortedReverseIndexPlusOneValueIndexPlusOneValueIndexPlusOne)\n        val sortedReverseIndexPlusOneValueIndexPlusOneValueIndexPlusOneValueIndex = sortedReverse.indexOf(sortedReverseIndexPlusOneValueIndexPlusOneValueIndexPlusOneValue)\n        val sortedReverseIndexPlusOneValueIndexPlusOneValueIndexPlusOneValueIndexPlusOne = sortedReverseIndexPlusOneValueIndexPlusOneValueIndexPlusOneValueIndex + 1\n        val sortedReverseIndexPlusOneValueIndexPlusOneValueIndexPlusOneValueIndexPlusOneValue = sortedReverse(sortedReverseIndexPlusOneValueIndexPlusOneValueIndexPlusOneValueIndexPlusOne)\n        val sortedReverseIndexPlusOneValueIndexPlusOneValueIndexPlusOneValueIndexPlusOneValueIndex = sortedReverse.indexOf(sortedReverseIndexPlusOneValueIndexPlusOneValueIndexPlusOneValueIndexPlusOneValue)\n        val sortedReverse",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        val sortedReversedTail = sortedReversed.tail\n        val sortedReversedHead = sortedReversed.head\n        val sortedReversedTailSorted = sortedReversedTail.sorted\n        val sortedReversedTailSortedReversed = sortedReversedTailSorted.reverse\n        val sortedReversedTailSortedReversedHead = sortedReversedTailSortedReversed.head\n        val sortedReversedTailSortedReversedTail = sortedReversedTailSortedReversed.tail\n        val sortedReversedTailSortedReversedTailSorted = sortedReversedTailSortedReversedTail.sorted\n        val sortedReversedTailSortedReversedTailSortedReversed = sortedReversedTailSortedReversedTailSorted.reverse\n        val sortedReversedTailSortedReversedTailSortedReversedHead = sortedReversedTailSortedReversedTailSortedReversed.head\n        val sortedReversedTailSortedReversedTailSortedReversedTail = sortedReversedTailSortedReversedTailSortedReversed.tail\n        val sortedReversedTailSortedReversedTailSortedReversedTailSorted = sortedReversedTailSortedReversedTailSortedReversedTail.sorted\n        val sortedReversedTailSortedReversedTailSortedReversedTailSortedReversed = sortedReversedTailSortedReversedTailSortedReversedTailSorted.reverse\n        val sortedReversedTailSortedReversedTailSortedReversedTailSortedReversedHead = sortedReversedTailSortedReversedTailSortedReversedTailSortedReversed.head\n        val sortedReversedTailSortedReversedTailS",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n        val (leftSortedReverseTailSortedReverseHead, rightSortedReverseTailSortedReverseHead) = (leftSortedReverseTailSortedReverse.head, rightSortedReverseTailSortedReverse.head)\n        val (leftSortedReverseTailSortedReverseTail, rightSortedReverseTailSortedReverseTail) = (leftSortedReverseTailSortedReverse.tail, rightSortedReverseTailSortedReverse.tail)\n        val (leftSortedReverseTailSortedReverseTailSorted, rightSortedReverseTailSortedReverseTailSorted) = (leftSortedReverseTailSortedReverseTail.sorted, rightSortedReverseTailSortedReverseTail.sorted)\n        val (leftSortedR",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val index = digits.lastIndexWhere(_ < digits.last)\n        if (index == -1) {\n            -1\n        } else {\n            val (left, right) = digits.splitAt(index)\n            val min = right.min\n            val minIndex = right.indexOf(min)\n            val newRight = right.patch(minIndex, Nil, 1)\n            val newLeft = left :+ min\n            (newLeft ::: newRight).mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val min = sorted.head\n        val maxIndex = digits.indexOf(max)\n        val minIndex = digits.indexOf(min)\n        if (maxIndex == minIndex) {\n            val next = digits.tail.sorted.mkString.toLong\n            if (next == 0) -1 else next\n        } else {\n            val next = digits.updated(maxIndex, min).updated(minIndex, max).mkString.toLong\n            if (next == 0) -1 else next\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) \"Not possible\"\n        else {\n            val (left, right) = digits.splitAt(index)\n            val rightSorted = right.sorted\n            val rightSortedReverse = rightSorted.reverse\n            val min = rightSortedReverse.head\n            val minIndex = rightSortedReverse.indexOf(min)\n            val (left2, right2) = rightSortedReverse.splitAt(minIndex)\n            val right2Sorted = right2.sorted\n            val right2SortedReverse = right2Sorted.reverse\n            val result = (left ::: (min :: right2SortedReverse)).mkString.toLong\n            if (result == n) \"Not possible\"\n            else result\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        if (digits == sorted.reverse) None\n        else {\n            val (left, right) = digits.splitAt(digits.length - 1)\n            val (min, minIndex) = right.zipWithIndex.minBy(_._1)\n            val (max, maxIndex) = left.zipWithIndex.maxBy(_._1)\n            if (min < max) {\n                val (newLeft, newRight) = left.updated(maxIndex, min).splitAt(maxIndex)\n                val newDigits = newLeft ++ List(max) ++ newRight.drop(1) ++ right.updated(minIndex, max)\n                Some(newDigits.mkString.toLong)\n            }\n            else {\n                val (newLeft, newRight) = left.updated(maxIndex, min).splitAt(maxIndex)\n                val newDigits = newLeft ++ List(max) ++ newRight.drop(1) ++ right.updated(minIndex, max)\n                Some(newDigits.mkString.toLong)\n            }\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val max = sorted.last\n        val maxIndex = digits.indexOf(max)\n        val maxIndexSorted = sorted.indexOf(max)\n        val nextMax = sorted(maxIndexSorted - 1)\n        val nextMaxIndex = digits.indexOf(nextMax)\n        val (left, right) = digits.splitAt(nextMaxIndex)\n        val result = left.dropRight(1) ::: List(max) ::: right.drop(1) ::: List(nextMax)\n        if (result.mkString.toLong > n) result.mkString.toLong else -1",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val sortedRight = right.sorted\n        val min = sortedRight.head\n        val max = sortedRight.last\n        if (min == max) return -1\n        val index = right.indexOf(min)\n        val newRight = right.updated(index, max)\n        val newLeft = left :+ min\n        (newLeft ++ newRight).mkString.toLong",
    "        val s = n.toString\n        val l = s.length\n        val d = s.toList.map(_.asDigit)\n        val ds = d.sorted\n        if (d == ds.reverse) return -1\n        val i = d.indexWhere(x => x < ds(l - 1))\n        val j = ds.indexWhere(x => x > d(i))\n        val d2 = d.updated(i, ds(j)).updated(j, d(i))\n        val d3 = d2.slice(0, i) ++ d2.slice(i + 1, l).sorted\n        d3.mkString.toLong",
    "        val digits = n.toString.map(_.asDigit).toArray\n        for (i <- digits.length - 1 to 1 by -1) {\n            if (digits(i) > digits(i - 1)) {\n                val min = digits.slice(i, digits.length).min\n                val minIndex = digits.slice(i, digits.length).indexOf(min) + i\n                val temp = digits(i - 1)\n                digits(i - 1) = min\n                digits(minIndex) = temp\n                return digits.slice(0, i) ++ digits.slice(i, digits.length).sorted\n            }\n        }\n        -1",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        val index = digits.indexOf(sortedReversed.head)\n        val (left, right) = digits.splitAt(index)\n        val newDigits = left ::: sortedReversed.tail ::: List(sortedReversed.head)\n        val newNumber = newDigits.mkString.toLong\n        if (newNumber > n) newNumber else -1",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        val sortedReversedString = sortedReversed.map(_.toString).mkString\n        val nString = n.toString\n        if (nString == sortedReversedString) return -1\n        val index = sortedReversed.indexWhere(_ > digits.last)\n        val newDigits = digits.updated(digits.length - 1, sortedReversed(index))\n        val newSorted = sortedReversed.updated(index, digits.last)\n        val newSortedString = newSorted.map(_.toString).mkString\n        val newDigitsString = newDigits.map(_.toString).mkString\n        newDigitsString + newSortedString",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (leftReverse, rightReverse) = left.reverse.splitAt(1)\n            val newLeft = leftReverse.head :: rightReverse\n            val newRight = left.dropRight(1) ::: right\n            val newDigits = newLeft ::: newRight.sorted\n            newDigits.mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedR = sorted.reverse\n        val index = digits.indexOfSlice(sortedR)\n        if (index == -1) return \"Not possible\"\n        val (left, right) = digits.splitAt(index)\n        val (leftR, rightR) = left.reverse.splitAt(left.length - 1)\n        val (leftR1, leftR2) = leftR.splitAt(leftR.indexOfSlice(sortedR))\n        val leftR3 = leftR1 ::: sortedR ::: leftR2\n        val result = leftR3 ::: right\n        result.mkString.toLong",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedWithoutFirst = sortedDigitsReversed.tail\n        val firstDigit = sortedDigitsReversed.head\n        val firstDigitIndex = digits.indexOf(firstDigit)\n        val digitsWithoutFirst = digits.take(firstDigitIndex) ++ digits.drop(firstDigitIndex + 1)\n        val digitsWithoutFirstSorted = digitsWithoutFirst.sorted\n        val digitsWithoutFirstSortedReversed = digitsWithoutFirstSorted.reverse\n        val result = firstDigit.toString + digitsWithoutFirstSortedReversed.mkString\n        if (result.toLong > n) result.toLong else -1",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n        val leftSortedReverseTailSortedReverseHead = leftSortedReverseTailSortedReverse.head\n        val rightSortedReverseTailSortedReverseHead = rightSortedReverseTailSortedReverse.head\n        val leftSortedReverseTailSortedReverseHeadIndex = rightSortedReverseTailSortedReverse.indexOf(leftSortedReverseTailSortedReverseHead)\n        val rightSortedReverseTailSortedReverseHeadIndex = rightSortedReverseTailSortedReverse.indexOf(rightSortedReverseTailSortedReverseHead)\n        val (leftSortedReverseTailSortedReverseHeadIndexLeft, leftSortedReverseTailSortedReverseHeadIndexRight) = rightSortedReverseTailSortedReverse.splitAt(leftS",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReverse = sortedDigits.reverse\n        val sortedDigitsReverseSet = sortedDigitsReverse.toSet\n        val digitsSet = digits.toSet\n        if (sortedDigitsReverseSet == digitsSet) return -1\n        val sortedDigitsReverseIndex = sortedDigitsReverse.indexOf(digits.last)\n        val sortedDigitsReverseIndexDigit = sortedDigitsReverse(sortedDigitsReverseIndex)\n        val sortedDigitsReverseIndexDigitIndex = digits.indexOf(sortedDigitsReverseIndexDigit)\n        val sortedDigitsReverseIndexDigitIndexDigit = digits(sortedDigitsReverseIndexDigitIndex)\n        val sortedDigitsReverseIndexDigitIndexDigitIndex = sortedDigitsReverse.indexOf(sortedDigitsReverseIndexDigitIndexDigit)\n        val sortedDigitsReverseIndexDigitIndexDigitIndexDigit = sortedDigitsReverse(sortedDigitsReverseIndexDigitIndexDigitIndex)\n        val sortedDigitsReverseIndexDigitIndexDigitIndexDigitIndex = digits.indexOf(sortedDigitsReverseIndexDigitIndexDigitIndexDigit)\n        val sortedDigitsReverseIndexDigitIndexDigitIndexDigitIndexDigit = digits(sortedDigitsReverseIndexDigitIndexDigitIndexDigitIndex)\n        val sortedDigitsReverseIndexDigitIndexDigitIndexDigitIndexDigitIndex = sortedDigitsReverse.indexOf(sortedDigitsReverseIndexDigitIndexDigitIndexDigitIndexDigit)\n        val sortedDigitsReverseIndexDigitIndexDigitIndexDigitIndexDigitIndexDigit = sortedDigitsReverse(sortedDigitsReverseIndexDigitIndexDigitIndexDigitIndexDigitIndex)\n        val sortedDigitsReverseIndexDigitIndexDigitIndexDigitIndexDigitIndexDigitIndex = digits.",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedTail = sortedDigitsReversed.tail\n        val sortedDigitsReversedTailSorted = sortedDigitsReversedTail.sorted\n        val sortedDigitsReversedTailSortedReversed = sortedDigitsReversedTailSorted.reverse\n        val sortedDigitsReversedHead = sortedDigitsReversed.head\n        val sortedDigitsReversedHeadSortedDigitsReversedTailSortedReversed = sortedDigitsReversedHead :: sortedDigitsReversedTailSortedReversed\n        val sortedDigitsReversedHeadSortedDigitsReversedTailSortedReversedString = sortedDigitsReversedHeadSortedDigitsReversedTailSortedReversed.mkString\n        val sortedDigitsReversedHeadSortedDigitsReversedTailSortedReversedStringLong = sortedDigitsReversedHeadSortedDigitsReversedTailSortedReversedString.toLong\n        if (sortedDigitsReversedHeadSortedDigitsReversedTailSortedReversedStringLong > n) sortedDigitsReversedHeadSortedDigitsReversedTailSortedReversedStringLong else -1",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        if (digits == sortedDigitsReversed) return -1\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val (left, right) = digits.splitAt(index)\n        val newRight = (digits(index) :: right.tail).sorted\n        val newLeft = left ::: List(right.head)\n        (newLeft ::: newRight).mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val digitsReversed = digits.reverse\n        if (digitsReversed == sortedDigitsReversed) {\n            \"Not possible\"\n        } else {\n            val index = digitsReversed.indexWhere(x => x < sortedDigitsReversed(digitsReversed.indexOf(x)))\n            val (left, right) = digitsReversed.splitAt(index)\n            val min = sortedDigitsReversed.filter(x => x > left.last).min\n            val (left2, right2) = right.partition(x => x == min)\n            (left :+ min) ++ (right2.sorted ++ left2.sorted).reverse\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        if (digits == sorted.reverse) return -1\n        val index = digits.lastIndexWhere(digits(_) < digits(_ + 1))\n        val (left, right) = digits.splitAt(index)\n        val min = right.min\n        val minIndex = right.indexOf(min)\n        val newRight = right.updated(minIndex, right(0))\n        val newLeft = left ::: newRight.updated(0, min)\n        (left ::: newRight.updated(0, min)).mkString.toLong",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted.reverse\n        if (digits == sortedDigits) return -1\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val (left, right) = digits.splitAt(index)\n        val min = right.min\n        val minIndex = right.indexOf(min)\n        val newRight = right.updated(minIndex, digits(index))\n        val newLeft = left ::: (newRight.sorted.reverse)\n        newLeft.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n        val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n        val (leftSortedReverseTailSortedReverseTail, rightSortedReverseTailSortedReverseTail) = (leftSortedReverseTailSortedReverse.tail, rightSortedReverseTailSortedReverse.tail)\n        val (leftSortedReverseTailSortedReverseTailSorted, rightSortedReverseTailSortedReverseTailSorted) = (leftSortedReverseTailSortedReverseTail.sorted, rightSortedReverseTailSortedReverseTail.sorted)\n        val (leftSortedReverseTailSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverseTailSortedReverse) = (leftSortedReverseTailSortedReverseTailSorted.reverse, rightSortedReverseTail",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted.reverse\n        if (digits == sortedDigits) return -1\n        val index = digits.lastIndexWhere(digits(_) < digits(_ + 1))\n        val (left, right) = digits.splitAt(index)\n        val min = right.min\n        val minIndex = right.indexOf(min)\n        val newRight = right.updated(minIndex, right(0))\n        val newLeft = left :+ min\n        (newLeft ::: newRight).mkString.toLong",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) -1\n        else {\n            val (left, right) = digits.splitAt(index)\n            val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n            val (leftSortedReverse, rightSortedReverse) = (leftSorted.reverse, rightSorted.reverse)\n            val (leftSortedReverseTail, rightSortedReverseTail) = (leftSortedReverse.tail, rightSortedReverse.tail)\n            val (leftSortedReverseTailSorted, rightSortedReverseTailSorted) = (leftSortedReverseTail.sorted, rightSortedReverseTail.sorted)\n            val (leftSortedReverseTailSortedReverse, rightSortedReverseTailSortedReverse) = (leftSortedReverseTailSorted.reverse, rightSortedReverseTailSorted.reverse)\n            val (leftSortedReverseTailSortedReverseHead, rightSortedReverseTailSortedReverseHead) = (leftSortedReverseTailSortedReverse.head, rightSortedReverseTailSortedReverse.head)\n            val (leftSortedReverseTailSortedReverseHeadSorted, rightSortedReverseTailSortedReverseHeadSorted) = (leftSortedReverseTailSortedReverseHead.sorted, rightSortedReverseTailSortedReverseHead.sorted)\n            val (leftSortedReverseTailSortedReverseHeadSortedReverse, rightSortedReverseTailSortedReverseHeadSortedReverse) = (leftSortedReverseTailSortedReverseHeadSorted.reverse, rightSortedR",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftReverse, rightReverse) = left.reverse.splitAt(1)\n        val newLeft = leftReverse.head :: rightReverse\n        val newRight = sortedReverse.tail\n        val newDigits = newLeft ++ newRight\n        if (newDigits.head == 0) None else Some(newDigits.mkString.toLong)",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val index = digits.indexOf(max)\n        val (left, right) = digits.splitAt(index)\n        val (left1, right1) = right.splitAt(right.length - 1)\n        val (left2, right2) = left1.splitAt(left1.length - 1)\n        val (left3, right3) = right2.splitAt(right2.length - 1)\n        val (left4, right4) = left3.splitAt(left3.length - 1)\n        val (left5, right5) = right4.splitAt(right4.length - 1)\n        val (left6, right6) = left5.splitAt(left5.length - 1)\n        val (left7, right7) = right6.splitAt(right6.length - 1)\n        val (left8, right8) = left7.splitAt(left7.length - 1)\n        val (left9, right9) = right8.splitAt(right8.length - 1)\n        val (left10, right10) = left9.splitAt(left9.length - 1)\n        val (left11, right11) = right10.splitAt(right10.length - 1)\n        val (left12, right12) = left11.splitAt(left11.length - 1)\n        val (left13, right13) = right12.splitAt(right12.length - 1)\n        val (left14, right14) = left13.splitAt(left13.length - 1)\n        val (left15, right15) = right14.splitAt(right14.length - 1)\n        val (left16, right16) = left15.splitAt(left15.length - 1)\n        val (left17, right17) = right16.splitAt(right16.length - 1)\n        val (left18, right18) = left17.splitAt(left17.length - 1)\n        val (left19, right19) = right18.splitAt(",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        val sortedReversedString = sortedReversed.mkString\n        val nString = n.toString\n        if (sortedReversedString == nString) {\n            \"Not Possible\"\n        } else {\n            val sortedReversedStringList = sortedReversedString.toList\n            val sortedReversedStringListBuffer = sortedReversedStringList.toBuffer\n            val nStringList = nString.toList\n            val nStringListBuffer = nStringList.toBuffer\n            val index = nStringListBuffer.indexOfSlice(sortedReversedStringListBuffer)\n            val subList = nStringListBuffer.slice(index, nStringListBuffer.length)\n            val subListSorted = subList.sorted\n            val subListSortedBuffer = subListSorted.toBuffer\n            val subListSortedBufferReversed = subListSortedBuffer.reverse\n            val subListSortedBufferReversedString = subListSortedBufferReversed.mkString\n            val subListSortedBufferReversedStringList = subListSortedBufferReversedString.toList\n            val subListSortedBufferReversedStringListBuffer = subListSortedBufferReversedStringList.toBuffer\n            val subListSortedBufferReversedStringListBufferRemoved = subListSortedBufferReversedStringListBuffer.remove(0)\n            val subListSortedBufferReversedStringListBufferRemovedString = subListSortedBufferReversedStringListBufferRemoved.mkString\n            val subListSortedBufferReversedStringListBufferRemovedStringList = subListSortedBufferReversedStringListBufferRemovedString.toList\n            val subListSortedBufferReversedStringListBufferRemovedStringListBuffer = subListSortedBufferReversedStringListBufferRemovedStringList.toBuffer\n            val subListSortedBufferReversedStringListBufferRemovedStringListBufferRemoved = subListSortedBufferReversedStringListBufferRemovedStringListBuffer.remove(0)\n            val subListSortedBufferRevers",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        if (digits == sorted.reverse) {\n            \"Not possible\"\n        } else {\n            val index = digits.lastIndexWhere(_ < digits.last)\n            val digit = digits(index)\n            val newDigits = digits.updated(index, digits.last).updated(digits.lastIndexOf(digit), digit)\n            newDigits.mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val index = digits.indexOf(sortedDigitsReversed.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftReversed, rightReversed) = (left.reverse, right.reverse)\n        val (leftReversedSorted, rightReversedSorted) = (leftReversed.sorted, rightReversed.sorted)\n        val (leftReversedSortedReversed, rightReversedSortedReversed) = (leftReversedSorted.reverse, rightReversedSorted.reverse)\n        val result = (leftReversedSortedReversed ::: rightReversedSortedReversed).mkString.toLong\n        if (result == n) \"Not possible\" else result",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val digitsReversed = digits.reverse\n        if (digitsReversed == sortedDigitsReversed) {\n            \"Not possible\"\n        } else {\n            val index = digitsReversed.indexWhere(x => x > sortedDigitsReversed(sortedDigitsReversed.indexOf(x) + 1))\n            val index2 = sortedDigitsReversed.indexOf(digitsReversed(index))\n            val temp = digitsReversed(index)\n            digitsReversed(index) = sortedDigitsReversed(index2 + 1)\n            sortedDigitsReversed(index2 + 1) = temp\n            val result = (digitsReversed.take(index + 1) ::: sortedDigitsReversed.drop(index2 + 1)).reverse.mkString.toLong\n            result\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOf(sortedRev.head)\n        val (left, right) = digits.splitAt(index)\n        val newRight = sortedRev.tail :+ sortedRev.head\n        val newLeft = left.sorted.reverse\n        val newDigits = newLeft ::: newRight\n        val newNum = newDigits.mkString.toLong\n        if (newNum == n) -1 else newNum",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted.reverse\n        if (digits == sortedDigits) return -1\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val (left, right) = digits.splitAt(index)\n        val (rightHead, rightTail) = right.tail.partition(_ > right.head)\n        val nextDigits = left ::: (right.head :: rightTail.sorted) ::: rightHead\n        nextDigits.mkString.toLong",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftReverse, rightReverse) = left.reverse.splitAt(left.length - 1)\n        val newDigits = leftReverse ++ rightReverse ++ right\n        if (newDigits == digits) -1 else newDigits.mkString.toLong",
    "        val digits = n.toString.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) -1\n        else {\n            val (a, b) = digits.splitAt(index)\n            val (c, d) = b.splitAt(b.length - 1)\n            val e = c.sorted\n            val f = e.reverse\n            val g = f.head\n            val h = f.tail\n            val i = d :+ g\n            val j = i.sorted\n            val k = a ::: j\n            k.mkString.toLong\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReversed = sorted.reverse\n        val index = digits.indexOf(sortedReversed.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val (leftSortedReversed, rightSortedReversed) = (leftSorted.reverse, rightSorted.reverse)\n        val (leftSortedReversedTail, rightSortedReversedHead) = (leftSortedReversed.tail, rightSortedReversed.head)\n        val (leftSortedReversedTailSorted, rightSortedReversedHeadSorted) = (leftSortedReversedTail.sorted, rightSortedReversedHead.sorted)\n        val (leftSortedReversedTailSortedReversed, rightSortedReversedHeadSortedReversed) = (leftSortedReversedTailSorted.reverse, rightSortedReversedHeadSortedReversed.reverse)\n        val (leftSortedReversedTailSortedReversedHead, rightSortedReversedHeadSortedReversedTail) = (leftSortedReversedTailSortedReversed.head, rightSortedReversedHeadSortedReversed.tail)\n        val (leftSortedReversedTailSortedReversedHeadSorted, rightSortedReversedHeadSortedReversedTailSorted) = (leftSortedReversedTailSortedReversedHead.sorted, rightSortedReversedHeadSortedReversedTail.sorted)\n        val (leftSortedReversedTailSortedReversedHeadSortedReversed, rightSortedReversedHeadSortedReversedTailSortedReversed) = (leftSortedReversedTailSortedReversedHeadSorted.reverse, rightSortedReversedHeadSortedReversedTailSortedReversed.reverse)\n",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val maxIndex = digits.indexOf(max)\n        val min = sorted.head\n        val minIndex = digits.indexOf(min)\n        if (maxIndex == minIndex) return -1\n        val newDigits = digits.updated(maxIndex, min).updated(minIndex, max)\n        newDigits.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val newRight = sortedReverse.tail :+ sortedReverse.head\n        val result = (left ::: newRight).mkString.toLong\n        if (result == n) \"Not possible\" else result",
    "        val digits = n.toString.map(_.asDigit).toList\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val sortedRight = right.sorted\n        val min = sortedRight.head\n        val minIndex = right.indexOf(min)\n        val max = left.max\n        if (min > max) {\n            val newLeft = left.updated(left.indexOf(max), min)\n            val newRight = sortedRight.updated(minIndex, max)\n            (newLeft ++ newRight).mkString.toLong\n        } else {\n            -1\n        }"
  ]
}