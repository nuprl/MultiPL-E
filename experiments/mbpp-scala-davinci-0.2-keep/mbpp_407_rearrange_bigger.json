{
  "name": "mbpp_407_rearrange_bigger",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to create the next bigger number by rearranging the digits of a given number.\n    def rearrangeBigger(n : Long) : Any = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rearrangeBigger((12l)).equals((Any(21l))));\n    assert(rearrangeBigger((10l)).equals((Any(false))));\n    assert(rearrangeBigger((102l)).equals((Any(120l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedR = sorted.reverse\n        val index = digits.indexOf(sortedR.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftR, rightR) = (left.reverse, right.reverse)\n        val (leftR2, rightR2) = (leftR.tail, rightR.tail)\n        val (leftR3, rightR3) = (leftR2.reverse, rightR2.reverse)\n        val leftR4 = leftR3 :+ sortedR.head\n        val rightR4 = rightR3 :+ leftR.head\n        val result = (leftR4 ::: rightR4).mkString.toLong\n        if (result == n) -1 else result",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val newRight = sortedReverse.tail :+ sortedReverse.head\n        val newLeft = left.sorted\n        val newDigits = newRight ::: newLeft\n        val newNumber = newDigits.mkString.toLong\n        if (newNumber > n) newNumber else -1",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val max = sorted.last\n        val min = sorted.head\n        val maxIndex = digits.indexOf(max)\n        val minIndex = digits.indexOf(min)\n        if (maxIndex == minIndex) return -1\n        val newDigits = digits.updated(maxIndex, min).updated(minIndex, max)\n        newDigits.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftSorted, rightSorted) = (left.sorted, right.sorted)\n        val leftSortedReverse = leftSorted.reverse\n        val rightSortedReverse = rightSorted.reverse\n        val (leftSortedReverseHead, leftSortedReverseTail) = (leftSortedReverse.head, leftSortedReverse.tail)\n        val (rightSortedReverseHead, rightSortedReverseTail) = (rightSortedReverse.head, rightSortedReverse.tail)\n        val leftSortedReverseTailSorted = leftSortedReverseTail.sorted\n        val rightSortedReverseTailSorted = rightSortedReverseTail.sorted\n        if (leftSortedReverseHead > rightSortedReverseHead) {\n            val result = (leftSortedReverseTailSorted :+ leftSortedReverseHead) ++ (rightSortedReverseHead +: rightSortedReverseTailSorted)\n            result.mkString.toLong\n        } else {\n            -1\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        if (digits == sorted.reverse) return -1\n        val (i, j) = (digits.indexWhere(_ < digits.last), digits.lastIndexWhere(_ > digits.last))\n        val (a, b) = (digits(i), digits(j))\n        val newDigits = digits.updated(i, b).updated(j, a)\n        val result = newDigits.mkString.toLong\n        result",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedStr = sortedDigitsReversed.mkString\n        val sortedDigitsStr = sortedDigits.mkString\n        val digitsStr = digits.mkString\n        if (sortedDigitsStr == digitsStr) {\n            -1\n        } else {\n            val index = sortedDigitsReversedStr.indexOf(digitsStr.last)\n            val newDigits = digits.dropRight(1) :+ sortedDigitsReversed(index)\n            val newDigitsSorted = newDigits.sorted\n            val newDigitsSortedStr = newDigitsSorted.mkString\n            newDigitsSortedStr.toLong\n        }",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedMap = sortedDigitsReversed.zipWithIndex.toMap\n        val digitsMap = digits.zipWithIndex.toMap\n        val maxDigit = digits.max\n        val maxDigitIndex = digitsMap(maxDigit)\n        val maxDigitIndexSorted = sortedDigitsReversedMap(maxDigit)\n        val maxDigitIndexSortedNext = maxDigitIndexSorted - 1\n        val maxDigitNext = sortedDigitsReversed(maxDigitIndexSortedNext)\n        val maxDigitNextIndex = sortedDigitsReversedMap(maxDigitNext)\n        val maxDigitNextIndexSorted = sortedDigitsReversedMap(maxDigitNext)\n        val maxDigitNextIndexSortedNext = maxDigitNextIndexSorted - 1\n        val maxDigitNextNext = sortedDigitsReversed(maxDigitNextIndexSortedNext)\n        val maxDigitNextNextIndex = sortedDigitsReversedMap(maxDigitNextNext)\n        val maxDigitNextNextIndexSorted = sortedDigitsReversedMap(maxDigitNextNext)\n        val maxDigitNextNextIndexSortedNext = maxDigitNextNextIndexSorted - 1\n        val maxDigitNextNextNext = sortedDigitsReversed(maxDigitNextNextIndexSortedNext)\n        val maxDigitNextNextNextIndex = sortedDigitsReversedMap(maxDigitNextNextNext)\n        val maxDigitNextNextNextIndexSorted = sortedDigitsReversedMap(maxDigitNextNextNext)\n        val maxDigitNextNextNextIndexSortedNext = maxDigitNextNextNextIndexSorted - 1\n        val maxDigitNextNextNextNext = sortedDigitsReversed(maxDigitNextNextNextIndexSortedNext)\n        val maxDigitNextNextNextNextIndex = sortedDigitsReversedMap(maxDigitNextNextNextNext)\n        val maxDigitNextNextNextNextIndexS",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOfSlice(sortedReverse)\n        if (index == -1) {\n            -1\n        } else {\n            val (left, right) = digits.splitAt(index)\n            val min = right.min\n            val minIndex = right.indexOf(min)\n            val (left1, right1) = right.splitAt(minIndex)\n            val right2 = right1.tail\n            val right3 = min :: right2.sorted\n            val result = left ::: right3\n            result.mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.asDigit).sorted.reverse\n        val (first, second) = digits.splitAt(digits.indexOf(digits.min))\n        if (first.isEmpty) None else Some(first.reverse.mkString.toLong + second.mkString.toLong)",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val index = digits.indexOf(sortedRev.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftRev, rightRev) = (left.reverse, right.reverse)\n        val (leftRevHead, leftRevTail) = (leftRev.head, leftRev.tail)\n        val (rightRevHead, rightRevTail) = (rightRev.head, rightRevTail)\n        val (leftRevHeadSorted, leftRevTailSorted) = (leftRevHead.sorted, leftRevTail.sorted)\n        val (leftRevHeadSortedRev, leftRevTailSortedRev) = (leftRevHeadSorted.reverse, leftRevTailSorted.reverse)\n        val (leftRevHeadSortedRevHead, leftRevHeadSortedRevTail) = (leftRevHeadSortedRev.head, leftRevHeadSortedRev.tail)\n        val (leftRevHeadSortedRevTailHead, leftRevHeadSortedRevTailTail) = (leftRevHeadSortedRevTail.head, leftRevHeadSortedRevTail.tail)\n        val (leftRevHeadSortedRevTailTailHead, leftRevHeadSortedRevTailTailTail) = (leftRevHeadSortedRevTailTail.head, leftRevHeadSortedRevTailTail.tail)\n        val (leftRevHeadSortedRevTailTailTailHead, leftRevHeadSortedRevTailTailTailTail) = (leftRevHeadSortedRevTailTailTail.head, leftRevHeadSortedRevTailTailTail.tail)\n        val (leftRevHeadSortedRevTailTailTailTailHead, leftRevHeadSortedRevTailTailTailTailTail) = (leftRevHeadSortedRevTailTailTailTail.head, leftRevHeadSortedRevTailTailTailTail.tail)\n        val (leftRevHeadSortedRevTailTailTail",
    "        def rearrangeBigger(n : Long, digits : List[Int]) : Any = {\n            if (digits.length == 1) return -1\n            val last = digits.last\n            val rest = digits.dropRight(1)\n            val index = rest.indexWhere(_ > last)\n            if (index == -1) rearrangeBigger(n, rest)\n            else {\n                val (left, right) = rest.splitAt(index)\n                val newDigits = left ::: List(last) ::: right.tail.sorted\n                val newNumber = newDigits.foldLeft(0L)((acc, x) => acc * 10 + x)\n                if (newNumber > n) newNumber\n                else rearrangeBigger(n, rest)\n            }\n        }\n        rearrangeBigger(n, n.toString.map(_.asDigit).toList)",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val (left, right) = digits.splitAt(digits.length - 1)\n        val sortedRight = right.sorted\n        val max = sortedRight.last\n        val min = sortedRight.head\n        if (max == min) return -1\n        val index = right.indexOf(max)\n        val newRight = right.updated(index, min)\n        val newLeft = left :+ max\n        (newLeft ::: newRight).mkString.toLong",
    "        val digits = n.toString.map(_.toString.toInt).toList\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        val sortedRevStr = sortedRev.map(_.toString).mkString\n        val sortedStr = sorted.map(_.toString).mkString\n        if (sortedRevStr == n.toString) {\n            \"Not possible\"\n        } else {\n            val sortedRevStr2 = sortedRevStr.substring(0, sortedRevStr.length - 1)\n            val sortedRevStr3 = sortedRevStr.substring(sortedRevStr.length - 1)\n            val sortedRevStr4 = sortedRevStr2 + sortedRevStr3\n            val sortedRevStr5 = sortedRevStr4.map(_.toString.toInt).toList\n            val sortedRevStr6 = sortedRevStr5.sorted\n            val sortedRevStr7 = sortedRevStr6.map(_.toString).mkString\n            val sortedRevStr8 = sortedRevStr7 + sortedRevStr3\n            sortedRevStr8.toLong\n        }",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sorted = digits.sorted\n        val sortedRev = sorted.reverse\n        if (digits == sortedRev) {\n            -1\n        } else {\n            val index = digits.lastIndexWhere(x => x < sortedRev(digits.indexOf(x)))\n            val temp = digits(index)\n            digits(index) = sortedRev.find(_ > temp).get\n            sortedRev.remove(sortedRev.indexOf(digits(index)))\n            digits.remove(index)\n            (digits :+ temp).mkString.toLong\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        var i = digits.length - 1\n        while (i > 0 && digits(i - 1) >= digits(i)) i -= 1\n        if (i == 0) return -1\n        var j = digits.length - 1\n        while (digits(j) <= digits(i - 1)) j -= 1\n        val temp = digits(i - 1)\n        digits(i - 1) = digits(j)\n        digits(j) = temp\n        digits.slice(i, digits.length).sorted.reverse.foreach(x => digits(i) = x; i += 1)\n        digits.mkString.toLong",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val sortedDigitsReversedTail = sortedDigitsReversed.tail\n        val sortedDigitsReversedTailSorted = sortedDigitsReversedTail.sorted\n        val sortedDigitsReversedTailSortedReversed = sortedDigitsReversedTailSorted.reverse\n        val sortedDigitsReversedTailSortedReversedHead = sortedDigitsReversedTailSortedReversed.head\n        val sortedDigitsReversedTailSortedReversedTail = sortedDigitsReversedTailSortedReversed.tail\n        val sortedDigitsReversedTailSortedReversedTailSorted = sortedDigitsReversedTailSortedReversedTail.sorted\n        val sortedDigitsReversedTailSortedReversedTailSortedReversed = sortedDigitsReversedTailSortedReversedTailSorted.reverse\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedHead = sortedDigitsReversedTailSortedReversedTailSortedReversed.head\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedTail = sortedDigitsReversedTailSortedReversedTailSortedReversed.tail\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedTailSorted = sortedDigitsReversedTailSortedReversedTailSortedReversedTail.sorted\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedTailSortedReversed = sortedDigitsReversedTailSortedReversedTailSortedReversedTailSorted.reverse\n        val sortedDigitsReversedTailSortedReversedTailSortedReversedTailSortedReversedHead = sortedDigitsRe",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsReversed = sortedDigits.reverse\n        val digitsReversed = digits.reverse\n        val index = digitsReversed.indexWhere(x => x < sortedDigitsReversed(digitsReversed.indexOf(x)))\n        if (index == -1) None\n        else {\n            val (left, right) = digitsReversed.splitAt(index)\n            val (left1, right1) = right.splitAt(1)\n            val (left2, right2) = left.splitAt(left.indexWhere(x => x > left1(0)))\n            val left3 = left2 ::: left1\n            val right3 = right2 ::: right1\n            val result = (left3 ::: right3).reverse.mkString.toLong\n            Some(result)\n        }",
    "        val digits = n.toString.toList.map(_.toString.toInt)\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        if (digits == sortedReverse) return -1\n        val index = digits.lastIndexWhere(_ < digits.last)\n        val (left, right) = digits.splitAt(index)\n        val rightSorted = right.sorted\n        val min = rightSorted.filter(_ > right.last).min\n        val (left2, right2) = rightSorted.partition(_ == min)\n        val result = (left ::: (min :: left2)) ::: right2\n        result.mkString.toLong",
    "        val digits = n.toString.map(_.asDigit).toList\n        val sorted = digits.sorted\n        val sortedReverse = sorted.reverse\n        val index = digits.indexOf(sortedReverse.head)\n        val (left, right) = digits.splitAt(index)\n        val (leftReverse, rightReverse) = left.reverse.splitAt(1)\n        val newLeft = leftReverse.head :: rightReverse\n        val newRight = sortedReverse.tail\n        val newDigits = newLeft ::: newRight\n        val newNumber = newDigits.mkString.toLong\n        if (newNumber == n) -1\n        else newNumber",
    "        val digits = n.toString.toList.map(_.asDigit)\n        val sortedDigits = digits.sorted\n        val sortedDigitsRev = sortedDigits.reverse\n        val sortedDigitsRevStr = sortedDigitsRev.mkString\n        val sortedDigitsStr = sortedDigits.mkString\n        val nStr = n.toString\n        if (nStr == sortedDigitsStr) {\n            -1\n        } else {\n            val nStrRev = nStr.reverse\n            val index = nStrRev.indexOf(sortedDigitsRevStr)\n            val nStrRev2 = nStrRev.substring(index)\n            val nStrRev3 = nStrRev.substring(0, index)\n            val nStrRev4 = nStrRev3 + sortedDigitsRevStr\n            val nStrRev5 = nStrRev4.reverse\n            nStrRev5.toLong\n        }"
  ]
}