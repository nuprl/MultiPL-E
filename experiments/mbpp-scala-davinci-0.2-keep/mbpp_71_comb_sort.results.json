{
  "name": "mbpp_71_comb_sort",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (swapped) {\n            gap = (gap / 1.3).toInt\n            if (gap < 1) gap = 1\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509810,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprwmjg0db.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprwmjg0db.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap * 10 / 13).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509810,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpowvm_so2.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpowvm_so2.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(1, (gap / 1.25).toInt)\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        return nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509810,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaaa8bs77.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaaa8bs77.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.247330950103979).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509810,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprkl5scp7.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprkl5scp7.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap != 1 || swapped) {\n            gap = max(1, (gap / 1.3).toInt)\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509810,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj1uw88dk.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpj1uw88dk.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpk9mvmhmz.scala:17:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums = swap(nums, i, i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        val gap = nums.length\n        var swapped = true\n        var temp = 0L\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509810,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp88d3prrv.scala:10:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (gap > \u001b[31m1\u001b[0m) gap = (gap / \u001b[31m1.3\u001b[0m).toInt\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Reassignment to val gap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp88d3prrv.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp88d3prrv.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap * 10 / 13).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509810,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpowvm_so2.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpowvm_so2.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while(gap > 1 || swapped) {\n            if(gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while(i + gap < nums.length) {\n                if(nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124133,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpborb_thk.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpborb_thk.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                val newNums = nums.sliding(gap, gap).map(x => if (x.length == 2) if (x(0) > x(1)) x(0) else x(1) else x(0)).toList\n                sort(newNums, (gap * 10) / 13)\n            }\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnrx19i9g.scala:16)\n\tat Problem.main(tmpnrx19i9g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpk9mvmhmz.scala:17:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums = swap(nums, i, i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var sorted = false\n        var gap = nums.length\n        while (!sorted) {\n            gap = (gap / 1.3).toInt\n            if (gap == 0) gap = 1\n            var i = 0\n            sorted = true\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    sorted = false\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp91ahy67v.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp91ahy67v.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var sorted = false\n        var gap = nums.length\n        var shrink = 1.3\n        var temp = 0L\n        while(!sorted) {\n            gap = floor(gap / shrink).toInt\n            if(gap > 1) sorted = false\n            else {\n                gap = 1\n                sorted = true\n            }\n            var i = 0\n            while(i + gap < nums.length) {\n                if(nums(i) > nums(i + gap)) {\n                    temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    sorted = false\n                }\n                i += 1\n            }\n        }\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6t557kcv.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6t557kcv.scala:22:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        val gap = nums.length\n        var swapped = true\n        var temp = 0L\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp1yjl5cyk.scala:10:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (gap > \u001b[31m1\u001b[0m) gap = (gap / \u001b[31m1.3\u001b[0m).toInt\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Reassignment to val gap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1yjl5cyk.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1yjl5cyk.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def shrinkFactor(n : Int) : Int = {\n            if (n % 2 == 0) n / 2 else n * 3 + 1\n        }\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        def combSort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                val newNums = (0 until nums.length - gap).foldLeft(nums)((nums, i) => {\n                    if (nums(i) > nums(i + gap)) swap(nums, i, i + gap)\n                    else nums\n                })\n                combSort(newNums, shrinkFactor(gap))\n            }\n        }\n        combSort(nums, shrinkFactor(nums.length))\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1k_zki2y.scala:26)\n\tat Problem.main(tmp1k_zki2y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                val newNums = nums.zipWithIndex.filter(x => x._2 % gap != 0).map(_._1)\n                sort(newNums, max(1, (gap * 10) / 13))\n            }\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpaf9rtf7c.scala:16)\n\tat Problem.main(tmpaf9rtf7c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(1, (gap / 1.3).toInt)\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpofxx63bp.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpofxx63bp.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var sorted = false\n        var gap = nums.length\n        var shrink = 1.3\n        while (!sorted) {\n            gap = (gap / shrink).toInt\n            if (gap <= 1) {\n                gap = 1\n                sorted = true\n            }\n            var i = 0\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    sorted = false\n                }\n                i += 1\n            }\n        }\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124148,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptsi7u6lq.scala:19:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptsi7u6lq.scala:20:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def shrinkFactor(n : Int) : Int = {\n            if (n % 2 == 0) n / 2 else (n * 3) + 1\n        }\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                var sorted = true\n                for (i <- 0 until nums.length - gap) {\n                    if (nums(i) > nums(i + gap)) {\n                        nums.updated(i, nums(i + gap)).updated(i + gap, nums(i))\n                        sorted = false\n                    }\n                }\n                if (sorted) nums\n                else sort(nums, shrinkFactor(gap))\n            }\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc8zeid_t.scala:30)\n\tat Problem.main(tmpc8zeid_t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        var nums2 = nums\n        while (gap > 1 || swapped) {\n            gap = max(1, (gap / 1.3).toInt)\n            swapped = false\n            for (i <- 0 to nums2.length - gap - 1) {\n                if (nums2(i) > nums2(i + gap)) {\n                    val temp = nums2(i)\n                    nums2 = nums2.updated(i, nums2(i + gap))\n                    nums2 = nums2.updated(i + gap, temp)\n                    swapped = true\n                }\n            }\n        }\n        nums2\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                val newNums = nums.sliding(gap, gap).map(x => if (x.size == gap) x.sorted else x).flatten.toList\n                sort(newNums, (gap * 10) / 13)\n            }\n        }\n        sort(nums, nums.size)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.247330950103979).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509810,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprkl5scp7.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprkl5scp7.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var sorted = false\n        var gap = nums.length\n        var shrink = 1.3\n        var temp = 0L\n        while (!sorted) {\n            gap = floor(gap / shrink).toInt\n            if (gap > 1) sorted = false\n            else {\n                gap = 1\n                sorted = true\n            }\n            var i = 0\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    sorted = false\n                }\n                i += 1\n            }\n        }\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpif_ctfqi.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpif_ctfqi.scala:22:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap / 1.3).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp2auzrpw2.scala:19:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    nums = swap(nums, i, i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val tmp = nums(i)\n            nums.updated(i, nums(j)).updated(j, tmp)\n        }\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap / 1.3).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp4pwwwuen.scala:19:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    nums = swap(nums, i, i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap / 1.25).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509800,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2g3szdnp.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2g3szdnp.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        val gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp__hrgkp7.scala:9:29 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (gap > \u001b[31m1\u001b[0m) gap = (gap / \u001b[31m1.3\u001b[0m).toInt\n\u001b[31m\u001b[31m  |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                         Reassignment to val gap\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp__hrgkp7.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp__hrgkp7.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        val gap = nums.length\n        var swapped = true\n        var newGap = gap\n        while (swapped || newGap > 1) {\n            swapped = false\n            newGap = (newGap / 1.3).toInt\n            if (newGap < 1) newGap = 1\n            for (i <- 0 until nums.length - newGap) {\n                if (nums(i) > nums(i + newGap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + newGap)\n                    nums(i + newGap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeksjoiim.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i) = nums(i + newGap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeksjoiim.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums(i + newGap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) {\n                nums\n            } else {\n                val newNums = nums.zipWithIndex.filter(x => x._2 % gap == 0).map(_._1)\n                sort(newNums.sorted, (gap * 10 / 13).toInt)\n            }\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2d2e83h5.scala:17)\n\tat Problem.main(tmp2d2e83h5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        return nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo0luw0o2.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo0luw0o2.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(1, (gap / 1.3).toInt)\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpofxx63bp.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpofxx63bp.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(1, (gap / 1.3).toInt)\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpofxx63bp.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpofxx63bp.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def shrink(gap : Int) : Int = {\n            if (gap == 1) 1\n            else max(1, (gap / 1.3).toInt)\n        }\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                var swapped = false\n                var i = 0\n                var newNums = nums\n                while (i + gap < nums.length) {\n                    if (nums(i) > nums(i + gap)) {\n                        newNums = swap(newNums, i, i + gap)\n                        swapped = true\n                    }\n                    i += 1\n                }\n                if (swapped) sort(newNums, shrink(gap))\n                else newNums\n            }\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph5pehp5q.scala:34)\n\tat Problem.main(tmph5pehp5q.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                val newNums = nums.zipWithIndex.filter(p => p._2 % gap == 0).map(_._1)\n                sort(newNums, gap - 1)\n            }\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptrfzy68a.scala:16)\n\tat Problem.main(tmptrfzy68a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpk9mvmhmz.scala:17:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums = swap(nums, i, i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        var result = nums\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until result.length - gap) {\n                if (result(i) > result(i + gap)) {\n                    val temp = result(i)\n                    result = result.updated(i, result(i + gap))\n                    result = result.updated(i + gap, temp)\n                    swapped = true\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap / 1.3).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy3f7w1qe.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy3f7w1qe.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        val gap = nums.length\n        var swapped = true\n        var temp = 0L\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509810,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp88d3prrv.scala:10:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (gap > \u001b[31m1\u001b[0m) gap = (gap / \u001b[31m1.3\u001b[0m).toInt\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Reassignment to val gap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp88d3prrv.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp88d3prrv.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                val newNums = nums.zipWithIndex.filter(x => x._2 % gap == 0).map(x => x._1)\n                val sorted = newNums.sortWith(_ < _)\n                val newList = nums.zipWithIndex.map(x => if (x._2 % gap == 0) sorted.head else x._1)\n                sort(newList, gap - 1)\n            }\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8r30hfap.scala:18)\n\tat Problem.main(tmp8r30hfap.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        val gap = nums.length\n        var swapped = true\n        var temp = 0L\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509810,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp88d3prrv.scala:10:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (gap > \u001b[31m1\u001b[0m) gap = (gap / \u001b[31m1.3\u001b[0m).toInt\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Reassignment to val gap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp88d3prrv.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp88d3prrv.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap > 1) {\n                var i = 0\n                while (i + gap < nums.length) {\n                    if (nums(i) > nums(i + gap)) {\n                        nums = swap(nums, i, i + gap)\n                    }\n                    i += 1\n                }\n                sort(nums, (gap * 10) / 13)\n            }\n            else nums\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124145,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp6zrh0sh4.scala:15:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                        nums = swap(nums, i, i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap * 10 / 13).toInt\n            if (gap < 1) gap = 1\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkiy9080m.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkiy9080m.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap * 10 / 13).toInt\n            if (gap == 9 || gap == 10) gap = 11\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124121,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphl9zir7h.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphl9zir7h.scala:18:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def shrink(gap : Int) : Int = {\n            if (gap == 1) 1\n            else max(1, gap / 1.3).toInt\n        }\n        var gap = nums.length\n        var swapped = true\n        var result = nums\n        while (gap > 1 || swapped) {\n            gap = shrink(gap)\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (result(i) > result(i + gap)) {\n                    val temp = result(i)\n                    result = result.updated(i, result(i + gap))\n                    result = result.updated(i + gap, temp)\n                    swapped = true\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        val gap = nums.length\n        var swapped = true\n        var temp = 0L\n        while (swapped || gap > 1) {\n            swapped = false\n            var i = 0\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n            gap = (gap / 1.3).toInt\n        }\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp92gzeen5.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp92gzeen5.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp92gzeen5.scala:21:16 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m            gap = (gap / \u001b[31m1.3\u001b[0m).toInt\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val gap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        val gap = nums.length\n        var swapped = true\n        var temp : Long = 0\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpno91pw_t.scala:10:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (gap > \u001b[31m1\u001b[0m) gap = (gap / \u001b[31m1.3\u001b[0m).toInt\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Reassignment to val gap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpno91pw_t.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpno91pw_t.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while(gap > 1 || swapped) {\n            gap = (gap * 10 / 13).toInt\n            if(gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while(i + gap < nums.length) {\n                if(nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaxeh7afc.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaxeh7afc.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        var nums2 = nums\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums2.length) {\n                if (nums2(i) > nums2(i + gap)) {\n                    val temp = nums2(i)\n                    nums2 = nums2.updated(i, nums2(i + gap))\n                    nums2 = nums2.updated(i + gap, temp)\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums2\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap / 1.3).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy3f7w1qe.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy3f7w1qe.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def combSort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                val newNums = nums.zipWithIndex.filter(x => x._2 % gap != 0).map(_._1)\n                combSort(newNums, max(1, (gap * 10) / 13))\n            }\n        }\n        combSort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124159,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpp5tx87h8.scala:16)\n\tat Problem.main(tmpp5tx87h8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(1, (gap / 1.3).toInt)\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpofxx63bp.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpofxx63bp.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap / 1.3).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgl5jruga.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgl5jruga.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpk9mvmhmz.scala:17:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums = swap(nums, i, i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpk9mvmhmz.scala:17:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums = swap(nums, i, i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        def combSort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                var sorted = true\n                for (i <- 0 until nums.length - gap) {\n                    if (nums(i) > nums(i + gap)) {\n                        sorted = false\n                        nums(i) = nums(i + gap)\n                        nums(i + gap) = nums(i)\n                    }\n                }\n                if (sorted) nums\n                else combSort(nums, (gap * 10) / 13)\n            }\n        }\n        combSort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_n_zd0r9.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                        nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_n_zd0r9.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                        nums(i + gap) = nums(i)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) return nums\n            var i = 0\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                }\n                i += 1\n            }\n            sort(nums, (gap * 10 / 13).toInt)\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124155,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpgt1nj46_.scala:15:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums = swap(nums, i, i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap / 1.3).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy3f7w1qe.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy3f7w1qe.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def shrink(gap : Int) : Int = {\n            if (gap == 1) 1\n            else max(1, (gap / 1.3).toInt)\n        }\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val tmp = nums(i)\n            nums.updated(i, nums(j)).updated(j, tmp)\n        }\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                var i = 0\n                var swapped = false\n                while (i + gap < nums.length) {\n                    if (nums(i) > nums(i + gap)) {\n                        nums = swap(nums, i, i + gap)\n                        swapped = true\n                    }\n                    i += 1\n                }\n                if (swapped) sort(nums, shrink(gap))\n                else nums\n            }\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp7emvumtk.scala:21:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                        nums = swap(nums, i, i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.247330950103979).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509810,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprkl5scp7.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprkl5scp7.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.247330950103979).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509810,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprkl5scp7.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprkl5scp7.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def combSort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                val nums2 = nums.zipWithIndex.filter(x => x._2 % gap == 0).map(_._1)\n                val nums3 = nums.zipWithIndex.filter(x => x._2 % gap != 0).map(_._1)\n                val nums4 = combSort(nums2, 1) ++ combSort(nums3, 1)\n                combSort(nums4, gap / 1.3.toInt)\n            }\n        }\n        combSort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124165,
      "stdout": "None",
      "stderr": "None",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def shrink(gap : Int) : Int = {\n            if (gap == 1) 1\n            else max(1, gap / 1.3).toInt\n        }\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                var swapped = false\n                var i = 0\n                var newNums = nums\n                while (i + gap < nums.length) {\n                    if (nums(i) > nums(i + gap)) {\n                        newNums = swap(newNums, i, i + gap)\n                        swapped = true\n                    }\n                    i += 1\n                }\n                if (swapped) sort(newNums, shrink(gap))\n                else newNums\n            }\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpejj8eqpg.scala:34)\n\tat Problem.main(tmpejj8eqpg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpk9mvmhmz.scala:17:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums = swap(nums, i, i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(gap / 1.3, 1).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpay2r7s9z.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpay2r7s9z.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(1, (gap / 1.3).toInt)\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpofxx63bp.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpofxx63bp.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def shrink(gap : Int) : Int = {\n            if (gap == 1) 1\n            else max(1, (gap / 1.3).toInt)\n        }\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = shrink(gap)\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124160,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi0j2_o4c.scala:18:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi0j2_o4c.scala:19:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def shrink(gap : Int) : Int = {\n            if (gap == 1) 1\n            else max(1, gap/1.3).toInt\n        }\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                var swapped = false\n                var newNums = nums\n                for (i <- 0 to nums.length - gap - 1) {\n                    if (nums(i) > nums(i + gap)) {\n                        newNums = swap(newNums, i, i + gap)\n                        swapped = true\n                    }\n                }\n                if (swapped) sort(newNums, shrink(gap))\n                else newNums\n            }\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpglolgx9k.scala:32)\n\tat Problem.main(tmpglolgx9k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(gap / 1.25, 1).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1zo7yk1s.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1zo7yk1s.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def shrinkFactor(n : Int) : Int = {\n            if (n % 2 == 0) n / 2 else n / 3\n        }\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = true\n        var nums2 = nums\n        while (gap > 1 || swapped) {\n            gap = shrinkFactor(gap)\n            swapped = false\n            for (i <- 0 until nums2.length - gap) {\n                if (nums2(i) > nums2(i + gap)) {\n                    nums2 = swap(nums2, i, i + gap)\n                    swapped = true\n                }\n            }\n        }\n        nums2\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpiiou9gdo.scala:30)\n\tat Problem.main(tmpiiou9gdo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = false\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7i8c4ifb.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7i8c4ifb.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                val newNums = for (i <- 0 until nums.length - gap) yield {\n                    if (nums(i) > nums(i + gap)) {\n                        val temp = nums(i)\n                        nums(i) = nums(i + gap)\n                        nums(i + gap) = temp\n                    }\n                    nums(i)\n                }\n                sort(newNums.toList ::: nums.slice(nums.length - gap, nums.length), (gap * 10 / 13).max(1))\n            }\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdguav9ux.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                        nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdguav9ux.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                        nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(gap / 1.3, 1).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpay2r7s9z.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpay2r7s9z.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        val gap = nums.length\n        var swapped = true\n        var temp = 0L\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509810,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp88d3prrv.scala:10:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (gap > \u001b[31m1\u001b[0m) gap = (gap / \u001b[31m1.3\u001b[0m).toInt\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Reassignment to val gap\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp88d3prrv.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp88d3prrv.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap / 1.3).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp2auzrpw2.scala:19:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    nums = swap(nums, i, i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap / 1.3).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgl5jruga.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgl5jruga.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(gap / 1.25, 1).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1zo7yk1s.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp1zo7yk1s.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while(gap > 1 || swapped) {\n            gap = max(1, (gap / 1.3).toInt)\n            swapped = false\n            for(i <- 0 to nums.length - gap - 1) {\n                if(nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        return nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnwxfkhz9.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnwxfkhz9.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def shrink(gap : Int) : Int = {\n            if (gap == 1) 1\n            else max(1, (gap / 1.3).toInt)\n        }\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = false\n        var nums2 = nums\n        do {\n            gap = shrink(gap)\n            swapped = false\n            for (i <- 0 until nums2.length - gap) {\n                if (nums2(i) > nums2(i + gap)) {\n                    nums2 = swap(nums2, i, i + gap)\n                    swapped = true\n                }\n            }\n        } while (gap > 1 || swapped)\n        nums2\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124157,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpttusqy7i.scala:17:8 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m        \u001b[33mdo\u001b[0m {\n\u001b[31m\u001b[31m   |\u001b[0m        ^^\u001b[0m\n\u001b[31m   |\u001b[0m        end of statement expected but 'do' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap / 1.3).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgl5jruga.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgl5jruga.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap / 1.3).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp2auzrpw2.scala:19:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    nums = swap(nums, i, i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = true\n        var nums2 = nums\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    nums2 = swap(nums2, i, i + gap)\n                    swapped = true\n                }\n            }\n        }\n        nums2\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124166,
      "stdout": "None",
      "stderr": "None",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def shrinkFactor(n : Int) : Int = {\n            if (n % 2 == 0) n / 2 else n / 3\n        }\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums(i) = nums(j)\n            nums(j) = temp\n            nums\n        }\n        var gap = nums.length\n        var swapped = false\n        while (gap > 1 || swapped) {\n            gap = shrinkFactor(gap)\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    swap(nums, i, i + gap)\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvqy7jufl.scala:11:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            nums(i) = nums(j)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvqy7jufl.scala:12:12 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            nums(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = floor(gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124133,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbmidp7ny.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbmidp7ny.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                var i = 0\n                var sorted = false\n                while (i + gap < nums.length) {\n                    if (nums(i) > nums(i + gap)) {\n                        nums = swap(nums, i, i + gap)\n                        sorted = false\n                    }\n                    i += 1\n                }\n                if (sorted) nums\n                else sort(nums, (gap * 10 / 13).toInt)\n            }\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp2b2opi3_.scala:17:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                        nums = swap(nums, i, i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap / 1.3).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp2auzrpw2.scala:19:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                    nums = swap(nums, i, i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap * 10 / 13).toInt\n            if (gap < 1) gap = 1\n            swapped = false\n            for (i <- 0 to nums.length - gap - 1) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpre0t60ri.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpre0t60ri.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        val gap = nums.length\n        var swapped = true\n        var newGap = gap\n        while (swapped || newGap > 1) {\n            swapped = false\n            newGap = (newGap / 1.3).toInt\n            if (newGap < 1) newGap = 1\n            for (i <- 0 until nums.length - newGap) {\n                if (nums(i) > nums(i + newGap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + newGap)\n                    nums(i + newGap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124149,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeksjoiim.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i) = nums(i + newGap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeksjoiim.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums(i + newGap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        val gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmp__hrgkp7.scala:9:29 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m (gap > \u001b[31m1\u001b[0m) gap = (gap / \u001b[31m1.3\u001b[0m).toInt\n\u001b[31m\u001b[31m  |\u001b[0m                         ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                         Reassignment to val gap\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp__hrgkp7.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp__hrgkp7.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(1, (gap / 1.3).toInt)\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        return nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcnxvaw9p.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcnxvaw9p.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                var newNums = nums\n                for (i <- 0 to nums.length - gap - 1) {\n                    if (nums(i) > nums(i + gap)) newNums = swap(newNums, i, i + gap)\n                }\n                sort(newNums, (gap * 10 / 13).toInt)\n            }\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplykeovtu.scala:23)\n\tat Problem.main(tmplykeovtu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(1, (gap / 1.3).toInt)\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpofxx63bp.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpofxx63bp.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap / 1.3).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgl5jruga.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgl5jruga.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap * 10 / 13).toInt\n            if (gap < 1) gap = 1\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkiy9080m.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpkiy9080m.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var sorted = false\n        var gap = nums.length\n        var temp = 0L\n        while (!sorted) {\n            gap = (gap / 1.25).toInt\n            if (gap > 1) sorted = false\n            else {\n                gap = 1\n                sorted = true\n            }\n            var i = 0\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    sorted = false\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0llbdw2r.scala:20:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0llbdw2r.scala:21:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = (gap / 1.3).toInt\n            if (gap < 1) gap = 1\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgl5jruga.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgl5jruga.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509799,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpk9mvmhmz.scala:17:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums = swap(nums, i, i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(gap / 1.3, 1).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124114,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpay2r7s9z.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpay2r7s9z.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) return nums\n            var i = 0\n            var newNums = nums\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) newNums = swap(newNums, i, i + gap)\n                i += 1\n            }\n            sort(newNums, (gap * 10 / 13).toInt)\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxn4e_wwx.scala:23)\n\tat Problem.main(tmpxn4e_wwx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def combSort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 0) nums\n            else {\n                val sorted = for (i <- 0 until nums.length - gap) yield {\n                    if (nums(i) > nums(i + gap)) {\n                        val temp = nums(i)\n                        nums(i) = nums(i + gap)\n                        nums(i + gap) = temp\n                    }\n                    nums(i)\n                }\n                combSort(sorted.toList ::: nums.slice(sorted.length, nums.length), (gap * 10 / 13).toInt)\n            }\n        }\n        combSort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124161,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprn1tmosv.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                        nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprn1tmosv.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                        nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def shrink(gap : Int) : Int = floor(gap / 1.3).toInt\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val (a, b) = nums.splitAt(i)\n            val (c, d) = b.splitAt(j - i)\n            a ++ List(d.head) ++ c ++ List(c.head) ++ d.tail\n        }\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                val sorted = (0 until nums.length - gap).foldLeft(nums)((nums, i) => if (nums(i) > nums(i + gap)) swap(nums, i, i + gap) else nums)\n                sort(sorted, shrink(gap))\n            }\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_64w80ij.scala:22)\n\tat Problem.main(tmp_64w80ij.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(1, (gap / 1.3).toInt)\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    nums = swap(nums, i, i + gap)\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124162,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpsgeq8w8z.scala:17:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    nums = swap(nums, i, i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            gap = max(1, (gap / 1.25).toInt)\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7gi8z6tw.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7gi8z6tw.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            swapped = false\n            for (i <- 0 until nums.length - gap) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmqh469ma.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        var gap = nums.length\n        var swapped = true\n        while (gap > 1 || swapped) {\n            if (gap > 1) gap = (gap / 1.3).toInt\n            var i = 0\n            swapped = false\n            while (i + gap < nums.length) {\n                if (nums(i) > nums(i + gap)) {\n                    val temp = nums(i)\n                    nums(i) = nums(i + gap)\n                    nums(i + gap) = temp\n                    swapped = true\n                }\n                i += 1\n            }\n        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    nums(i) = nums(i + gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo64c9v0_.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    nums(i + gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m value update is not a member of List[Long] - did you mean nums.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a list of elements.\n    def combSort(nums : List[Long]) : List[Long] = {\n        def shrink(gap : Int) : Int = {\n            if (gap == 1) 1\n            else max(1, gap / 1.3).toInt\n        }\n        def swap(nums : List[Long], i : Int, j : Int) : List[Long] = {\n            val temp = nums(i)\n            nums.updated(i, nums(j)).updated(j, temp)\n        }\n        def sort(nums : List[Long], gap : Int) : List[Long] = {\n            if (gap == 1) nums\n            else {\n                var swapped = false\n                var sorted = nums\n                for (i <- 0 until nums.length - gap) {\n                    if (nums(i) > nums(i + gap)) {\n                        sorted = swap(sorted, i, i + gap)\n                        swapped = true\n                    }\n                }\n                if (swapped) sort(sorted, shrink(gap))\n                else sorted\n            }\n        }\n        sort(nums, nums.length)\n    }\n    def main(args: Array[String]) = {\n    assert(combSort((List[Long](5l.toLong, 15l.toLong, 37l.toLong, 25l.toLong, 79l.toLong))).equals((List[Long](5l.toLong, 15l.toLong, 25l.toLong, 37l.toLong, 79l.toLong))));\n    assert(combSort((List[Long](41l.toLong, 32l.toLong, 15l.toLong, 19l.toLong, 22l.toLong))).equals((List[Long](15l.toLong, 19l.toLong, 22l.toLong, 32l.toLong, 41l.toLong))));\n    assert(combSort((List[Long](99l.toLong, 15l.toLong, 13l.toLong, 47l.toLong))).equals((List[Long](13l.toLong, 15l.toLong, 47l.toLong, 99l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplojbkrjb.scala:32)\n\tat Problem.main(tmplojbkrjb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}