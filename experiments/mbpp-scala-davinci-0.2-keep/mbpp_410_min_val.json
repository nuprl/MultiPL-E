{
  "name": "mbpp_410_min_val",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the minimum value in a given heterogeneous list.\n    def minVal(listval : List[Either[String, Long]]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_410_min_val.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minVal((List[Either[String, Long]](\"Python\", 3l, 2l, 4l, 5l, \"version\"))) == (2l));\n    assert(minVal((List[Either[String, Long]](\"Python\", 15l, 20l, 25l))) == (15l));\n    assert(minVal((List[Either[String, Long]](\"Python\", 30l, 20l, 40l, 50l, \"version\"))) == (20l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val list = listval.filter(x => x.isRight).map(x => x.right.get)\n        list.min",
    "        var min : Long = Long.MaxValue\n        for (x <- listval) {\n            x match {\n                case Left(s) => {\n                    if (s.length < min) min = s.length\n                }\n                case Right(l) => {\n                    if (l < min) min = l\n                }\n            }\n        }\n        min",
    "        listval.filter(_.isRight).map(_.right.get).min",
    "        var min = Long.MaxValue\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    if (s.toLong < min) min = s.toLong\n                }\n                case Right(l) => {\n                    if (l < min) min = l\n                }\n            }\n        }\n        min",
    "        var min = Long.MaxValue\n        for (i <- listval) {\n            if (i.isRight) {\n                if (i.right.get < min) min = i.right.get\n            }\n        }\n        min",
    "        var min = Long.MaxValue\n        listval.foreach(x => {\n            x match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l < min) min = l\n                }\n                case Right(l) => {\n                    if (l < min) min = l\n                }\n            }\n        })\n        min",
    "        var min = Long.MaxValue\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l < min) min = l\n                }\n                case Right(l) => {\n                    if (l < min) min = l\n                }\n            }\n        }\n        min",
    "        var min = Long.MaxValue\n        for (i <- listval) {\n            i match {\n                case Left(x) => {\n                    val num = x.toLong\n                    if (num < min) min = num\n                }\n                case Right(x) => {\n                    if (x < min) min = x\n                }\n            }\n        }\n        min",
    "        var min = Long.MaxValue\n        for (i <- listval) {\n            if (i.isRight) {\n                val j = i.right.get\n                if (j < min) min = j\n            }\n        }\n        min",
    "        listval.filter(x => x.isRight).map(x => x.right.get).min",
    "        var min = Long.MaxValue\n        listval.foreach(x => x match {\n            case Left(s) => {}\n            case Right(l) => if (l < min) min = l\n        })\n        min",
    "        var min = Long.MaxValue\n        for (i <- listval) {\n            if (i.isRight) {\n                val temp = i.right.get\n                if (temp < min) {\n                    min = temp\n                }\n            }\n        }\n        min",
    "        var min = Long.MaxValue\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l < min) min = l\n                }\n                case Right(l) => {\n                    if (l < min) min = l\n                }\n            }\n        }\n        min",
    "        val list = listval.filter(x => x.isRight).map(x => x.right.get)\n        list.min",
    "        var min : Long = Long.MaxValue\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val l = s.toLong\n                    if (l < min) min = l\n                }\n                case Right(l) => {\n                    if (l < min) min = l\n                }\n            }\n        }\n        return min",
    "        var min : Long = Long.MaxValue\n        for (valu <- listval) {\n            valu match {\n                case Left(str) => {\n                    val num = str.toLong\n                    if (num < min) min = num\n                }\n                case Right(num) => if (num < min) min = num\n            }\n        }\n        min",
    "        var min : Long = Long.MaxValue\n        listval.foreach(x => x match {\n            case Left(s) => {\n                if (s.toLong < min) min = s.toLong\n            }\n            case Right(l) => {\n                if (l < min) min = l\n            }\n        })\n        min",
    "        var min = Long.MaxValue\n        for (i <- listval) {\n            i match {\n                case Left(s) => min = min\n                case Right(l) => if (l < min) min = l\n            }\n        }\n        min",
    "        var min : Long = Long.MaxValue\n        for (i <- listval) {\n            i match {\n                case Left(s) => {\n                    val num = s.toLong\n                    if (num < min) min = num\n                }\n                case Right(num) => if (num < min) min = num\n            }\n        }\n        min",
    "        listval.map(x => x match {\n            case Left(s) => s.toLong\n            case Right(l) => l\n        }).min"
  ]
}