{
  "name": "mbpp_736_left_insertion",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while(left <= right) {\n            val mid = (left + right) / 2\n            if(a(mid) >= x) right = mid - 1\n            else left = mid + 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) == x) return mid\n            else if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        return left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1 else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid\n            else left = mid + 1\n        }\n        if (a(left) >= x) left else left + 1\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) == x) return m\n            else if (a(m) > x) r = m - 1\n            else l = m + 1\n        }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m\n            else l = m + 1\n        }\n        if (a(l) >= x) l else l + 1\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        if (a(l) < x) l + 1\n        else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m\n            else l = m + 1\n        }\n        if (a(l) >= x) l\n        else l + 1\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        if (a(l) < x) l + 1\n        else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m\n            else l = m + 1\n        }\n        if (a(l) < x) l + 1\n        else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1\n        else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid\n            else left = mid + 1\n        }\n        if (a(left) >= x) left else left + 1\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        if (a(l) < x) l + 1\n        else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpek6w8xif.scala:16)\n\tat Problem.main(tmpek6w8xif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1 else r = m\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1\n        else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid\n            else left = mid + 1\n        }\n        if (a(left) >= x) left else left + 1\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1 else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0; var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1\n        else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0; var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1 else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) == x) return m\n            else if (a(m) > x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        var m = 0\n        while (l <= r) {\n            m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        if (a(l) < x) l + 1\n        else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid - 1\n            else left = mid + 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0;\n        var r = a.length - 1;\n        while (l < r) {\n            val m = (l + r) / 2;\n            if (a(m) >= x) r = m;\n            else l = m + 1;\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) == x) return m\n            else if (a(m) > x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid - 1\n            else left = mid + 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpek6w8xif.scala:16)\n\tat Problem.main(tmpek6w8xif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1 else r = m\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m\n            else l = m + 1\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = l + (r - l) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        if (a(l) < x) l + 1\n        else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpek6w8xif.scala:16)\n\tat Problem.main(tmpek6w8xif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp51rk3uoz.scala:15)\n\tat Problem.main(tmp51rk3uoz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var i = 0\n        while (i < a.length && a(i) < x) i += 1\n        i\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var i = 0\n        while (i < a.length && a(i) < x) i += 1\n        return i\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0; var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val mid = (l + r) / 2\n            if (a(mid) >= x) r = mid - 1\n            else l = mid + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1\n        else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) == x) return mid\n            else if (a(mid) > x) right = mid - 1\n            else left = mid + 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (x <= a(m)) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1 else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid\n            else left = mid + 1\n        }\n        if (a(left) >= x) left else left + 1\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1 else r = m\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid - 1\n            else left = mid + 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        if (a(l) < x) l + 1\n        else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1\n        else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1 else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var i = 0\n        while (i < a.length && a(i) < x) i += 1\n        i\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m\n            else l = m + 1\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0L\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m.toInt) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124247,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpllxm595k.scala:11:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m r = m - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    Long\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid - 1\n            else left = mid + 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) == x) return mid\n            else if (a(mid) > x) right = mid - 1\n            else left = mid + 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0L\n        var r = a.length - 1\n        while (l < r) {\n            val mid = (l + r) / 2\n            if (a(mid.toInt) < x) l = mid + 1\n            else r = mid\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124247,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt13yvcsy.scala:11:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m r = mid\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (mid : Long)\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0L\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m.toInt) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124247,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplgr72_m2.scala:11:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33melse\u001b[0m r = m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (m : Long)\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m\n            else l = m + 1\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpek6w8xif.scala:16)\n\tat Problem.main(tmpek6w8xif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0; var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid - 1\n            else left = mid + 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1 else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid - 1\n            else left = mid + 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) == x) return mid\n            else if (a(mid) > x) right = mid - 1\n            else left = mid + 1\n        }\n        return left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid - 1\n            else left = mid + 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpek6w8xif.scala:16)\n\tat Problem.main(tmpek6w8xif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        if (a(l) < x) l + 1\n        else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1\n        else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = a.length - 1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (a(mid) < x) low = mid + 1\n            else high = mid - 1\n        }\n        low\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m\n            else l = m + 1\n        }\n        if (a(l) < x) l + 1\n        else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1\n        else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) == x) return mid\n            else if (a(mid) > x) right = mid - 1\n            else left = mid + 1\n        }\n        return left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpek6w8xif.scala:16)\n\tat Problem.main(tmpek6w8xif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) == x) return m\n            else if (a(m) > x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var i = 0\n        while (i < a.length && a(i) < x) i += 1\n        return i\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        var mid = 0\n        while (left <= right) {\n            mid = (left + right) / 2\n            if (a(mid) == x) return mid\n            else if (a(mid) > x) right = mid - 1\n            else left = mid + 1\n        }\n        return mid\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpq_i54fsw.scala:18)\n\tat Problem.main(tmpq_i54fsw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0;\n        var r = a.length - 1;\n        while (l <= r) {\n            val m = (l + r) / 2;\n            if (a(m) < x) l = m + 1;\n            else r = m - 1;\n        }\n        l;\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1\n        else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1\n        else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        if (a.isEmpty) return 0\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1\n        else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1 else r = m\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m\n            else l = m + 1\n        }\n        if (a(l) >= x) l else l + 1\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpek6w8xif.scala:16)\n\tat Problem.main(tmpek6w8xif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var i = 0\n        while (i < a.length && a(i) < x) i += 1\n        i\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpek6w8xif.scala:16)\n\tat Problem.main(tmpek6w8xif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1\n        else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1 else r = m\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1\n        else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid - 1\n            else left = mid + 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid - 1\n            else left = mid + 1\n        }\n        return left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpek6w8xif.scala:16)\n\tat Problem.main(tmpek6w8xif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val mid = (l + r) / 2\n            if (a(mid) >= x) r = mid - 1\n            else l = mid + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) == x) return mid\n            else if (a(mid) > x) right = mid - 1\n            else left = mid + 1\n        }\n        return left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp51rk3uoz.scala:15)\n\tat Problem.main(tmp51rk3uoz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpek6w8xif.scala:16)\n\tat Problem.main(tmpek6w8xif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1\n        else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l < r) {\n            val mid = (l + r) / 2\n            if (a(mid) >= x) r = mid\n            else l = mid + 1\n        }\n        if (a(l) >= x) l else l + 1\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m\n            else l = m + 1\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val mid = (l + r) / 2\n            if (a(mid) < x) l = mid + 1\n            else r = mid - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1\n        else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m\n            else l = m + 1\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m\n            else l = m + 1\n        }\n        if (a(l) >= x) l else l + 1\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid - 1\n            else left = mid + 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpek6w8xif.scala:16)\n\tat Problem.main(tmpek6w8xif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid - 1\n            else left = mid + 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpek6w8xif.scala:16)\n\tat Problem.main(tmpek6w8xif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1\n        else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) == x) return mid\n            else if (a(mid) > x) right = mid - 1\n            else left = mid + 1\n        }\n        return left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid - 1\n            else left = mid + 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = a.length - 1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (a(mid) < x) low = mid + 1\n            else high = mid - 1\n        }\n        low\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        return left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) == x) return mid\n            else if (a(mid) > x) right = mid - 1\n            else left = mid + 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        if (a.isEmpty) return 0\n        if (a.head >= x) return 0\n        var i = 0\n        while (i < a.length && a(i) < x) i += 1\n        return i.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var i = 0\n        while (i < a.length && a(i) < x) i += 1\n        i\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0L\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m.toInt) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxmqykh44.scala:10:37 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mif\u001b[0m (a(m.toInt) >= x) r = m - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     Found:    Long\n\u001b[31m   |\u001b[0m                                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp51rk3uoz.scala:15)\n\tat Problem.main(tmp51rk3uoz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) == x) return m\n            else if (a(m) > x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1\n        else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1\n        else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpek6w8xif.scala:16)\n\tat Problem.main(tmpek6w8xif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m\n            else l = m + 1\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpek6w8xif.scala:16)\n\tat Problem.main(tmpek6w8xif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1 else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        if (a(l) < x) l + 1 else l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpek6w8xif.scala:16)\n\tat Problem.main(tmpek6w8xif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m - 1\n            else l = m + 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        if (a.isEmpty) return 0\n        var left = 0\n        var right = a.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid - 1\n            else left = mid + 1\n        }\n        return left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) >= x) right = mid\n            else left = mid + 1\n        }\n        if (a(left) >= x) left else left + 1\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1 else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124255,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpccx41o2o.scala:14)\n\tat Problem.main(tmpccx41o2o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) >= x) r = m\n            else l = m + 1\n        }\n        if (a(l) >= x) l else l + 1\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = a.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (a(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (a(left) < x) left + 1 else left\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509873,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m - 1\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    def leftInsertion(a : List[Long], x : Long) : Long = {\n        var l = 0; var r = a.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (a(m) < x) l = m + 1\n            else r = m\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (6l)) == (4l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (3l)) == (2l));\n    assert(leftInsertion((List[Long](1l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)), (7l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124248,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp51rk3uoz.scala:15)\n\tat Problem.main(tmp51rk3uoz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}