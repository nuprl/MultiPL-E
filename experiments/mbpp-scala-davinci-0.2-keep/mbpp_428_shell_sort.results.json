{
  "name": "mbpp_428_shell_sort",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j -= gap\n                }\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list = list.updated(j, list(j - gap))\n                    j = j - gap\n                }\n                list = list.updated(j, temp)\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        val n = list.length\n        var h = 1\n        while (h < n / 3) h = 3 * h + 1\n        while (h >= 1) {\n            for (i <- h until n) {\n                var j = i\n                while (j >= h && list(j) < list(j - h)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - h))\n                    list = list.updated(j - h, temp)\n                    j -= h\n                }\n            }\n            h /= 3\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        def shellSort(my_list : List[Long], gap : Int) : List[Long] = {\n            if (gap == 0) my_list\n            else {\n                val new_list = my_list.zipWithIndex.filter(x => x._2 % gap == 0).map(_._1)\n                val sorted_list = insertionSort(new_list)\n                val result = my_list.zipWithIndex.map(x => if (x._2 % gap == 0) sorted_list(x._2 / gap) else x._1)\n                shellSort(result, gap / 2)\n            }\n        }\n        def insertionSort(my_list : List[Long]) : List[Long] = {\n            def insertionSort(my_list : List[Long], result : List[Long]) : List[Long] = {\n                if (my_list.isEmpty) result\n                else {\n                    val new_result = result.zipWithIndex.foldLeft(List[Long]()) {\n                        case (list, (x, i)) => if (i == 0) x :: list else if (x > my_list.head) my_list.head :: x :: list else x :: list\n                    }\n                    insertionSort(my_list.tail, new_result)\n                }\n            }\n            insertionSort(my_list, List[Long]())\n        }\n        shellSort(my_list, my_list.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\tat Problem$.$anonfun$3(tmp0q1qa4lw.scala:11)\n\tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.shellSort$1(tmp0q1qa4lw.scala:11)\n\tat Problem$.shellSort(tmp0q1qa4lw.scala:27)\n\tat Problem$.main(tmp0q1qa4lw.scala:30)\n\tat Problem.main(tmp0q1qa4lw.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvmcg65_.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvmcg65_.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122618,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvmcg65_.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvmcg65_.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    var temp = list(j)\n                    list(j) = list(j - gap)\n                    list(j - gap) = temp\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_9xpamtc.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_9xpamtc.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    list(j - gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5u4i6b95.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5u4i6b95.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j -= gap\n                }\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122618,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j -= gap\n                }\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        val n = list.length\n        var h = 1\n        while (h < n / 3) h = 3 * h + 1\n        while (h >= 1) {\n            for (i <- h until n) {\n                var j = i\n                while (j >= h && list(j) < list(j - h)) {\n                    val temp = list(j)\n                    list(j) = list(j - h)\n                    list(j - h) = temp\n                    j -= h\n                }\n            }\n            h /= 3\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp46uvid7h.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    list(j) = list(j - h)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp46uvid7h.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    list(j - h) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j -= gap\n                }\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    var temp = list(j)\n                    list(j) = list(j - gap)\n                    list(j - gap) = temp\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwemug987.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwemug987.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    list(j - gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvmcg65_.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvmcg65_.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        val n = list.length\n        var gap = n / 2\n        while (gap > 0) {\n            for (i <- gap until n) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmcps8ssi.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmcps8ssi.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122618,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5u4i6b95.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5u4i6b95.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j -= gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122618,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    var temp = list(j)\n                    list(j) = list(j - gap)\n                    list(j - gap) = temp\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaauqp2tf.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaauqp2tf.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    list(j - gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j -= gap\n                }\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j -= gap\n                }\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j -= gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j -= gap\n                }\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j -= gap\n                }\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j -= gap\n                }\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        val n = my_list.length\n        var h = 1\n        while (h < n / 3) h = 3 * h + 1\n        while (h >= 1) {\n            for (i <- h until n) {\n                var j = i\n                while (j >= h && my_list(j) < my_list(j - h)) {\n                    val temp = my_list(j)\n                    my_list(j) = my_list(j - h)\n                    my_list(j - h) = temp\n                    j -= h\n                }\n            }\n            h /= 3\n        }\n        my_list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9veh1fau.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    my_list(j) = my_list(j - h)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean my_list.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9veh1fau.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    my_list(j - h) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean my_list.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvmcg65_.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvmcg65_.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list = list.updated(j, list(j - gap))\n                    j = j - gap\n                }\n                list = list.updated(j, temp)\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var gap = my_list.length / 2\n        while (gap > 0) {\n            for (i <- gap until my_list.length) {\n                var j = i\n                while (j >= gap && my_list(j - gap) > my_list(j)) {\n                    val temp = my_list(j)\n                    my_list(j) = my_list(j - gap)\n                    my_list(j - gap) = temp\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        return my_list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe3fevpt4.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    my_list(j) = my_list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean my_list.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpe3fevpt4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    my_list(j - gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean my_list.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122618,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j -= gap\n                }\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvmcg65_.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvmcg65_.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        def sort(my_list : List[Long], gap : Int) : List[Long] = {\n            if (gap == 0) my_list\n            else {\n                val sorted_list = my_list.grouped(gap).toList.map(x => x.sorted).flatten\n                sort(sorted_list, gap / 2)\n            }\n        }\n        sort(my_list, my_list.length / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpurao36qb.scala:16)\n\tat Problem.main(tmpurao36qb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list(j) = list(j - gap)\n                    list(j - gap) = temp\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp0v02jxp.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp0v02jxp.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    list(j - gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvmcg65_.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvmcg65_.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list(j) = list(j - gap)\n                    list(j - gap) = temp\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc9eu7_3s.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpc9eu7_3s.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    list(j - gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n                i += 1\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6ycjljkz.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6ycjljkz.scala:17:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var a = my_list\n        val n = a.length\n        var h = 1\n        while (h < n / 3) h = 3 * h + 1\n        while (h >= 1) {\n            var i = h\n            while (i < n) {\n                var j = i\n                while (j >= h && a(j) < a(j - h)) {\n                    val temp = a(j)\n                    a(j) = a(j - h)\n                    a(j - h) = temp\n                    j -= h\n                }\n                i += 1\n            }\n            h /= 3\n        }\n        a.toList\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjg58x_r2.scala:16:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    a(j) = a(j - h)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjg58x_r2.scala:17:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m                    a(j - h) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list(j) = list(j - gap)\n                    list(j - gap) = temp\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp0v02jxp.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp0v02jxp.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    list(j - gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j -= gap\n                }\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7n2ehjrc.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7n2ehjrc.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122618,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        val n = my_list.length\n        var h = 1\n        while (h < n / 3) h = 3 * h + 1\n        while (h >= 1) {\n            for (i <- h until n) {\n                var j = i\n                while (j >= h && my_list(j) < my_list(j - h)) {\n                    val temp = my_list(j)\n                    my_list(j) = my_list(j - h)\n                    my_list(j - h) = temp\n                    j -= h\n                }\n            }\n            h /= 3\n        }\n        my_list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9veh1fau.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    my_list(j) = my_list(j - h)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean my_list.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9veh1fau.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    my_list(j - h) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean my_list.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j -= gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    var temp = list(j)\n                    list(j) = list(j - gap)\n                    list(j - gap) = temp\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaauqp2tf.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpaauqp2tf.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    list(j - gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvmcg65_.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuvmcg65_.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3_yyxj5q.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3_yyxj5q.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr7vgnts0.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122618,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122618,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length/2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpek0kdojl.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpek0kdojl.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j) < list(j - gap)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j -= gap\n                }\n                i += 1\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        val n = list.length\n        var gap = n / 2\n        while (gap > 0) {\n            for (i <- gap until n) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list(j) = list(j - gap)\n                    list(j - gap) = temp\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeuqhco8g.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpeuqhco8g.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    list(j - gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j -= gap\n                }\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122618,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    var temp = list(j)\n                    list(j) = list(j - gap)\n                    list(j - gap) = temp\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_9xpamtc.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_9xpamtc.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    list(j - gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    var temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp27srrku5.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            var i = gap\n            while (i < list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    var temp = list(j)\n                    list(j) = list(j - gap)\n                    list(j - gap) = temp\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwemug987.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwemug987.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    list(j - gap) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var h = 1\n        while (h < list.length / 3) h = 3 * h + 1\n        while (h >= 1) {\n            for (i <- h until list.length) {\n                var j = i\n                while (j >= h && list(j) < list(j - h)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - h))\n                    list = list.updated(j - h, temp)\n                    j -= h\n                }\n            }\n            h /= 3\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdqgx5uh4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        val n = my_list.length\n        var h = 1\n        while (h < n / 3) h = 3 * h + 1\n        while (h >= 1) {\n            for (i <- h until n) {\n                var j = i\n                while (j >= h && my_list(j) < my_list(j - h)) {\n                    val temp = my_list(j)\n                    my_list(j) = my_list(j - h)\n                    my_list(j - h) = temp\n                    j -= h\n                }\n            }\n            h /= 3\n        }\n        my_list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122619,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9veh1fau.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                    my_list(j) = my_list(j - h)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean my_list.updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9veh1fau.scala:15:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    my_list(j - h) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean my_list.updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j = j - gap\n                }\n                list(j) = temp\n            }\n            gap = gap / 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122618,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6rurwwe4.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while(gap > 0) {\n            var i = gap\n            while(i < list.length) {\n                var j = i\n                while(j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n                i = i + 1\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122625,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                while (j >= gap && list(j - gap) > list(j)) {\n                    val temp = list(j)\n                    list = list.updated(j, list(j - gap))\n                    list = list.updated(j - gap, temp)\n                    j = j - gap\n                }\n            }\n            gap = gap / 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var temp = list(i)\n                var j = i\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7rsvjtxo.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given array by using shell sort.\n    def shellSort(my_list : List[Long]) : List[Long] = {\n        var list = my_list\n        var gap = list.length / 2\n        while (gap > 0) {\n            for (i <- gap until list.length) {\n                var j = i\n                var temp = list(i)\n                while (j >= gap && list(j - gap) > temp) {\n                    list(j) = list(j - gap)\n                    j -= gap\n                }\n                list(j) = temp\n            }\n            gap /= 2\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(shellSort((List[Long](12l.toLong, 23l.toLong, 4l.toLong, 5l.toLong, 3l.toLong, 2l.toLong, 12l.toLong, 81l.toLong, 56l.toLong, 95l.toLong))).equals((List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 12l.toLong, 12l.toLong, 23l.toLong, 56l.toLong, 81l.toLong, 95l.toLong))));\n    assert(shellSort((List[Long](24l.toLong, 22l.toLong, 39l.toLong, 34l.toLong, 87l.toLong, 73l.toLong, 68l.toLong))).equals((List[Long](22l.toLong, 24l.toLong, 34l.toLong, 39l.toLong, 68l.toLong, 73l.toLong, 87l.toLong))));\n    assert(shellSort((List[Long](32l.toLong, 30l.toLong, 16l.toLong, 96l.toLong, 82l.toLong, 83l.toLong, 74l.toLong))).equals((List[Long](16l.toLong, 30l.toLong, 32l.toLong, 74l.toLong, 82l.toLong, 83l.toLong, 96l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122620,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7n2ehjrc.scala:13:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    list(j) = list(j - gap)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7n2ehjrc.scala:16:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                list(j) = temp\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}