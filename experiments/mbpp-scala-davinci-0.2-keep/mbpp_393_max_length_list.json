{
  "name": "mbpp_393_max_length_list",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the list with maximum length.\n    def maxLengthList(input_list : List[List[Long]]) : Either[Long, List[Long]] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxLengthList((List[List[Long]](List[Long](0l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong)))).equals((3l, List[Long](13l.toLong, 15l.toLong, 17l.toLong))));\n    assert(maxLengthList((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong)))).equals((5l, List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong))));\n    assert(maxLengthList((List[List[Long]](List[Long](3l.toLong, 4l.toLong, 5l.toLong), List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong)))).equals((4l, List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (input_list.isEmpty) Left(0)\n        else {\n            val max_length = input_list.map(x => x.length).max\n            val max_list = input_list.filter(x => x.length == max_length)\n            if (max_list.length == 1) Right(max_list(0))\n            else Left(max_length)\n        }",
    "        val max_len = input_list.map(_.length).max\n        val max_len_list = input_list.filter(_.length == max_len)\n        if (max_len_list.length == 1) Right(max_len_list(0))\n        else Left(max_len)",
    "        if (input_list.length == 0) Left(0)\n        else {\n            var max_length = 0\n            var max_list : List[Long] = List()\n            for (list <- input_list) {\n                if (list.length > max_length) {\n                    max_length = list.length\n                    max_list = list\n                }\n            }\n            Right(max_list)\n        }",
    "        if (input_list.isEmpty) Left(0)\n        else {\n            val max_length = input_list.map(_.length).max\n            val max_length_list = input_list.filter(_.length == max_length)\n            if (max_length_list.length == 1) Right(max_length_list(0))\n            else Left(max_length)\n        }",
    "        if (input_list.isEmpty) Left(0)\n        else {\n            val max_list = input_list.maxBy(_.length)\n            Right(max_list)\n        }",
    "        if (input_list.isEmpty) Left(0)\n        else {\n            val max_length = input_list.map(_.length).max\n            val max_length_list = input_list.filter(_.length == max_length)\n            if (max_length_list.length == 1) Right(max_length_list(0))\n            else Left(max_length)\n        }",
    "        if (input_list.length == 0) Left(0)\n        else {\n            val max_length = input_list.map(_.length).max\n            val max_length_list = input_list.filter(_.length == max_length)\n            if (max_length_list.length == 1) Right(max_length_list(0))\n            else Left(max_length)\n        }",
    "        val max_length = input_list.map(x => x.length).max\n        val max_length_list = input_list.filter(x => x.length == max_length)\n        if (max_length_list.length == 1) Right(max_length_list.head)\n        else Left(max_length)",
    "        // Write your code here\n        val max_length = input_list.map(x => x.length).max\n        val max_length_list = input_list.filter(x => x.length == max_length)\n        if (max_length_list.length == 1) {\n            Right(max_length_list(0))\n        } else {\n            Left(max_length)\n        }",
    "        if (input_list.isEmpty) Left(0)\n        else {\n            val max_length = input_list.map(x => x.length).max\n            val max_length_list = input_list.filter(x => x.length == max_length)\n            if (max_length_list.length == 1) Right(max_length_list(0))\n            else Left(max_length)\n        }",
    "        val max_length = input_list.map(_.length).max\n        val max_length_list = input_list.filter(_.length == max_length)\n        if (max_length_list.length == 1) Right(max_length_list(0))\n        else Left(max_length)",
    "        if (input_list.isEmpty) Left(0)\n        else {\n            val max_length = input_list.map(x => x.length).max\n            val max_list = input_list.filter(x => x.length == max_length)\n            if (max_list.length == 1) Right(max_list(0))\n            else Left(max_length)\n        }",
    "        val max_length = input_list.map(x => x.length).max\n        val max_length_list = input_list.filter(x => x.length == max_length)\n        if (max_length_list.length == 1) {\n            Right(max_length_list.head)\n        } else {\n            Left(max_length)\n        }",
    "        val max_length = input_list.map(_.length).max\n        val max_length_list = input_list.filter(_.length == max_length)\n        if (max_length_list.length == 1) Right(max_length_list.head)\n        else Left(max_length)",
    "        if (input_list.length == 0) {\n            Left(0)\n        } else {\n            val max_length = input_list.map(_.length).max\n            val max_length_list = input_list.filter(_.length == max_length)\n            if (max_length_list.length == 1) {\n                Right(max_length_list(0))\n            } else {\n                Left(max_length)\n            }\n        }",
    "        val max_length = input_list.map(_.length).max\n        val max_length_list = input_list.filter(_.length == max_length)\n        if (max_length_list.length == 1) Right(max_length_list(0))\n        else Left(max_length)",
    "        val max_length = input_list.map(_.length).max\n        val max_length_list = input_list.filter(_.length == max_length)\n        if (max_length_list.length == 1) Right(max_length_list.head)\n        else Left(max_length)",
    "        var max_length = 0\n        var max_list : List[Long] = null\n        for (list <- input_list) {\n            if (list.length > max_length) {\n                max_length = list.length\n                max_list = list\n            }\n        }\n        if (max_list == null) Left(0) else Right(max_list)",
    "        if (input_list.length == 0) Left(0)\n        else {\n            var max_length = 0\n            var max_list : List[Long] = List()\n            for (list <- input_list) {\n                if (list.length > max_length) {\n                    max_length = list.length\n                    max_list = list\n                }\n            }\n            Right(max_list)\n        }",
    "        if (input_list.length == 0) {\n            Left(0)\n        } else {\n            var max_length = input_list(0).length\n            var max_list = input_list(0)\n            for (i <- 1 until input_list.length) {\n                if (input_list(i).length > max_length) {\n                    max_length = input_list(i).length\n                    max_list = input_list(i)\n                }\n            }\n            Right(max_list)\n        }"
  ]
}