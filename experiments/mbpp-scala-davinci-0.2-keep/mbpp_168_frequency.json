{
  "name": "mbpp_168_frequency",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        a.count(_ == x)",
    "        a.filter(_ == x).length",
    "        a.filter(y => y == x).length",
    "        a.filter(_ == x).length",
    "        a.filter(_ == x).length",
    "        a.filter(y => y == x).length",
    "        a.filter(y => y == x).size",
    "        var count = 0L\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count",
    "        a.count(_ == x)",
    "        a.filter(_ == x).length",
    "        a.filter(y => y == x).length",
    "        a.filter(y => y == x).length",
    "        a.foldLeft(0L)((x, y) => if (x == y) x + 1 else x)",
    "        a.filter(e => e == x).length",
    "        a.filter(_ == x).length",
    "        a.filter(y => y == x).length",
    "        var count = 0\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count",
    "        a.filter(e => e == x).length",
    "        var count = 0L\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count",
    "        a.filter(y => y == x).length"
  ]
}