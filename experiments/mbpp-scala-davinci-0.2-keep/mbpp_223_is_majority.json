{
  "name": "mbpp_223_is_majority",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    def isMajority(arr : List[Long], n : Long, x : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isMajority((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 10l.toLong)), (7l), (3l)) == (true));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 6l.toLong, 6l.toLong)), (8l), (4l)) == (false));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong)), (5l), (1l)) == (true));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong)), (5l), (1l)) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(e => e == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val xCount = arr.count(_ == x)\n        xCount > n / 2",
    "        if (arr.length == 0) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        return true",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val count = arr.count(_ == x)\n        return count > n / 2",
    "        val c = arr.count(y => y == x)\n        c > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        return index + n / 2 < arr.length && arr(index + n.toInt / 2) == x",
    "        val count = arr.filter(y => y == x).length\n        if (count > n / 2) true else false",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val count = arr.filter(x == _).length\n        count > n / 2",
    "        val c = arr.count(_ == x)\n        c > n / 2",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val half = n / 2\n        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + half > n - 1) return false\n        if (arr(index + half.toInt) == x) return true\n        return false",
    "        val count = arr.count(_ == x)\n        return count > n / 2",
    "        val count = arr.count(a => a == x)\n        return count > n / 2"
  ]
}