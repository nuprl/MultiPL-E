{
  "name": "mbpp_223_is_majority",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    def isMajority(arr : List[Long], n : Long, x : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isMajority((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 10l.toLong)), (7l), (3l)) == (true));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 4l.toLong, 4l.toLong, 6l.toLong, 6l.toLong)), (8l), (4l)) == (false));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong)), (5l), (1l)) == (true));\n    assert(isMajority((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong)), (5l), (1l)) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(e => e == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val xCount = arr.count(_ == x)\n        xCount > n / 2",
    "        if (arr.length == 0) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        return true",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val count = arr.count(_ == x)\n        return count > n / 2",
    "        val c = arr.count(y => y == x)\n        c > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        return index + n / 2 < arr.length && arr(index + n.toInt / 2) == x",
    "        val count = arr.filter(y => y == x).length\n        if (count > n / 2) true else false",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val count = arr.filter(x == _).length\n        count > n / 2",
    "        val c = arr.count(_ == x)\n        c > n / 2",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val half = n / 2\n        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + half > n - 1) return false\n        if (arr(index + half.toInt) == x) return true\n        return false",
    "        val count = arr.count(_ == x)\n        return count > n / 2",
    "        val count = arr.count(a => a == x)\n        return count > n / 2",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n            if (count > n / 2) return true\n        }\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 < arr.length) return arr(index + n.toInt / 2) == x\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val m = arr.length\n        if (m == 0) return false\n        val i = arr.indexOf(x)\n        if (i == -1) return false\n        val j = arr.lastIndexOf(x)\n        if (j == -1) return false\n        if (j - i + 1 > m / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        return count > n / 2",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) {\n                count += 1\n                if (count > n / 2) return true\n            }\n        }\n        return false",
    "        val half = n / 2\n        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, index + half.toInt).count(_ == x)\n        if (count > half) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val count = arr.count(y => y == x)\n        count > n / 2",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val count = arr.count(y => y == x)\n        return count > n / 2",
    "        if (arr.length == 0) return false\n        val count = arr.count(y => y == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) false else arr.length - index > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (arr.length - index < n / 2) return false\n        true",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        return true",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        return count > n / 2",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(y => y == x)\n        return count > n / 2",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val count = arr.filter(x == _).length\n        if (count > n / 2) true else false",
    "        val count = arr.count(e => e == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 < arr.length) return arr(index + n.toInt / 2) == x\n        return false",
    "        val count = arr.filter(e => e == x).length\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(e => e == x)\n        return count > n / 2",
    "        if (arr.count(_ == x) > n / 2) true else false",
    "        val count = arr.filter(y => y == x).length\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        return count > n / 2",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(y => y == x)\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val count = arr.filter(_ == x).length\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        return true",
    "        if (arr.length == 0) return false\n        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(y => y == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        if (arr.length == 0) return false\n        val mid = arr.length / 2\n        if (arr(mid) == x) {\n            if (mid + n / 2 < arr.length && arr(mid + n.toInt / 2) == x) return true\n            if (mid - n / 2 >= 0 && arr(mid - n.toInt / 2) == x) return true\n        }\n        if (arr(mid) > x) return isMajority(arr.slice(0, mid), n, x)\n        else return isMajority(arr.slice(mid + 1, arr.length), n, x)",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        if (count > n / 2) return true\n        false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        if (arr.length == 0) return false\n        val count = arr.filter(y => y == x).length\n        if (count > n / 2) true else false",
    "        val count = arr.count(y => y == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val count = arr.count(e => e == x)\n        count > n / 2",
    "        val m = arr.length\n        val i = arr.indexOf(x)\n        if (i == -1) false\n        else if (i + n > m) false\n        else true",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(y => y == x)\n        return count > n / 2",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        if (arr.length == 0) return false\n        val mid = arr.length / 2\n        if (arr(mid) == x) {\n            if (mid + n / 2 < arr.length) return arr(mid + n.toInt / 2) == x\n            else return true\n        }\n        else if (arr(mid) > x) return isMajority(arr.slice(0, mid), n, x)\n        else return isMajority(arr.slice(mid + 1, arr.length), n, x)",
    "        if (arr.length == 0) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        if (arr.length == 0) return false\n        val mid = arr.length / 2\n        if (arr(mid) == x) {\n            if (mid + n / 2 < arr.length && arr(mid + n.toInt / 2) == x) return true\n            else if (mid - n / 2 >= 0 && arr(mid - n.toInt / 2) == x) return true\n            else return false\n        }\n        else if (arr(mid) > x) return isMajority(arr.slice(0, mid), n, x)\n        else return isMajority(arr.slice(mid + 1, arr.length), n, x)",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        arr(index + n.toInt / 2) == x",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(y => y == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        return arr(index + n.toInt / 2) == x",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(e => e == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(e => e == x)\n        if (count > n / 2) return true\n        return false",
    "        var count = 0\n        for (i <- arr) {\n            if (i == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        else {\n            val count = arr.count(e => e == x)\n            if (count > n / 2) return true\n            else return false\n        }",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        true",
    "        if (arr.length == 0) return false\n        val mid = arr.length / 2\n        if (arr(mid) == x) {\n            if (mid + n / 2 < arr.length && arr(mid + n.toInt / 2) == x) return true\n            else return false\n        }\n        else if (arr(mid) > x) return isMajority(arr.slice(0, mid), n, x)\n        else return isMajority(arr.slice(mid + 1, arr.length), n, x)",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        if (arr.length == 0) return false\n        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        true",
    "        val count = arr.filter(x == _).length\n        count > n / 2",
    "        val count = arr.filter(_ == x).length\n        if (count > n / 2) true else false",
    "        val half = n / 2\n        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (arr.length - index <= half) return false\n        return true",
    "        val count = arr.count(y => y == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) false\n        else if (index + n / 2 >= arr.length) false\n        else arr(index + n.toInt / 2) == x",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(y => y == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(y => y == x)\n        if (count > n / 2) true else false",
    "        val count = arr.filter(y => y == x).length\n        count > n / 2",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        return count > n / 2",
    "        val l = arr.length\n        val m = l / 2\n        val i = arr.indexOf(x)\n        if (i == -1) false\n        else if (i + m >= l) true\n        else if (arr(i + m.toInt) == x) true\n        else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        return count > n / 2",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true\n        else false",
    "        val count = arr.count(e => e == x)\n        count > n / 2",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(y => y == x)\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.filter(e => e == x).length\n        count > n / 2",
    "        val count = arr.count(y => y == x)\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(y => y == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        arr(index + n.toInt / 2) == x",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        return true",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) false\n        else {\n            val count = arr.count(_ == x)\n            if (count > n / 2) true\n            else false\n        }",
    "        if (arr.length == 0) return false\n        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (arr.length - index < n / 2) return false\n        return true",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val m = arr.indexOf(x)\n        if (m == -1) false\n        else if (m + n / 2 >= arr.length) false\n        else arr(m + n.toInt / 2) == x",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(y => y == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(e => e == x)\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        count > n / 2",
    "        val cnt = arr.count(_ == x)\n        cnt > n / 2",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        return true",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(e => e == x)\n        return count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        else {\n            val count = arr.slice(index, arr.length).count(_ == x)\n            if (count > n / 2) return true\n            else return false\n        }",
    "        if (arr.length == 0) return false\n        val count = arr.count(e => e == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.filter(_ == x).length\n        count > n / 2",
    "        val count = arr.count(y => y == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(y => y == x)\n        if (count > n / 2) return true\n        return false",
    "        val count = arr.count(e => e == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val count = arr.filter(x == _).size\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(e => e == x)\n        if (count > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val left = arr.slice(0, index).filter(_ == x).length\n        val right = arr.slice(index + 1, arr.length).filter(_ == x).length\n        if (left + right + 1 > n / 2) return true\n        return false",
    "        val count = arr.filter(x == _).length\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.slice(index, arr.length).count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        false",
    "        val count = arr.filter(x == _).length\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n/2 >= arr.length) return false\n        if (arr(index + n.toInt/2) != x) return false\n        return true",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val num = arr.count(_ == x)\n        if (num > n / 2) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val half = n / 2\n        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + half >= n) return false\n        if (arr(index + half.toInt) == x) return true\n        return false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        return arr.drop(index).takeWhile(_ == x).length > n / 2",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        return count > n / 2",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        if (arr.length == 0) return false\n        val mid = arr.length / 2\n        if (arr(mid) == x) {\n            val left = arr.take(mid)\n            val right = arr.drop(mid + 1)\n            val leftCount = left.filter(_ == x).length\n            val rightCount = right.filter(_ == x).length\n            if (leftCount + rightCount >= n / 2) return true\n            else return false\n        } else if (arr(mid) < x) return isMajority(arr.drop(mid + 1), n, x)\n        else return isMajority(arr.take(mid), n, x)",
    "        val count = arr.count(_ == x)\n        if (count > n / 2) true else false",
    "        val count = arr.count(_ == x)\n        count > n / 2",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        if (arr.length == 0) return false\n        val count = arr.filter(i => i == x).length\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) != x) return false\n        return true",
    "        var count = 0\n        for (i <- 0 until arr.length) {\n            if (arr(i) == x) count += 1\n        }\n        if (count > n / 2) true else false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + n / 2 >= arr.length) return false\n        if (arr(index + n.toInt / 2) == x) return true\n        return false",
    "        val index = arr.indexOf(x)\n        if (index == -1) return false\n        val count = arr.count(_ == x)\n        count > n / 2",
    "        if (arr.length == 0) return false\n        val half = n / 2\n        val index = arr.indexOf(x)\n        if (index == -1) return false\n        if (index + half >= arr.length) return false\n        if (arr(index + half.toInt) == x) return true\n        return false",
    "        arr.count(_ == x) > n / 2"
  ]
}