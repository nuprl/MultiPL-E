{
  "name": "mbpp_431_common_element",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes two lists and returns true if they have at least one common element.\n    def commonElement(list1 : Any, list2 : Any) : Option[Boolean] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(commonElement((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (Any(5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals(true));\n    assert(commonElement((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (Any(6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals(None));\n    assert(commonElement((Any(\"a\", \"b\", \"c\")), (Any(\"d\", \"b\", \"e\"))).equals(true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        list1 match {\n            case list1 : List[Any] => {\n                list2 match {\n                    case list2 : List[Any] => {\n                        if (list1.length == 0 || list2.length == 0) return None\n                        else {\n                            for (i <- 0 until list1.length) {\n                                for (j <- 0 until list2.length) {\n                                    if (list1(i) == list2(j)) return Some(true)\n                                }\n                            }\n                            return Some(false)\n                        }\n                    }\n                    case _ => return None\n                }\n            }\n            case _ => return None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.isEmpty || list2.isEmpty) return None\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val intersection = set1.intersect(set2)\n            if (intersection.isEmpty) return Some(false)\n            else return Some(true)\n        }\n        else return None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(!(set1 & set2).isEmpty)\n        } else {\n            None\n        }",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) return None\n        val set1 = list1_.toSet\n        val set2 = list2_.toSet\n        Some(set1.intersect(set2).size > 0)",
    "        (list1, list2) match {\n            case (list1 : List[Any], list2 : List[Any]) => {\n                val set1 = list1.toSet\n                val set2 = list2.toSet\n                val intersection = set1.intersect(set2)\n                if (intersection.size > 0) Some(true) else Some(false)\n            }\n            case _ => None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1_ = list1.asInstanceOf[List[Any]]\n            val list2_ = list2.asInstanceOf[List[Any]]\n            if (list1_.isEmpty || list2_.isEmpty) return None\n            else {\n                for (i <- list1_) {\n                    if (list2_.contains(i)) return Some(true)\n                }\n                return Some(false)\n            }\n        }\n        else return None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ list1\n            val set2 = Set[Any]() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                for (j <- list2) {\n                    if (i == j) return Some(true)\n                }\n            }\n            return Some(false)\n        }\n        else return None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ list1\n            val set2 = Set[Any]() ++ list2\n            if (set1.intersect(set2).size > 0) Some(true)\n            else Some(false)\n        }\n        else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                for (j <- list2) {\n                    if (i == j) return Some(true)\n                }\n            }\n            Some(false)\n        } else None",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ list1\n            val set2 = Set[Any]() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val l1 = list1.asInstanceOf[List[Any]]\n            val l2 = list2.asInstanceOf[List[Any]]\n            val set1 = l1.toSet\n            val set2 = l2.toSet\n            Some(set1.intersect(set2).size > 0)\n        }\n        else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                if (list2.contains(i)) return Some(true)\n            }\n            return Some(false)\n        }\n        None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ list1\n            val set2 = Set[Any]() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ list1\n            val set2 = Set[Any]() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        (list1, list2) match {\n            case (l1 : List[Any], l2 : List[Any]) => {\n                if (l1.isEmpty || l2.isEmpty) return None\n                else {\n                    val l1_set = l1.toSet\n                    val l2_set = l2.toSet\n                    val intersection = l1_set.intersect(l2_set)\n                    if (intersection.isEmpty) None\n                    else Some(true)\n                }\n            }\n            case _ => None\n        }",
    "        list1 match {\n            case Nil => None\n            case x :: xs => {\n                if (list2.contains(x)) Some(true)\n                else commonElement(xs, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val l1 = list1.asInstanceOf[List[Any]]\n            val l2 = list2.asInstanceOf[List[Any]]\n            Some(l1.exists(x => l2.contains(x)))\n        }\n        else None",
    "        (list1, list2) match {\n            case (Nil, Nil) => None\n            case (Nil, _) => None\n            case (_, Nil) => None\n            case (x :: xs, y :: ys) => if (x == y) Some(true) else commonElement(xs, ys)\n        }",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ list1\n            val set2 = Set[Any]() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.isEmpty || list2.isEmpty) return Some(false)\n            if (list1.head == list2.head) return Some(true)\n            if (list1.head != list2.head) return commonElement(list1.tail, list2)\n            if (list1.head != list2.head) return commonElement(list1, list2.tail)\n        }\n        else return None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.intersect(list2).length > 0) {\n                Some(true)\n            } else {\n                Some(false)\n            }\n        } else {\n            None\n        }",
    "        var result : Option[Boolean] = None\n        if (list1.isInstanceOf[List[Int]] && list2.isInstanceOf[List[Int]]) {\n            val l1 = list1.asInstanceOf[List[Int]]\n            val l2 = list2.asInstanceOf[List[Int]]\n            result = Some(l1.intersect(l2).length > 0)\n        }\n        result",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val common = set1.intersect(set2)\n            if (common.size > 0) Some(true) else Some(false)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = HashSet[Any]()\n            val set2 = HashSet[Any]()\n            for (i <- list1) set1 += i\n            for (i <- list2) set2 += i\n            Some(set1.intersect(set2).size > 0)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            Some(list1.exists(list2.contains(_)))\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[_]] && list2.isInstanceOf[List[_]]) {\n            val list1_ = list1.asInstanceOf[List[_]]\n            val list2_ = list2.asInstanceOf[List[_]]\n            if (list1_.isEmpty || list2_.isEmpty) {\n                None\n            } else {\n                Some(list1_.exists(x => list2_.contains(x)))\n            }\n        } else {\n            None\n        }",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) {\n            None\n        } else {\n            Some(list1_.exists(list2_.contains(_)))\n        }",
    "        list1 match {\n            case Nil => None\n            case x :: xs => {\n                if (list2.contains(x)) Some(true)\n                else commonElement(xs, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val l1 = list1.asInstanceOf[List[Any]]\n            val l2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ l1\n            val set2 = Set[Any]() ++ l2\n            Some(set1.intersect(set2).size > 0)\n        }\n        else None",
    "        if (list1.isInstanceOf[List[_]] && list2.isInstanceOf[List[_]]) {\n            val list1 = list1.asInstanceOf[List[_]]\n            val list2 = list2.asInstanceOf[List[_]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.exists(set2.contains(_)))\n        } else {\n            None\n        }",
    "        (list1, list2) match {\n            case (list1 : List[Any], list2 : List[Any]) => {\n                if (list1.isEmpty || list2.isEmpty) None\n                else {\n                    val list1Set = list1.toSet\n                    val list2Set = list2.toSet\n                    Some(list1Set.intersect(list2Set).size > 0)\n                }\n            }\n            case _ => None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[_]] && list2.isInstanceOf[List[_]]) {\n            val l1 = list1.asInstanceOf[List[_]]\n            val l2 = list2.asInstanceOf[List[_]]\n            Some(l1.intersect(l2).length > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                for (j <- list2) {\n                    if (i == j) return Some(true)\n                }\n            }\n            return Some(false)\n        }\n        return None",
    "        (list1, list2) match {\n            case (Nil, _) => None\n            case (_, Nil) => None\n            case (x :: xs, y :: ys) => {\n                if (x == y) Some(true)\n                else commonElement(xs, ys)\n            }\n            case _ => None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set = Set[Any]()\n            for (i <- list1) set += i\n            for (i <- list2) if (set.contains(i)) return Some(true)\n            Some(false)\n        } else None",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[_]] && list2.isInstanceOf[List[_]]) {\n            val list1 = list1.asInstanceOf[List[_]]\n            val list2 = list2.asInstanceOf[List[_]]\n            if (list1.length > 0 && list2.length > 0) {\n                val set1 = list1.toSet\n                val set2 = list2.toSet\n                Some(set1.intersect(set2).size > 0)\n            } else {\n                None\n            }\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                for (j <- list2) {\n                    if (i == j) return Some(true)\n                }\n            }\n            Some(false)\n        } else None",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) None\n        else {\n            val set1 = Set() ++ list1_\n            val set2 = Set() ++ list2_\n            Some(set1.intersect(set2).size > 0)\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                for (j <- list2) {\n                    if (i == j) return Some(true)\n                }\n            }\n            Some(false)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.length == 0 || list2.length == 0) return None\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val common = set1.intersect(set2)\n            if (common.size == 0) return None\n            else return Some(true)\n        }\n        else return None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.length > 0 && list2.length > 0) {\n                val set1 = list1.toSet\n                val set2 = list2.toSet\n                val common = set1.intersect(set2)\n                if (common.size > 0) Some(true) else Some(false)\n            } else None\n        } else None",
    "        val set1 = list1.asInstanceOf[List[Int]].toSet\n        val set2 = list2.asInstanceOf[List[Int]].toSet\n        val set3 = set1.intersect(set2)\n        if (set3.size > 0) Some(true) else Some(false)",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1_ = list1.asInstanceOf[List[Any]]\n            val list2_ = list2.asInstanceOf[List[Any]]\n            val set1 = list1_.toSet\n            val set2 = list2_.toSet\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        (list1, list2) match {\n            case (list1 : List[Any], list2 : List[Any]) => {\n                if (list1.isEmpty || list2.isEmpty) None\n                else if (list1.head == list2.head) Some(true)\n                else commonElement(list1.tail, list2.tail)\n            }\n            case _ => None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.length == 0 || list2_.length == 0) return None\n        for (i <- 0 until list1_.length) {\n            for (j <- 0 until list2_.length) {\n                if (list1_(i) == list2_(j)) return Some(true)\n            }\n        }\n        Some(false)",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            val common = set1.intersect(set2)\n            if (common.size > 0) Some(true) else Some(false)\n        } else None",
    "        (list1, list2) match {\n            case (x :: xs, y :: ys) => {\n                if (x == y) Some(true)\n                else commonElement(xs, ys)\n            }\n            case (x :: xs, Nil) => None\n            case (Nil, y :: ys) => None\n            case (Nil, Nil) => None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.intersect(list2).size > 0) {\n                Some(true)\n            } else {\n                Some(false)\n            }\n        } else {\n            None\n        }",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) return None\n        val set1 = Set[Any]() ++ list1_\n        val set2 = Set[Any]() ++ list2_\n        Some(set1.intersect(set2).size > 0)",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Int]] && list2.isInstanceOf[List[Int]]) {\n            val l1 = list1.asInstanceOf[List[Int]]\n            val l2 = list2.asInstanceOf[List[Int]]\n            Some(l1.intersect(l2).length > 0)\n        } else {\n            None\n        }",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) return None\n        val set1 = list1_.toSet\n        val set2 = list2_.toSet\n        Some(set1.intersect(set2).size > 0)",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.length == 0 || list2.length == 0) {\n                None\n            } else {\n                Some(list1.intersect(list2).length > 0)\n            }\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.intersect(list2).length > 0) Some(true)\n            else Some(false)\n        }\n        else None",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        val set1 = list1_.toSet\n        val set2 = list2_.toSet\n        if (set1.intersect(set2).isEmpty) None else Some(true)",
    "        if (list1.isInstanceOf[List[_]] && list2.isInstanceOf[List[_]]) {\n            val list1_ = list1.asInstanceOf[List[_]]\n            val list2_ = list2.asInstanceOf[List[_]]\n            val set1 = Set[Any]() ++ list1_\n            val set2 = Set[Any]() ++ list2_\n            Some(set1.intersect(set2).size > 0)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            val common = set1.intersect(set2)\n            if (common.size > 0) Some(true) else Some(false)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1_ = list1.asInstanceOf[List[Any]]\n            val list2_ = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1_\n            val set2 = Set() ++ list2_\n            Some(set1.intersect(set2).size > 0)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val intersection = set1.intersect(set2)\n            if (intersection.size > 0) Some(true) else Some(false)\n        } else None",
    "        list1 match {\n            case Nil => None\n            case x :: xs => if (list2.contains(x)) Some(true) else commonElement(xs, list2)\n        }",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                for (j <- list2) {\n                    if (i == j) return Some(true)\n                }\n            }\n            return Some(false)\n        }\n        else return None",
    "        if (list1.isInstanceOf[List[_]] && list2.isInstanceOf[List[_]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val l1 = list1.asInstanceOf[List[Any]]\n            val l2 = list2.asInstanceOf[List[Any]]\n            val set1 = l1.toSet\n            val set2 = l2.toSet\n            val common = set1.intersect(set2)\n            if (common.size > 0) Some(true) else Some(false)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1_ = list1.asInstanceOf[List[Any]]\n            val list2_ = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1_\n            val set2 = Set() ++ list2_\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) return None\n        for (i <- list1_) {\n            for (j <- list2_) {\n                if (i == j) return Some(true)\n            }\n        }\n        Some(false)",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.isEmpty || list2.isEmpty) {\n                None\n            } else {\n                Some(list1.intersect(list2).isEmpty)\n            }\n        } else {\n            None\n        }",
    "        list1 match {\n            case Nil => None\n            case x :: xs => {\n                list2 match {\n                    case Nil => None\n                    case y :: ys => {\n                        if (x == y) Some(true)\n                        else commonElement(list1, ys)\n                    }\n                }\n            }\n        }",
    "        list1 match {\n            case Nil => None\n            case x :: xs => {\n                if (list2.contains(x)) Some(true)\n                else commonElement(xs, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val common = set1.intersect(set2)\n            if (common.isEmpty) None else Some(true)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val set3 = set1.intersect(set2)\n            if (set3.size > 0) Some(true) else Some(false)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            var common = false\n            for (i <- list1) {\n                for (j <- list2) {\n                    if (i == j) {\n                        common = true\n                    }\n                }\n            }\n            Some(common)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ list1\n            val set2 = Set[Any]() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                if (list2.contains(i)) return Some(true)\n            }\n            Some(false)\n        } else {\n            None\n        }",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.length == 0 || list2_.length == 0) return None\n        for (i <- 0 until list1_.length) {\n            for (j <- 0 until list2_.length) {\n                if (list1_(i) == list2_(j)) return Some(true)\n            }\n        }\n        Some(false)",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val common = set1.intersect(set2)\n            if (common.size > 0) Some(true) else Some(false)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[_]] && list2.isInstanceOf[List[_]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.length == 0 || list2.length == 0) {\n                return Some(false)\n            }\n            val set = new HashSet[Any]\n            for (i <- list1) {\n                set += i\n            }\n            for (i <- list2) {\n                if (set.contains(i)) {\n                    return Some(true)\n                }\n            }\n            return Some(false)\n        }\n        return None",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        val set1 = list1_.toSet\n        val set2 = list2_.toSet\n        if (set1.intersect(set2).size > 0) Some(true) else Some(false)",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- 0 until list1.length) {\n                for (j <- 0 until list2.length) {\n                    if (list1(i) == list2(j)) {\n                        return Some(true)\n                    }\n                }\n            }\n            return Some(false)\n        }\n        else {\n            return None\n        }",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.length == 0 || list2_.length == 0) return None\n        for (i <- 0 until list1_.length) {\n            for (j <- 0 until list2_.length) {\n                if (list1_(i) == list2_(j)) return Some(true)\n            }\n        }\n        Some(false)",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val l1 = list1.asInstanceOf[List[Any]]\n            val l2 = list2.asInstanceOf[List[Any]]\n            Some(l1.exists(l2.contains(_)))\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else None",
    "        (list1, list2) match {\n            case (list1 : List[Any], list2 : List[Any]) => {\n                val set1 = list1.toSet\n                val set2 = list2.toSet\n                val intersection = set1.intersect(set2)\n                if (intersection.size > 0) Some(true) else Some(false)\n            }\n            case _ => None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ list1\n            val set2 = Set[Any]() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        list1 match {\n            case Nil => None\n            case x :: xs => {\n                if (list2.contains(x)) Some(true)\n                else commonElement(xs, list2)\n            }\n        }",
    "        (list1, list2) match {\n            case (list1 : List[Any], list2 : List[Any]) => {\n                if (list1.intersect(list2).length > 0) Some(true) else Some(false)\n            }\n            case _ => None\n        }",
    "        list1 match {\n            case Nil => None\n            case x :: xs => {\n                if (list2.contains(x)) Some(true)\n                else commonElement(xs, list2)\n            }\n        }",
    "        list1 match {\n            case Nil => None\n            case x :: xs => {\n                list2 match {\n                    case Nil => None\n                    case y :: ys => {\n                        if (x == y) Some(true)\n                        else commonElement(xs, ys)\n                    }\n                }\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val common = set1.intersect(set2)\n            if (common.size > 0) Some(true) else Some(false)\n        } else None",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- 0 until list1.length) {\n                for (j <- 0 until list2.length) {\n                    if (list1(i) == list2(j)) {\n                        return Some(true)\n                    }\n                }\n            }\n            return Some(false)\n        }\n        else {\n            return None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                if (list2.contains(i)) {\n                    return Some(true)\n                }\n            }\n            return Some(false)\n        }\n        return None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val common = set1.intersect(set2)\n            if (common.size > 0) Some(true) else Some(false)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val common = set1.intersect(set2)\n            if (common.size > 0) Some(true) else Some(false)\n        } else None",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) return None\n        val set1 = Set[Any]() ++ list1_\n        val set2 = Set[Any]() ++ list2_\n        Some(set1.intersect(set2).nonEmpty)",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.length > 0 && list2.length > 0) {\n                val set1 = list1.toSet\n                val set2 = list2.toSet\n                Some(set1.intersect(set2).size > 0)\n            } else {\n                Some(false)\n            }\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[_]] && list2.isInstanceOf[List[_]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val common = set1.intersect(set2)\n            if (common.isEmpty) None else Some(true)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.intersect(list2).length > 0) Some(true) else Some(false)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val l1 = list1.asInstanceOf[List[Any]]\n            val l2 = list2.asInstanceOf[List[Any]]\n            Some(l1.intersect(l2).length > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                if (list2.contains(i)) {\n                    return Some(true)\n                }\n            }\n            return Some(false)\n        }\n        return None",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- 0 until list1.length) {\n                for (j <- 0 until list2.length) {\n                    if (list1(i) == list2(j)) {\n                        return Some(true)\n                    }\n                }\n            }\n            return Some(false)\n        }\n        else {\n            return None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1_ = list1.asInstanceOf[List[Any]]\n            val list2_ = list2.asInstanceOf[List[Any]]\n            val set1 = Set(list1_:_*)\n            val set2 = Set(list2_:_*)\n            val common = set1.intersect(set2)\n            if (common.size > 0) Some(true) else Some(false)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            val common = set1.intersect(set2)\n            if (common.size > 0) Some(true) else Some(false)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1_ = list1.asInstanceOf[List[Any]]\n            val list2_ = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1_\n            val set2 = Set() ++ list2_\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        list1 match {\n            case Nil => None\n            case x :: xs => {\n                if (list2.contains(x)) Some(true)\n                else commonElement(xs, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- 0 until list1.length) {\n                for (j <- 0 until list2.length) {\n                    if (list1(i) == list2(j)) return Some(true)\n                }\n            }\n            return Some(false)\n        }\n        None",
    "        if (list1.isInstanceOf[List[_]] && list2.isInstanceOf[List[_]]) {\n            val l1 = list1.asInstanceOf[List[_]]\n            val l2 = list2.asInstanceOf[List[_]]\n            Some(l1.exists(l2.contains(_)))\n        } else {\n            None\n        }",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) return None\n        val set1 = Set() ++ list1_\n        val set2 = Set() ++ list2_\n        val common = set1.intersect(set2)\n        if (common.isEmpty) return None\n        Some(true)",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        val set1 = HashSet[Any]()\n        val set2 = HashSet[Any]()\n        for (i <- list1_) set1 += i\n        for (i <- list2_) set2 += i\n        val common = set1.intersect(set2)\n        if (common.size == 0) None\n        else Some(true)",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                for (j <- list2) {\n                    if (i == j) {\n                        return Some(true)\n                    }\n                }\n            }\n            return Some(false)\n        }\n        else {\n            return None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set = new HashSet[Any]\n            list1.foreach(x => set.add(x))\n            list2.foreach(x => if (set.contains(x)) return Some(true))\n            Some(false)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                for (j <- list2) {\n                    if (i == j) return Some(true)\n                }\n            }\n            Some(false)\n        }\n        else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.isEmpty || list2.isEmpty) None\n            else {\n                val list1Set = list1.toSet\n                val list2Set = list2.toSet\n                Some(list1Set.intersect(list2Set).size > 0)\n            }\n        }\n        else None",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) {\n                    Some(true)\n                } else {\n                    commonElement(tail, list2)\n                }\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ list1\n            val set2 = Set[Any]() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1_ = list1.asInstanceOf[List[Any]]\n            val list2_ = list2.asInstanceOf[List[Any]]\n            for (i <- list1_) {\n                for (j <- list2_) {\n                    if (i == j) return Some(true)\n                }\n            }\n            Some(false)\n        } else None",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) return None\n        val set1 = Set[Any]() ++ list1_\n        val set2 = Set[Any]() ++ list2_\n        Some(set1.exists(set2.contains))",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) return None\n        val set1 = list1_.toSet\n        val set2 = list2_.toSet\n        if (set1.intersect(set2).isEmpty) return Some(false)\n        else return Some(true)",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- 0 until list1.length) {\n                for (j <- 0 until list2.length) {\n                    if (list1(i) == list2(j)) {\n                        return Some(true)\n                    }\n                }\n            }\n            return Some(false)\n        }\n        else {\n            return None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.length == 0 || list2.length == 0) return None\n            else {\n                val set1 = Set() ++ list1\n                val set2 = Set() ++ list2\n                val intersection = set1.intersect(set2)\n                if (intersection.size == 0) return Some(false)\n                else return Some(true)\n            }\n        }\n        else return None",
    "        val list1_set = list1.asInstanceOf[List[Int]].toSet\n        val list2_set = list2.asInstanceOf[List[Int]].toSet\n        val common_set = list1_set.intersect(list2_set)\n        if (common_set.isEmpty) None\n        else Some(true)",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                for (j <- list2) {\n                    if (i == j) return Some(true)\n                }\n            }\n            return Some(false)\n        }\n        else return None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val common = set1.intersect(set2)\n            if (common.size > 0) Some(true) else Some(false)\n        } else None",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) {\n            None\n        } else {\n            val list1_set = list1_.toSet\n            val list2_set = list2_.toSet\n            Some(list1_set.intersect(list2_set).size > 0)\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ list1\n            val set2 = Set[Any]() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1_ = list1.asInstanceOf[List[Any]]\n            val list2_ = list2.asInstanceOf[List[Any]]\n            val set1 = list1_.toSet\n            val set2 = list2_.toSet\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            Some(list1.intersect(list2).length > 0)\n        } else {\n            None\n        }",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ list1\n            val set2 = Set[Any]() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        (list1, list2) match {\n            case (l1 : List[Any], l2 : List[Any]) => {\n                if (l1.intersect(l2).isEmpty) None\n                else Some(true)\n            }\n            case _ => None\n        }",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        val set1 = list1_.toSet\n        val set2 = list2_.toSet\n        val set3 = set1.intersect(set2)\n        if (set3.size > 0) Some(true) else Some(false)",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1_ = list1.asInstanceOf[List[Any]]\n            val list2_ = list2.asInstanceOf[List[Any]]\n            if (list1_.length > 0 && list2_.length > 0) {\n                val set1 = list1_.toSet\n                val set2 = list2_.toSet\n                Some(set1.intersect(set2).size > 0)\n            } else {\n                Some(false)\n            }\n        } else {\n            None\n        }",
    "        (list1, list2) match {\n            case (list1 : List[Any], list2 : List[Any]) => {\n                if (list1.length == 0 || list2.length == 0) return Some(false)\n                if (list1.head == list2.head) return Some(true)\n                commonElement(list1.tail, list2) match {\n                    case Some(true) => return Some(true)\n                    case _ => commonElement(list1, list2.tail) match {\n                        case Some(true) => return Some(true)\n                        case _ => return Some(false)\n                    }\n                }\n            }\n            case _ => None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.intersect(list2).length > 0) Some(true) else Some(false)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                for (j <- list2) {\n                    if (i == j) {\n                        return Some(true)\n                    }\n                }\n            }\n            return Some(false)\n        }\n        else {\n            return None\n        }",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) return None\n        val set1 = Set[Any]() ++ list1_\n        val set2 = Set[Any]() ++ list2_\n        Some(set1.intersect(set2).size > 0)",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.length == 0 || list2_.length == 0) return None\n        val set1 = new HashSet[Any]\n        val set2 = new HashSet[Any]\n        for (i <- 0 until list1_.length) set1 += list1_(i)\n        for (i <- 0 until list2_.length) set2 += list2_(i)\n        for (i <- 0 until list1_.length) if (set2.contains(list1_(i))) return Some(true)\n        for (i <- 0 until list2_.length) if (set1.contains(list2_(i))) return Some(true)\n        Some(false)",
    "        if(list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ list1\n            val set2 = Set[Any]() ++ list2\n            Some(set1.exists(set2.contains(_)))\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.length == 0 || list2.length == 0) return None\n            for (i <- 0 until list1.length) {\n                for (j <- 0 until list2.length) {\n                    if (list1(i) == list2(j)) return Some(true)\n                }\n            }\n            return Some(false)\n        }\n        else return None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = HashSet[Any]() ++ list1\n            val set2 = HashSet[Any]() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val result = set1.intersect(set2)\n            if (result.size > 0) Some(true) else Some(false)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            Some(list1.exists(list2.contains(_)))\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            if (set1.intersect(set2).size > 0) {\n                Some(true)\n            } else {\n                Some(false)\n            }\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1_ = list1.asInstanceOf[List[Any]]\n            val list2_ = list2.asInstanceOf[List[Any]]\n            if (list1_.length > 0 && list2_.length > 0) {\n                val set1 = list1_.toSet\n                val set2 = list2_.toSet\n                Some(set1.intersect(set2).size > 0)\n            } else {\n                Some(false)\n            }\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = HashSet[Any]()\n            val set2 = HashSet[Any]()\n            for (element <- list1) set1 += element\n            for (element <- list2) set2 += element\n            Some(set1.intersect(set2).size > 0)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val set3 = set1.intersect(set2)\n            if (set3.size > 0) Some(true) else Some(false)\n        } else {\n            None\n        }",
    "        val list1Type = list1.getClass.getName\n        val list2Type = list2.getClass.getName\n        if (list1Type != list2Type) {\n            return None\n        }\n        if (list1Type == \"scala.collection.immutable.List\") {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- 0 until list1.length) {\n                for (j <- 0 until list2.length) {\n                    if (list1(i) == list2(j)) {\n                        return Some(true)\n                    }\n                }\n            }\n        }\n        else if (list1Type == \"scala.collection.mutable.ListBuffer\") {\n            val list1 = list1.asInstanceOf[ListBuffer[Any]]\n            val list2 = list2.asInstanceOf[ListBuffer[Any]]\n            for (i <- 0 until list1.length) {\n                for (j <- 0 until list2.length) {\n                    if (list1(i) == list2(j)) {\n                        return Some(true)\n                    }\n                }\n            }\n        }\n        else if (list1Type == \"scala.collection.immutable.Set\") {\n            val list1 = list1.asInstanceOf[Set[Any]]\n            val list2 = list2.asInstanceOf[Set[Any]]\n            for (i <- 0 until list1.size) {\n                for (j <- 0 until list2.size) {\n                    if (list1(i) == list2(j)) {\n                        return Some(true)\n                    }\n                }\n            }\n        }\n        else if (list1Type == \"scala.collection.mutable.Set\") {\n            val list1 = list1.asInstanceOf[mutable.Set[Any]]\n            val list2 = list2.asInstanceOf[mutable.Set[Any]]\n            for (i <- 0 until list1.size) {\n                for (j <- 0 until list2.size) {\n                    if (list1(i) == list2(j)) {\n",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        (list1, list2) match {\n            case (l1 : List[Any], l2 : List[Any]) => {\n                val l1Set = l1.toSet\n                val l2Set = l2.toSet\n                val l1SetSize = l1Set.size\n                val l2SetSize = l2Set.size\n                val l1SetIntersect = l1Set.intersect(l2Set)\n                val l1SetIntersectSize = l1SetIntersect.size\n                if (l1SetSize == l1SetIntersectSize || l2SetSize == l1SetIntersectSize) None\n                else Some(true)\n            }\n            case _ => None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            val common = set1.intersect(set2)\n            if (common.size > 0) Some(true) else Some(false)\n        } else None",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) return None\n        val set1 = Set[Any]() ++ list1_\n        val set2 = Set[Any]() ++ list2_\n        Some(set1.intersect(set2).size > 0)",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) return None\n        val set1 = new HashSet[Any]()\n        val set2 = new HashSet[Any]()\n        for (elem <- list1_) set1.add(elem)\n        for (elem <- list2_) set2.add(elem)\n        for (elem <- set1) {\n            if (set2.contains(elem)) return Some(true)\n        }\n        Some(false)",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- 0 until list1.length) {\n                for (j <- 0 until list2.length) {\n                    if (list1(i) == list2(j)) return Some(true)\n                }\n            }\n            Some(false)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1_ = list1.asInstanceOf[List[Any]]\n            val list2_ = list2.asInstanceOf[List[Any]]\n            val set1 = HashSet[Any]()\n            val set2 = HashSet[Any]()\n            for (elem <- list1_) set1 += elem\n            for (elem <- list2_) set2 += elem\n            Some(set1.intersect(set2).size > 0)\n        } else None",
    "        val list1 = List(1, 2, 3, 4, 5)\n        val list2 = List(6, 7, 8, 9, 10)\n        val list3 = List(1, 2, 3, 4, 5)\n        val list4 = List(6, 7, 8, 9, 10)\n        val list5 = List(1, 2, 3, 4, 5)\n        val list6 = List(6, 7, 8, 9, 10)\n        val list7 = List(1, 2, 3, 4, 5)\n        val list8 = List(6, 7, 8, 9, 10)\n        val list9 = List(1, 2, 3, 4, 5)\n        val list10 = List(6, 7, 8, 9, 10)\n        val list11 = List(1, 2, 3, 4, 5)\n        val list12 = List(6, 7, 8, 9, 10)\n        val list13 = List(1, 2, 3, 4, 5)\n        val list14 = List(6, 7, 8, 9, 10)\n        val list15 = List(1, 2, 3, 4, 5)\n        val list16 = List(6, 7, 8, 9, 10)\n        val list17 = List(1, 2, 3, 4, 5)\n        val list18 = List(6, 7, 8, 9, 10)\n        val list19 = List(1, 2, 3, 4, 5)\n        val list20 = List(6, 7, 8, 9, 10)\n        val list21 = List(1, 2, 3, 4, 5)\n        val list22 = List(6, 7, 8, 9, 10)\n        val list23 = List(1, 2, 3, 4, 5)\n        val list24 = List(6, 7, 8, 9, 10)\n        val list25 = List(1, 2, 3, 4, 5)\n        val list26 = List(6, 7, 8, 9, 10)\n        val list27 = List(1, 2, 3, 4, 5)\n        val list28 = List(6, 7, 8, 9, 10)\n        val list29 = List(",
    "        list1 match {\n            case Nil => None\n            case x :: xs => {\n                if (list2.contains(x))\n                    Some(true)\n                else\n                    commonElement(xs, list2)\n            }\n        }",
    "        (list1, list2) match {\n            case (list1 : List[Any], list2 : List[Any]) => {\n                val set1 = list1.toSet\n                val set2 = list2.toSet\n                if (set1.intersect(set2).isEmpty) None else Some(true)\n            }\n            case _ => None\n        }",
    "        if (list1.isInstanceOf[List[_]] && list2.isInstanceOf[List[_]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if(list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val intersection = set1.intersect(set2)\n            if(intersection.size > 0) {\n                Some(true)\n            } else {\n                Some(false)\n            }\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = HashSet[Any]()\n            val set2 = HashSet[Any]()\n            for (elem <- list1) set1 += elem\n            for (elem <- list2) set2 += elem\n            Some(set1.intersect(set2).size > 0)\n        } else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = HashSet[Any]()\n            val set2 = HashSet[Any]()\n            for (element <- list1) set1 += element\n            for (element <- list2) set2 += element\n            val intersection = set1.intersect(set2)\n            if (intersection.size > 0) Some(true) else Some(false)\n        } else None",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[_]] && list2.isInstanceOf[List[_]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1_ = list1.asInstanceOf[List[Any]]\n            val list2_ = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1_\n            val set2 = Set() ++ list2_\n            Some(!(set1 & set2).isEmpty)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                if (list2.contains(i)) {\n                    return Some(true)\n                }\n            }\n            return Some(false)\n        }\n        None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                for (j <- list2) {\n                    if (i == j) {\n                        return Some(true)\n                    }\n                }\n            }\n            return Some(false)\n        }\n        else {\n            return None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val common = set1.intersect(set2)\n            if (common.size > 0) Some(true)\n            else Some(false)\n        }\n        else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.length > 0 && list2.length > 0) {\n                var common = false\n                for (i <- 0 until list1.length) {\n                    for (j <- 0 until list2.length) {\n                        if (list1(i) == list2(j)) {\n                            common = true\n                        }\n                    }\n                }\n                Some(common)\n            } else {\n                None\n            }\n        } else {\n            None\n        }",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) return None\n        for (i <- list1_) {\n            if (list2_.contains(i)) return Some(true)\n        }\n        Some(false)",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.length == 0 || list2.length == 0) return None\n            for (i <- 0 until list1.length) {\n                for (j <- 0 until list2.length) {\n                    if (list1(i) == list2(j)) return Some(true)\n                }\n            }\n            return Some(false)\n        }\n        return None"
  ]
}