{
  "name": "mbpp_431_common_element",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes two lists and returns true if they have at least one common element.\n    def commonElement(list1 : Any, list2 : Any) : Option[Boolean] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(commonElement((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (Any(5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals(true));\n    assert(commonElement((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)), (Any(6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))).equals(None));\n    assert(commonElement((Any(\"a\", \"b\", \"c\")), (Any(\"d\", \"b\", \"e\"))).equals(true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        list1 match {\n            case list1 : List[Any] => {\n                list2 match {\n                    case list2 : List[Any] => {\n                        if (list1.length == 0 || list2.length == 0) return None\n                        else {\n                            for (i <- 0 until list1.length) {\n                                for (j <- 0 until list2.length) {\n                                    if (list1(i) == list2(j)) return Some(true)\n                                }\n                            }\n                            return Some(false)\n                        }\n                    }\n                    case _ => return None\n                }\n            }\n            case _ => return None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            if (list1.isEmpty || list2.isEmpty) return None\n            val set1 = list1.toSet\n            val set2 = list2.toSet\n            val intersection = set1.intersect(set2)\n            if (intersection.isEmpty) return Some(false)\n            else return Some(true)\n        }\n        else return None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set() ++ list1\n            val set2 = Set() ++ list2\n            Some(!(set1 & set2).isEmpty)\n        } else {\n            None\n        }",
    "        val list1_ = list1.asInstanceOf[List[Any]]\n        val list2_ = list2.asInstanceOf[List[Any]]\n        if (list1_.isEmpty || list2_.isEmpty) return None\n        val set1 = list1_.toSet\n        val set2 = list2_.toSet\n        Some(set1.intersect(set2).size > 0)",
    "        (list1, list2) match {\n            case (list1 : List[Any], list2 : List[Any]) => {\n                val set1 = list1.toSet\n                val set2 = list2.toSet\n                val intersection = set1.intersect(set2)\n                if (intersection.size > 0) Some(true) else Some(false)\n            }\n            case _ => None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1_ = list1.asInstanceOf[List[Any]]\n            val list2_ = list2.asInstanceOf[List[Any]]\n            if (list1_.isEmpty || list2_.isEmpty) return None\n            else {\n                for (i <- list1_) {\n                    if (list2_.contains(i)) return Some(true)\n                }\n                return Some(false)\n            }\n        }\n        else return None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ list1\n            val set2 = Set[Any]() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                for (j <- list2) {\n                    if (i == j) return Some(true)\n                }\n            }\n            return Some(false)\n        }\n        else return None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ list1\n            val set2 = Set[Any]() ++ list2\n            if (set1.intersect(set2).size > 0) Some(true)\n            else Some(false)\n        }\n        else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                for (j <- list2) {\n                    if (i == j) return Some(true)\n                }\n            }\n            Some(false)\n        } else None",
    "        list1 match {\n            case Nil => None\n            case head :: tail => {\n                if (list2.contains(head)) Some(true)\n                else commonElement(tail, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ list1\n            val set2 = Set[Any]() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val l1 = list1.asInstanceOf[List[Any]]\n            val l2 = list2.asInstanceOf[List[Any]]\n            val set1 = l1.toSet\n            val set2 = l2.toSet\n            Some(set1.intersect(set2).size > 0)\n        }\n        else None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            for (i <- list1) {\n                if (list2.contains(i)) return Some(true)\n            }\n            return Some(false)\n        }\n        None",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ list1\n            val set2 = Set[Any]() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val list1 = list1.asInstanceOf[List[Any]]\n            val list2 = list2.asInstanceOf[List[Any]]\n            val set1 = Set[Any]() ++ list1\n            val set2 = Set[Any]() ++ list2\n            Some(set1.intersect(set2).size > 0)\n        } else {\n            None\n        }",
    "        (list1, list2) match {\n            case (l1 : List[Any], l2 : List[Any]) => {\n                if (l1.isEmpty || l2.isEmpty) return None\n                else {\n                    val l1_set = l1.toSet\n                    val l2_set = l2.toSet\n                    val intersection = l1_set.intersect(l2_set)\n                    if (intersection.isEmpty) None\n                    else Some(true)\n                }\n            }\n            case _ => None\n        }",
    "        list1 match {\n            case Nil => None\n            case x :: xs => {\n                if (list2.contains(x)) Some(true)\n                else commonElement(xs, list2)\n            }\n        }",
    "        if (list1.isInstanceOf[List[Any]] && list2.isInstanceOf[List[Any]]) {\n            val l1 = list1.asInstanceOf[List[Any]]\n            val l2 = list2.asInstanceOf[List[Any]]\n            Some(l1.exists(x => l2.contains(x)))\n        }\n        else None",
    "        (list1, list2) match {\n            case (Nil, Nil) => None\n            case (Nil, _) => None\n            case (_, Nil) => None\n            case (x :: xs, y :: ys) => if (x == y) Some(true) else commonElement(xs, ys)\n        }"
  ]
}