{
  "name": "mbpp_791_remove_nested",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(y) => y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(y) => y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(y) => y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(a) => a\n            case Right(b) => b\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1666123228,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1_yly5m1.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1_yly5m1.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1_yly5m1.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1_yly5m1.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(y) => y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(y) => y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(y) => y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Right(x) => x\n            case Left(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1666123228,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5cw41hbr.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5cw41hbr.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5cw41hbr.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5cw41hbr.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(y) => y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(y) => y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(y) => y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(y) => y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(y) => y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9ddku7qd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(n) => n\n            case Right(n) => n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1666123228,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2aa7x0e8.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2aa7x0e8.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2aa7x0e8.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2aa7x0e8.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove tuples from the given tuple.\n    def removeNested(test_tup : Either[Long, Long]) : Long = {\n        test_tup match {\n            case Left(x) => x\n            case Right(x) => x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeNested((1l, 5l, 7l, (4l, 6l), 10l)) == (1l, 5l, 7l, 10l));\n    assert(removeNested((2l, 6l, 8l, (5l, 7l), 11l)) == (2l, 6l, 8l, 11l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), 12l)) == (3l, 7l, 9l, 12l));\n    assert(removeNested((3l, 7l, 9l, (6l, 8l), (5l, 12l), 12l)) == (3l, 7l, 9l, 12l));\n    }\n\n}\n",
      "timestamp": 1665517397,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(removeNested((\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m), \u001b[31m10l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m10l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(removeNested((\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m), \u001b[31m11l\u001b[0m)) == (\u001b[31m2l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m, \u001b[31m11l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, \u001b[31m12l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Found:    (Long, Long, Long, (Long, Long), Long)\n\u001b[31m   |\u001b[0m                        Required: Either[Long, Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9q40_0nn.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(removeNested((\u001b[31m3l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m, (\u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m12l\u001b[0m), \u001b[31m12l\u001b[0m)) == (\u001b[31m3l\u001b[0m, \u001b[31m7l",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}