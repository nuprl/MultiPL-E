{
  "name": "mbpp_723_count_same_pair",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    def countSamePair(nums1 : List[Long], nums2 : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countSamePair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (4l));\n    assert(countSamePair((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (11l));\n    assert(countSamePair((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong)), (List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (1l));\n    assert(countSamePair((List[Long](0l.toLong, 1l.toLong, 1l.toLong, 2l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 2l.toLong))) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val map1 = new HashMap[Long, Long]\n        val map2 = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            map1(nums1(i)) = map1.getOrElse(nums1(i), 0) + 1\n            map2(nums2(i)) = map2.getOrElse(nums2(i), 0) + 1\n        }\n        var count = 0L\n        for (i <- map1.keys) {\n            count += map1(i) * map2.getOrElse(i, 0)\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        return count",
    "        val map = Map[Long, Long]()\n        var count = 0L\n        for (i <- 0 until nums1.length) {\n            val num1 = nums1(i)\n            val num2 = nums2(i)\n            if (num1 == num2) count += 1\n            else {\n                if (map.contains(num1)) map(num1) += 1\n                else map(num1) = 1\n                if (map.contains(num2)) map(num2) += 1\n                else map(num2) = 1\n            }\n        }\n        for (key <- map.keys) {\n            val value = map(key)\n            count += value * (value - 1) / 2\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            val x = nums1(i)\n            if (!map.contains(x)) map(x) = 0\n            map(x) += 1\n        }\n        var result = 0L\n        for (i <- 0 until nums2.length) {\n            val x = nums2(i)\n            if (map.contains(x)) {\n                result += map(x)\n                map(x) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- nums1) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- nums2) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) = 0\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            if (!map.contains(nums1(i))) map(nums1(i)) = 0\n            map(nums1(i)) += 1\n        }\n        var result = 0L\n        for (i <- 0 until nums2.length) {\n            if (map.contains(nums2(i))) {\n                result += map(nums2(i))\n                map(nums2(i)) = 0\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            val count = map.getOrElse(num, 0)\n            map.put(num, count + 1)\n        }\n        var result = 0L\n        for (num <- nums2) {\n            val count = map.getOrElse(num, 0)\n            if (count > 0) {\n                result += 1\n                map.put(num, count - 1)\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        var count : Long = 0\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val map1 = new HashMap[Long, Long]\n        val map2 = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            map1(nums1(i)) = map1.getOrElse(nums1(i), 0) + 1\n            map2(nums2(i)) = map2.getOrElse(nums2(i), 0) + 1\n        }\n        var count = 0L\n        for (i <- map1.keys) {\n            if (map2.contains(i)) {\n                count += map1(i) * map2(i)\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val nums1Map = nums1.groupBy(identity).mapValues(_.size)\n        val nums2Map = nums2.groupBy(identity).mapValues(_.size)\n        var count = 0L\n        for ((k, v) <- nums1Map) {\n            if (nums2Map.contains(k)) {\n                count += v * nums2Map(k)\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result"
  ]
}