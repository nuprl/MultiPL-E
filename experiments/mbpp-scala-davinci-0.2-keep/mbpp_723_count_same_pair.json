{
  "name": "mbpp_723_count_same_pair",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    def countSamePair(nums1 : List[Long], nums2 : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countSamePair((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (List[Long](2l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 7l.toLong, 9l.toLong))) == (4l));\n    assert(countSamePair((List[Long](0l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 0l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong)), (List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (11l));\n    assert(countSamePair((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong)), (List[Long](2l.toLong, 1l.toLong, 2l.toLong, -1l.toLong, -5l.toLong, 6l.toLong, 4l.toLong, -3l.toLong, -2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))) == (1l));\n    assert(countSamePair((List[Long](0l.toLong, 1l.toLong, 1l.toLong, 2l.toLong)), (List[Long](0l.toLong, 1l.toLong, 2l.toLong, 2l.toLong))) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val map1 = new HashMap[Long, Long]\n        val map2 = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            map1(nums1(i)) = map1.getOrElse(nums1(i), 0) + 1\n            map2(nums2(i)) = map2.getOrElse(nums2(i), 0) + 1\n        }\n        var count = 0L\n        for (i <- map1.keys) {\n            count += map1(i) * map2.getOrElse(i, 0)\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        return count",
    "        val map = Map[Long, Long]()\n        var count = 0L\n        for (i <- 0 until nums1.length) {\n            val num1 = nums1(i)\n            val num2 = nums2(i)\n            if (num1 == num2) count += 1\n            else {\n                if (map.contains(num1)) map(num1) += 1\n                else map(num1) = 1\n                if (map.contains(num2)) map(num2) += 1\n                else map(num2) = 1\n            }\n        }\n        for (key <- map.keys) {\n            val value = map(key)\n            count += value * (value - 1) / 2\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            val x = nums1(i)\n            if (!map.contains(x)) map(x) = 0\n            map(x) += 1\n        }\n        var result = 0L\n        for (i <- 0 until nums2.length) {\n            val x = nums2(i)\n            if (map.contains(x)) {\n                result += map(x)\n                map(x) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- nums1) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- nums2) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) = 0\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            if (!map.contains(nums1(i))) map(nums1(i)) = 0\n            map(nums1(i)) += 1\n        }\n        var result = 0L\n        for (i <- 0 until nums2.length) {\n            if (map.contains(nums2(i))) {\n                result += map(nums2(i))\n                map(nums2(i)) = 0\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            val count = map.getOrElse(num, 0)\n            map.put(num, count + 1)\n        }\n        var result = 0L\n        for (num <- nums2) {\n            val count = map.getOrElse(num, 0)\n            if (count > 0) {\n                result += 1\n                map.put(num, count - 1)\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        var count : Long = 0\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val map1 = new HashMap[Long, Long]\n        val map2 = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            map1(nums1(i)) = map1.getOrElse(nums1(i), 0) + 1\n            map2(nums2(i)) = map2.getOrElse(nums2(i), 0) + 1\n        }\n        var count = 0L\n        for (i <- map1.keys) {\n            if (map2.contains(i)) {\n                count += map1(i) * map2(i)\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val nums1Map = nums1.groupBy(identity).mapValues(_.size)\n        val nums2Map = nums2.groupBy(identity).mapValues(_.size)\n        var count = 0L\n        for ((k, v) <- nums1Map) {\n            if (nums2Map.contains(k)) {\n                count += v * nums2Map(k)\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (map.contains(nums1(i))) count += map(nums1(i))\n            if (map.contains(nums2(i))) map(nums2(i)) += 1\n            else map(nums2(i)) = 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            val x = nums1(i)\n            val y = nums2(i)\n            if (map.contains(x)) {\n                map(x) = map(x) + y\n            } else {\n                map(x) = y\n            }\n        }\n        var result = 0L\n        for (x <- map.keys) {\n            val y = map(x)\n            result += y * (y - 1) / 2\n        }\n        result",
    "        var map = Map[Long, Long]()\n        for (n <- nums1) {\n            if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n        }\n        var result = 0L\n        for (n <- nums2) {\n            if (map.contains(n)) {\n                result += map(n)\n                map(n) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) -= 1\n                if (map(num) == 0) map.remove(num)\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            val num1 = nums1(i)\n            val num2 = nums2(i)\n            if (num1 == num2) {\n                if (map.contains(num1)) map(num1) += 1\n                else map(num1) = 1\n            }\n        }\n        var result = 0L\n        for (num <- map.keys) {\n            val count = map(num)\n            result += count * (count - 1) / 2\n        }\n        result",
    "        val nums1Map = new HashMap[Long, Long]\n        val nums2Map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (nums1Map.contains(num)) nums1Map(num) += 1\n            else nums1Map(num) = 1\n        }\n        for (num <- nums2) {\n            if (nums2Map.contains(num)) nums2Map(num) += 1\n            else nums2Map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums1Map.keys) {\n            if (nums2Map.contains(num)) result += nums1Map(num) * nums2Map(num)\n        }\n        result",
    "        val nums1Map = nums1.groupBy(x => x).mapValues(_.size)\n        val nums2Map = nums2.groupBy(x => x).mapValues(_.size)\n        var count = 0L\n        for (num <- nums1Map.keys) {\n            if (nums2Map.contains(num)) {\n                count += nums1Map(num) * nums2Map(num)\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        return count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val nums1Map = nums1.groupBy(identity).mapValues(_.size)\n        val nums2Map = nums2.groupBy(identity).mapValues(_.size)\n        var count = 0L\n        for ((key, value) <- nums1Map) {\n            if (nums2Map.contains(key)) {\n                count += value * nums2Map(key)\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        return count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (!map.contains(num)) map += (num -> 0)\n            map(num) += 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            val num1 = nums1(i)\n            val num2 = nums2(i)\n            if (map.contains(num1)) map(num1) += num2\n            else map(num1) = num2\n        }\n        var result = 0L\n        for (i <- 0 until nums1.length) {\n            val num1 = nums1(i)\n            val num2 = nums2(i)\n            if (map.contains(num2)) result += map(num2)\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            val num1 = nums1(i)\n            val num2 = nums2(i)\n            if (map.contains(num1)) map(num1) += num2\n            else map(num1) = num2\n        }\n        var count = 0L\n        for (i <- 0 until nums1.length) {\n            val num1 = nums1(i)\n            val num2 = nums2(i)\n            if (map.contains(num2)) {\n                count += map(num2)\n                map(num2) = 0\n            }\n        }\n        count",
    "        val n = nums1.length\n        val m = nums2.length\n        if (n != m) throw new Exception(\"The two lists must have the same length\")\n        val nums1Sorted = nums1.sorted\n        val nums2Sorted = nums2.sorted\n        var count = 0L\n        for (i <- 0 until n) {\n            if (nums1Sorted(i) == nums2Sorted(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val map1 = new HashMap[Long, Long]()\n        val map2 = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            map1(nums1(i)) = map1.getOrElse(nums1(i), 0) + 1\n            map2(nums2(i)) = map2.getOrElse(nums2(i), 0) + 1\n        }\n        var result : Long = 0\n        for (i <- map1.keys) {\n            if (map2.contains(i)) result += map1(i) * map2(i)\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            val n1 = nums1(i)\n            val n2 = nums2(i)\n            if (n1 == n2) {\n                val c = map.getOrElse(n1, 0)\n                map.put(n1, c + 1)\n            }\n        }\n        var result = 0L\n        for (c <- map.values) {\n            result += c * (c - 1) / 2\n        }\n        result",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val nums1Map = nums1.groupBy(identity).mapValues(_.size)\n        val nums2Map = nums2.groupBy(identity).mapValues(_.size)\n        var count = 0L\n        for (i <- nums1Map.keys) {\n            if (nums2Map.contains(i)) count += nums1Map(i) * nums2Map(i)\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        val nums1Map = nums1.groupBy(x => x).mapValues(x => x.length)\n        val nums2Map = nums2.groupBy(x => x).mapValues(x => x.length)\n        var result = 0L\n        for (key <- nums1Map.keySet) {\n            if (nums2Map.contains(key)) {\n                result += nums1Map(key) * nums2Map(key)\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            if (map.contains(nums1(i))) map(nums1(i)) += 1\n            else map(nums1(i)) = 1\n        }\n        var result = 0L\n        for (i <- 0 until nums2.length) {\n            if (map.contains(nums2(i))) {\n                result += map(nums2(i))\n                map(nums2(i)) -= 1\n                if (map(nums2(i)) == 0) map.remove(nums2(i))\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1 else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            val num1 = nums1(i)\n            val num2 = nums2(i)\n            if (num1 == num2) {\n                map(num1) = map.getOrElse(num1, 0) + 1\n            }\n        }\n        var result = 0L\n        for (num <- map.keySet) {\n            val count = map(num)\n            result += count * (count - 1) / 2\n        }\n        result",
    "        val nums1Map = nums1.groupBy(x => x).mapValues(x => x.length)\n        val nums2Map = nums2.groupBy(x => x).mapValues(x => x.length)\n        var count = 0L\n        for (key <- nums1Map.keys) {\n            if (nums2Map.contains(key)) {\n                count += nums1Map(key) * nums2Map(key)\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            val n = nums1(i)\n            if (map.contains(n)) map(n) += 1\n            else map += (n -> 1)\n        }\n        var count = 0L\n        for (i <- 0 until nums2.length) {\n            val n = nums2(i)\n            if (map.contains(n)) {\n                count += map(n)\n                map(n) -= 1\n                if (map(n) == 0) map -= n\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            val x = nums1(i)\n            if (map.contains(x)) map(x) += 1\n            else map(x) = 1\n        }\n        var result = 0L\n        for (i <- 0 until nums2.length) {\n            val x = nums2(i)\n            if (map.contains(x)) {\n                result += map(x)\n                map(x) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val nums1Map = nums1.groupBy(identity).mapValues(_.size)\n        val nums2Map = nums2.groupBy(identity).mapValues(_.size)\n        var count = 0L\n        for ((k, v) <- nums1Map) {\n            if (nums2Map.contains(k)) count += v * nums2Map(k)\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            val key = nums1(i)\n            if (map.contains(key)) map(key) += 1\n            else map(key) = 1\n        }\n        var result = 0L\n        for (i <- 0 until nums2.length) {\n            val key = nums2(i)\n            if (map.contains(key)) {\n                result += map(key)\n                map(key) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            val num1 = nums1(i)\n            val num2 = nums2(i)\n            if (num1 == num2) {\n                val count = map.getOrElse(num1, 0)\n                map += (num1 -> (count + 1))\n            }\n        }\n        var result = 0L\n        for (num <- map.keys) {\n            val count = map(num)\n            result += count * (count - 1) / 2\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        val n = nums1.length\n        var count = 0L\n        for (i <- 0 until n) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val nums1Map = new HashMap[Long, Long]()\n        val nums2Map = new HashMap[Long, Long]()\n        nums1.foreach(num => nums1Map(num) = nums1Map.getOrElse(num, 0) + 1)\n        nums2.foreach(num => nums2Map(num) = nums2Map.getOrElse(num, 0) + 1)\n        var result = 0L\n        for ((key, value) <- nums1Map) {\n            result += value * nums2Map.getOrElse(key, 0)\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        val map1 = new HashMap[Long, Long]\n        val map2 = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            val n1 = nums1(i)\n            val n2 = nums2(i)\n            map1(n1) = map1.getOrElse(n1, 0) + 1\n            map2(n2) = map2.getOrElse(n2, 0) + 1\n        }\n        var result = 0L\n        for (i <- 0 until nums1.length) {\n            val n1 = nums1(i)\n            val n2 = nums2(i)\n            if (n1 == n2) {\n                result += map1(n1) * map2(n2) - 1\n            } else {\n                result += map1(n1) * map2(n2)\n            }\n        }\n        result / 2",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            val x = nums1(i)\n            if (map.contains(x)) map(x) += 1\n            else map(x) = 1\n        }\n        var result = 0L\n        for (i <- 0 until nums2.length) {\n            val x = nums2(i)\n            if (map.contains(x)) {\n                result += map(x)\n                map(x) = 0\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- nums1) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- nums2) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) = 0\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            val key = nums1(i)\n            if (map.contains(key)) map(key) += 1\n            else map(key) = 1\n        }\n        var result = 0L\n        for (i <- 0 until nums2.length) {\n            val key = nums2(i)\n            if (map.contains(key)) {\n                result += map(key)\n                map(key) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result : Long = 0\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val nums1Map = new HashMap[Long, Long]\n        val nums2Map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (nums1Map.contains(num)) nums1Map(num) += 1\n            else nums1Map(num) = 1\n        }\n        for (num <- nums2) {\n            if (nums2Map.contains(num)) nums2Map(num) += 1\n            else nums2Map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums1Map.keys) {\n            if (nums2Map.contains(num)) result += nums1Map(num) * nums2Map(num)\n        }\n        result",
    "        val nums1Map = nums1.groupBy(x => x).mapValues(x => x.length)\n        val nums2Map = nums2.groupBy(x => x).mapValues(x => x.length)\n        var result = 0L\n        for ((k, v) <- nums1Map) {\n            if (nums2Map.contains(k)) {\n                result += v * nums2Map(k)\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map += num -> 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map += num -> 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]()\n        nums1.foreach(x => {\n            if (map.contains(x)) map(x) += 1\n            else map += (x -> 1)\n        })\n        var count = 0L\n        nums2.foreach(x => {\n            if (map.contains(x)) {\n                count += map(x)\n                map(x) -= 1\n                if (map(x) == 0) map -= x\n            }\n        })\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val nums1Map = nums1.groupBy(x => x).mapValues(_.size)\n        val nums2Map = nums2.groupBy(x => x).mapValues(_.size)\n        var count = 0L\n        for (key <- nums1Map.keys) {\n            if (nums2Map.contains(key)) {\n                count += nums1Map(key) * nums2Map(key)\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map1 = new HashMap[Long, Long]\n        val map2 = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            map1(nums1(i)) = map1.getOrElse(nums1(i), 0) + 1\n            map2(nums2(i)) = map2.getOrElse(nums2(i), 0) + 1\n        }\n        var result = 0L\n        for (i <- map1.keys) {\n            result += map1(i) * map2.getOrElse(i, 0)\n        }\n        result",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (n <- nums1) {\n            if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n        }\n        var result = 0L\n        for (n <- nums2) {\n            if (map.contains(n)) {\n                result += map(n)\n                map(n) = 0\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        return count",
    "        val nums1Map = nums1.groupBy(identity).mapValues(_.size)\n        val nums2Map = nums2.groupBy(identity).mapValues(_.size)\n        var count = 0L\n        for (i <- nums1Map.keys) {\n            if (nums2Map.contains(i)) {\n                count += nums1Map(i) * nums2Map(i)\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            val n1 = nums1(i)\n            val n2 = nums2(i)\n            if (n1 != n2) {\n                val key = min(n1, n2)\n                val value = max(n1, n2)\n                if (map.contains(key)) {\n                    map(key) = map(key) + value\n                } else {\n                    map(key) = value\n                }\n            }\n        }\n        var result = 0L\n        for (key <- map.keys) {\n            val value = map(key)\n            result += (value * (value - 1)) / 2\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            val key = nums1(i)\n            if (map.contains(key)) map(key) += 1\n            else map(key) = 1\n        }\n        var count = 0L\n        for (i <- 0 until nums2.length) {\n            val key = nums2(i)\n            if (map.contains(key)) {\n                count += map(key)\n                map(key) = 0\n            }\n        }\n        count",
    "        val nums1Map = new HashMap[Long, Long]()\n        val nums2Map = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            nums1Map(nums1(i)) = nums1Map.getOrElse(nums1(i), 0) + 1\n            nums2Map(nums2(i)) = nums2Map.getOrElse(nums2(i), 0) + 1\n        }\n        var result = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) {\n                result += 1\n            }\n        }\n        for (key <- nums1Map.keySet) {\n            result += nums1Map(key) * nums2Map.getOrElse(key, 0)\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map1 = new HashMap[Long, Long]()\n        val map2 = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            map1(nums1(i)) = map1.getOrElse(nums1(i), 0) + 1\n            map2(nums2(i)) = map2.getOrElse(nums2(i), 0) + 1\n        }\n        var result = 0L\n        for (i <- map1.keys) {\n            result += map1(i) * map2.getOrElse(i, 0)\n        }\n        result",
    "        var count : Long = 0\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        return count",
    "        val nums1Map = new HashMap[Long, Long]()\n        val nums2Map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (nums1Map.contains(num)) nums1Map(num) += 1\n            else nums1Map(num) = 1\n        }\n        for (num <- nums2) {\n            if (nums2Map.contains(num)) nums2Map(num) += 1\n            else nums2Map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums1Map.keys) {\n            if (nums2Map.contains(num)) {\n                result += nums1Map(num) * nums2Map(num)\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (i <- nums1) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var count = 0L\n        for (i <- nums2) {\n            if (map.contains(i)) {\n                count += map(i)\n                map(i) = 0\n            }\n        }\n        count",
    "        val map1 = new HashMap[Long, Long]()\n        val map2 = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            val n1 = nums1(i)\n            val n2 = nums2(i)\n            map1(n1) = map1.getOrElse(n1, 0) + 1\n            map2(n2) = map2.getOrElse(n2, 0) + 1\n        }\n        var result = 0L\n        for (i <- 0 until nums1.length) {\n            val n1 = nums1(i)\n            val n2 = nums2(i)\n            if (n1 == n2) result += map1(n1) * map2(n2) - 1\n            else result += map1(n1) * map2(n2)\n        }\n        result / 2",
    "        var count : Long = 0\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) -= 1\n                if (map(num) == 0) map.remove(num)\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        var result = 0L\n        for (i <- 0 until nums1.length) {\n            val n1 = nums1(i)\n            val n2 = nums2(i)\n            if (n1 == n2) result += 1\n            else {\n                if (map.contains(n1)) map(n1) += 1\n                else map(n1) = 1\n                if (map.contains(n2)) map(n2) += 1\n                else map(n2) = 1\n            }\n        }\n        for (i <- 0 until nums1.length) {\n            val n1 = nums1(i)\n            val n2 = nums2(i)\n            if (n1 != n2) {\n                if (map(n1) > 1) result += 1\n                if (map(n2) > 1) result += 1\n            }\n        }\n        result",
    "        val map1 = new HashMap[Long, Long]()\n        val map2 = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            map1(nums1(i)) = map1.getOrElse(nums1(i), 0) + 1\n            map2(nums2(i)) = map2.getOrElse(nums2(i), 0) + 1\n        }\n        var result = 0L\n        for (key <- map1.keys) {\n            if (map2.contains(key)) {\n                result += map1(key) * map2(key)\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map1 = new HashMap[Long, Long]()\n        val map2 = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            map1(nums1(i)) = map1.getOrElse(nums1(i), 0) + 1\n            map2(nums2(i)) = map2.getOrElse(nums2(i), 0) + 1\n        }\n        var result = 0L\n        for (i <- map1.keys) {\n            result += map1(i) * map2.getOrElse(i, 0)\n        }\n        result",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        var result = 0L\n        for (i <- 0 until nums1.length) {\n            if (map.contains(nums1(i))) {\n                result += map(nums1(i))\n            }\n            if (map.contains(nums2(i))) {\n                map(nums2(i)) += 1\n            } else {\n                map(nums2(i)) = 1\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            val n = nums1(i)\n            if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n        }\n        var result = 0L\n        for (i <- 0 until nums2.length) {\n            val n = nums2(i)\n            if (map.contains(n)) {\n                result += map(n)\n                map(n) = 0\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val n = nums1.length\n        val m = nums2.length\n        if (n != m) throw new Exception(\"nums1 and nums2 must have the same length\")\n        val nums1Sorted = nums1.sorted\n        val nums2Sorted = nums2.sorted\n        var count = 0L\n        for (i <- 0 until n) {\n            if (nums1Sorted(i) == nums2Sorted(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) -= 1\n                if (map(num) == 0) map.remove(num)\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map += (num -> 1)\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val n = nums1.length\n        val m = nums2.length\n        if (n != m) throw new IllegalArgumentException(\"nums1 and nums2 must have the same length\")\n        val map = new HashMap[Long, Long]\n        for (i <- 0 until n) {\n            if (map.contains(nums1(i))) map(nums1(i)) += 1\n            else map(nums1(i)) = 1\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            if (map.contains(nums2(i))) {\n                result += map(nums2(i))\n                map(nums2(i)) -= 1\n                if (map(nums2(i)) == 0) map.remove(nums2(i))\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            val x = nums1(i)\n            if (map.contains(x)) map(x) += 1\n            else map(x) = 1\n        }\n        var result = 0L\n        for (i <- 0 until nums2.length) {\n            val x = nums2(i)\n            if (map.contains(x)) {\n                result += map(x)\n                map(x) = 0\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map1 = new HashMap[Long, Long]\n        val map2 = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            map1(nums1(i)) = map1.getOrElse(nums1(i), 0) + 1\n            map2(nums2(i)) = map2.getOrElse(nums2(i), 0) + 1\n        }\n        var result = 0L\n        for ((key, value) <- map1) {\n            result += value * map2.getOrElse(key, 0)\n        }\n        result",
    "        val map = new HashMap[Long, Long]()\n        var count = 0L\n        for (i <- 0 until nums1.length) {\n            val n1 = nums1(i)\n            val n2 = nums2(i)\n            if (n1 == n2) count += 1\n            if (map.contains(n1)) map(n1) += 1\n            else map(n1) = 1\n        }\n        for (i <- 0 until nums2.length) {\n            val n2 = nums2(i)\n            if (map.contains(n2)) {\n                count += map(n2)\n                map(n2) = 0\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            val n1 = nums1(i)\n            val n2 = nums2(i)\n            if (n1 == n2) {\n                if (map.contains(n1)) map(n1) += 1\n                else map(n1) = 1\n            }\n        }\n        var result = 0L\n        for (v <- map.values) {\n            result += v * (v - 1) / 2\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        val n = nums1.length\n        val nums1Map = new HashMap[Long, Long]\n        val nums2Map = new HashMap[Long, Long]\n        for (i <- 0 until n) {\n            nums1Map(nums1(i)) = nums1Map.getOrElse(nums1(i), 0) + 1\n            nums2Map(nums2(i)) = nums2Map.getOrElse(nums2(i), 0) + 1\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            val num1 = nums1(i)\n            val num2 = nums2(i)\n            if (num1 == num2) {\n                result += nums1Map(num1) - 1\n                result += nums2Map(num2) - 1\n            }\n            else {\n                result += nums1Map(num1)\n                result += nums2Map(num2)\n            }\n        }\n        result / 2",
    "        val nums1Map = nums1.groupBy(x => x).mapValues(_.length)\n        val nums2Map = nums2.groupBy(x => x).mapValues(_.length)\n        var result = 0L\n        for (key <- nums1Map.keys) {\n            if (nums2Map.contains(key)) {\n                result += nums1Map(key) * nums2Map(key)\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            val num1 = nums1(i)\n            val num2 = nums2(i)\n            if (map.contains(num1)) map(num1) += num2\n            else map(num1) = num2\n        }\n        var result = 0L\n        for (num <- map.keys) {\n            val count = map(num)\n            result += count * (count - 1) / 2\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            val key = nums1(i)\n            val value = map.getOrElse(key, 0)\n            map.put(key, value + 1)\n        }\n        var result = 0L\n        for (i <- 0 until nums2.length) {\n            val key = nums2(i)\n            val value = map.getOrElse(key, 0)\n            if (value > 0) {\n                result += 1\n                map.put(key, value - 1)\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            val num1 = nums1(i)\n            val num2 = nums2(i)\n            if (map.contains(num1)) map(num1) += num2\n            else map(num1) = num2\n        }\n        var result = 0L\n        for (num <- map.keys) {\n            val count = map(num)\n            result += count * (count - 1) / 2\n        }\n        result",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        var count : Long = 0\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        val nums1Map = nums1.groupBy(x => x).mapValues(x => x.length)\n        val nums2Map = nums2.groupBy(x => x).mapValues(x => x.length)\n        var count = 0L\n        for (num <- nums1Map.keys) {\n            if (nums2Map.contains(num)) {\n                count += nums1Map(num) * nums2Map(num)\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (i <- nums1) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        var result = 0L\n        for (i <- nums2) {\n            if (map.contains(i)) {\n                result += map(i)\n                map(i) = 0\n            }\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            val num1 = nums1(i)\n            val num2 = nums2(i)\n            if (num1 == num2) {\n                if (!map.contains(num1)) map(num1) = 0\n                map(num1) += 1\n            }\n        }\n        var result = 0L\n        for (num <- map.keys) {\n            val count = map(num)\n            result += count * (count - 1) / 2\n        }\n        result",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val nums1Map = nums1.groupBy(identity).mapValues(_.size)\n        val nums2Map = nums2.groupBy(identity).mapValues(_.size)\n        var result = 0L\n        for ((k, v) <- nums1Map) {\n            if (nums2Map.contains(k)) {\n                result += v * nums2Map(k)\n            }\n        }\n        result",
    "        val nums1Map = new HashMap[Long, Long]\n        val nums2Map = new HashMap[Long, Long]\n        for (i <- 0 until nums1.length) {\n            nums1Map(nums1(i)) = nums1Map.getOrElse(nums1(i), 0) + 1\n            nums2Map(nums2(i)) = nums2Map.getOrElse(nums2(i), 0) + 1\n        }\n        var result : Long = 0\n        for (i <- nums1Map.keys) {\n            if (nums2Map.contains(i)) {\n                result += nums1Map(i) * nums2Map(i)\n            }\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        val map = new HashMap[Long, Long]\n        for (num <- nums1) {\n            if (!map.contains(num)) map(num) = 0\n            map(num) += 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) result += map(num)\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val map = HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            val num1 = nums1(i)\n            val num2 = nums2(i)\n            if (num1 == num2) {\n                map(num1) = map.getOrElse(num1, 0) + 1\n            }\n        }\n        var result = 0L\n        for (num <- map.keys) {\n            val count = map(num)\n            result += count * (count - 1) / 2\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val nums1Map = new HashMap[Long, Long]()\n        val nums2Map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (nums1Map.contains(num)) nums1Map(num) += 1\n            else nums1Map(num) = 1\n        }\n        for (num <- nums2) {\n            if (nums2Map.contains(num)) nums2Map(num) += 1\n            else nums2Map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums1Map.keys) {\n            if (nums2Map.contains(num)) result += nums1Map(num) * nums2Map(num)\n        }\n        result",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var result = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                result += map(num)\n                map(num) = 0\n            }\n        }\n        result",
    "        val map1 = new HashMap[Long, Long]()\n        val map2 = new HashMap[Long, Long]()\n        for (i <- 0 until nums1.length) {\n            val num1 = nums1(i)\n            val num2 = nums2(i)\n            if (map1.contains(num1)) map1(num1) += 1\n            else map1(num1) = 1\n            if (map2.contains(num2)) map2(num2) += 1\n            else map2(num2) = 1\n        }\n        var result = 0L\n        for (num <- map1.keys) {\n            if (map2.contains(num)) result += map1(num) * map2(num)\n        }\n        result",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val map = new HashMap[Long, Long]()\n        for (num <- nums1) {\n            if (map.contains(num)) map(num) += 1\n            else map(num) = 1\n        }\n        var count = 0L\n        for (num <- nums2) {\n            if (map.contains(num)) {\n                count += map(num)\n                map(num) = 0\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until nums1.length) {\n            if (nums1(i) == nums2(i)) count += 1\n        }\n        count",
    "        val n = nums1.length\n        val m = nums2.length\n        if (n != m) return 0\n        var map = Map[Long, Long]()\n        for (i <- 0 until n) {\n            val x = nums1(i)\n            val y = nums2(i)\n            if (x == y) {\n                if (map.contains(x)) map(x) += 1\n                else map(x) = 1\n            }\n        }\n        var result = 0L\n        for (x <- map.keys) {\n            val c = map(x)\n            result += c * (c - 1) / 2\n        }\n        result",
    "        val n = nums1.length\n        val m = nums2.length\n        if (n != m) throw new IllegalArgumentException(\"nums1 and nums2 must have the same length\")\n        val map = new HashMap[Long, Long]\n        for (i <- 0 until n) {\n            val x = nums1(i)\n            val y = nums2(i)\n            if (x == y) {\n                val count = map.getOrElse(x, 0)\n                map.put(x, count + 1)\n            }\n        }\n        var result = 0L\n        for (x <- map.keys) {\n            val count = map(x)\n            result += count * (count - 1) / 2\n        }\n        result"
  ]
}