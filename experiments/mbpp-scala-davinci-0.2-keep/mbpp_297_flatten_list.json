{
  "name": "mbpp_297_flatten_list",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => for (x <- list) list2 = list2 ::: flattenList(x)\n            case x : Long => list2 = list2 :+ x\n        }\n        return list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : Long => x :: flattenList(xs)\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case long : Long => List(long)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x:List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => head match {\n                case head : Long => head :: flattenList(tail)\n                case head : List[Any] => flattenList(head) ::: flattenList(tail)\n            }\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2",
    "        list1 match {\n            case x : Long => List(x)\n            case x : List[Any] => x.flatMap(flattenList)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        list2",
    "        list1 match {\n            case list1 : List[Any] => {\n                var list2 = List[Long]()\n                for (i <- list1) {\n                    list2 = list2 ::: flattenList(i)\n                }\n                list2\n            }\n            case list1 : Long => List(list1)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 ::: List(item)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 ::: List(item)\n            }\n        }\n        list2",
    "        list1 match {\n            case x : List[Any] => x.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x => List(x.asInstanceOf[Long])\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n                case y : Long => y :: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x:Long) :: xs => x :: flattenList(xs)\n            case (x:List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- 0 until x.length) {\n                    list2 = list2 ::: flattenList(x(i))\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        list1 match {\n            case list1 : List[Any] => list1.flatMap(flattenList)\n            case list1 : Long => List(list1)\n        }",
    "        list1 match {\n            case list1 : List[Any] => list1.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        list1 match {\n            case x : List[Any] => x.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        list1 match {\n            case list1 : List[Any] => list1.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case num : Long => List(num)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case l : Long => List(l)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x.asInstanceOf[Long] :: flattenList(xs)\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        return list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => x.foreach(y => list2 = list2 ++ flattenList(y))\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => list2 = list2 ::: flattenList(x)\n            case _ =>\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Int => list2 = list2 :+ x.toLong\n            case x : Long => list2 = list2 :+ x\n            case x : Double => list2 = list2 :+ x.toLong\n            case x : Float => list2 = list2 :+ x.toLong\n            case x : String => list2 = list2 :+ x.toLong\n            case _ => list2 = list2 :+ 0\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ++ flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : Long => x :: flattenList(xs)\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => for (i <- x) list2 = list2 ::: flattenList(i)\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => head match {\n                case x : Long => x :: flattenList(tail)\n                case x : List[Any] => flattenList(x) ::: flattenList(tail)\n            }\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case l : List[Any] => for (i <- l) list2 = list2 ::: flattenList(i)\n            case i : Int => list2 = list2 :+ i.toLong\n            case l : Long => list2 = list2 :+ l\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case n : Long => List(n)\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case i : Long => list2 = list2 :+ i\n        }\n        return list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n        }\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => list2 = list2 :+ item\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => x.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (x <- list) {\n                    list2 = list2 ::: flattenList(x)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case i : Long => {\n                list2 = list2 :+ i\n            }\n        }\n        list2",
    "        var list2 : List[Long] = Nil\n        list1 match {\n            case Nil => list2\n            case head :: tail => head match {\n                case x : Long => list2 = list2 ::: List(x)\n                case x : List[Any] => list2 = list2 ::: flattenList(x)\n            }\n            list2 = list2 ::: flattenList(tail)\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case long : Long => {\n                list2 = list2 :+ long\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (elem <- list) {\n                    list2 = list2 ::: flattenList(elem)\n                }\n            }\n            case long : Long => {\n                list2 = list2 :+ long\n            }\n        }\n        list2",
    "        list1 match {\n            case (x : List[Any]) => x.flatMap(flattenList)\n            case (x : Long) => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case (x : Long) :: xs => x :: flattenList(xs)\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => x.foreach(x => list2 = list2 ::: flattenList(x))\n        }\n        list2",
    "        var list2 : List[Long] = Nil\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case n : Long => list2 = list2 ::: List(n)\n            case _ =>\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => head match {\n                case x : Long => x :: flattenList(tail)\n                case x : List[Any] => flattenList(x) ::: flattenList(tail)\n            }\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        return list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2",
    "        list1 match {\n            case x : List[Any] => x.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var result = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    result = result ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                result = result ::: List(x)\n            }\n            case _ => {\n                throw new Exception(\"Invalid input\")\n            }\n        }\n        result",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ++ flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n            case _ => {\n                println(\"Error\")\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (elem <- list) {\n                    list2 = list2 ::: flattenList(elem)\n                }\n            }\n            case elem : Long => {\n                list2 = list2 ::: List(elem)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        return list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case l : List[Any] => {\n                for (item <- l) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case n : Long => {\n                list2 = list2 :+ n\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case i : Int => list2 = list2 :+ i.toLong\n            case i : Long => list2 = list2 :+ i\n        }\n        return list2",
    "        list1 match {\n            case x : Long => List(x)\n            case x : List[Any] => x.flatMap(flattenList)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        list1 match {\n            case x : Long => List(x)\n            case x : List[Any] => x.flatMap(flattenList)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case i : Long => {\n                list2 = list2 :+ i\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case num : Long => list2 = list2 :+ num\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case l : List[Any] => l.flatMap(flattenList)\n            case l : Long => List(l)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => for (i <- x) list2 = list2 ++ flattenList(i)\n            case _ =>\n        }\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 ::: List(item)\n            }\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case x : List[Any] => {\n                var list2 = List[Long]()\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n                list2\n            }\n            case x : Long => List(x)\n            case x : Int => List(x.toLong)\n            case x : Double => List(x.toLong)\n            case x : Float => List(x.toLong)\n            case x : String => List(x.toLong)\n            case _ => List()\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ++ flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.map(flattenList).flatten\n            case n : Long => List(n)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case num : Long => List(num)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case l : Long => {\n                list2 = list2 :+ l\n            }\n        }\n        return list2",
    "        list1 match {\n            case list : List[Any] => list.map(flattenList).flatten\n            case num : Long => List(num)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case long : Long => {\n                list2 = list2 :+ long\n            }\n        }\n        return list2",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : Long => x :: flattenList(xs)\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n            }\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case (x : List[Any]) => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case (x : Long) => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case num : Long => list2 = list2 :+ num\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n                case x : Long => x :: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => head match {\n                case x : Long => x :: flattenList(tail)\n                case x : List[Any] => flattenList(x) ::: flattenList(tail)\n            }\n        }",
    "        list1 match {\n            case x : Long => List(x)\n            case x : List[Any] => x.flatMap(flattenList)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x => List(x.asInstanceOf[Long])\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case num : Long => List(num)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => for (i <- x) list2 = list2 ::: flattenList(i)\n            case x : Long => list2 = list2 :+ x\n        }\n        return list2",
    "        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case long : Long => list2 = list2 :+ long\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (elem <- list) {\n                    list2 = list2 ::: flattenList(elem)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n        }\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case i : Int => list2 = list2 :+ i.toLong\n            case i : Long => list2 = list2 :+ i\n            case i : Double => list2 = list2 :+ i.toLong\n            case i : Float => list2 = list2 :+ i.toLong\n            case _ =>\n        }\n        list2",
    "        var result = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    result = result ::: flattenList(item)\n                }\n            }\n            case item : Long => result = result :+ item\n        }\n        result",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : Int => list2 = list2 :+ x.toLong\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => list2 = list2 ++ flattenList(x)\n            case _ =>\n        }\n        return list2",
    "        var list2 : List[Long] = Nil\n        list1 match {\n            case Nil => list2\n            case x :: xs => list2 = list2 ::: List(x.asInstanceOf[Long]) ::: flattenList(xs)\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x:List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case long : Long => List(long)\n            case _ => List()\n        }",
    "        list1 match {\n            case x : Long => List(x)\n            case x : List[Any] => x.flatMap(flattenList)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        return list2",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n                case y : Long => y :: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x : Long => List(x)\n            case x : List[Any] => flattenList(x.head) ::: flattenList(x.tail)\n        }",
    "        list1 match {\n            case l : List[Any] => l.flatMap(flattenList)\n            case i : Long => List(i)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => for (i <- list) list2 = list2 ::: flattenList(i)\n            case i : Long => list2 = list2 :+ i\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => for (i <- x) list2 = list2 ::: flattenList(i)\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case l : List[Any] => for (i <- l) list2 = list2 ::: flattenList(i)\n            case i : Int => list2 = list2 :+ i.toLong\n            case l : Long => list2 = list2 :+ l\n        }\n        return list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case h :: t => h match {\n                case x: Long => x :: flattenList(t)\n                case x: List[Any] => flattenList(x) ::: flattenList(t)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => x.foreach(y => list2 = list2 ::: flattenList(y))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => {\n                var list2 = List[Long]()\n                for (x <- list) {\n                    list2 = list2 ::: flattenList(x)\n                }\n                list2\n            }\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2",
    "        list1 match {\n            case list1 : List[Any] => list1.flatMap(flattenList)\n            case num : Long => List(num)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (head : List[Any]) :: tail => flattenList(head) ::: flattenList(tail)\n            case head :: tail => head :: flattenList(tail)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case num : Long => List(num)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 ::: List(x)\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n            case _ => {\n                // Do nothing\n            }\n        }\n        return list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case n : Long => {\n                list2 = list2 :+ n\n            }\n        }\n        return list2"
  ]
}