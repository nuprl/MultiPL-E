{
  "name": "mbpp_400_extract_freq",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        freq_map.values.foldLeft(0L)((a, b) => a + b * (b - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8it43y6.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8it43y6.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8it43y6.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8it43y6.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (freq_map.contains(tuple)) {\n                freq_map(tuple) += 1\n            } else {\n                freq_map(tuple) = 1\n            }\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnoqtxn_o.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnoqtxn_o.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnoqtxn_o.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnoqtxn_o.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.values.foldLeft(1L)((a, b) => a * b)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpclekb6a_.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpclekb6a_.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpclekb6a_.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpclekb6a_.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_list_set = test_list.toSet\n        test_list_set.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptvqw6hd_.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptvqw6hd_.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptvqw6hd_.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptvqw6hd_.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpigp_vela.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpigp_vela.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpigp_vela.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpigp_vela.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_list = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            var freq = 1\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) == test_list(j)) {\n                    freq += 1\n                }\n            }\n            freq_list += freq\n        }\n        var result = 1L\n        for (i <- 0 until freq_list.length) {\n            result *= (freq_list(i) + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps0axfj2j.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps0axfj2j.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps0axfj2j.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps0axfj2j.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        val freq_list = freq.toList\n        val freq_list_sorted = freq_list.sortBy(_._1)\n        val freq_list_sorted_filtered = freq_list_sorted.filter(x => x._2 == 1)\n        freq_list_sorted_filtered.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa4mwhiqs.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa4mwhiqs.scala:13:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa4mwhiqs.scala:13:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa4mwhiqs.scala:13:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var count = 0L\n        for ((k, v) <- freq_map) {\n            count += (v * (v - 1)) / 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk78tfv5_.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk78tfv5_.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk78tfv5_.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk78tfv5_.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510536,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvoig9uq.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvoig9uq.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvoig9uq.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxvoig9uq.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(identity).mapValues(_.size).values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ip52uww.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ip52uww.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ip52uww.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ip52uww.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq.keys) {\n            count += freq(i) * (freq(i) - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl30efy66.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl30efy66.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl30efy66.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl30efy66.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpclwvj0k9.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpclwvj0k9.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpclwvj0k9.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpclwvj0k9.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map) {\n            freq_list = i._2 :: freq_list\n        }\n        freq_list.sorted.reverse(0)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gvpvt3o.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gvpvt3o.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gvpvt3o.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5gvpvt3o.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val unique_tuples = test_list.distinct\n        unique_tuples.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510536,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv06z1vbx.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv06z1vbx.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv06z1vbx.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv06z1vbx.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (freq_map(test_list(i)) > 0 && freq_map(test_list(j)) > 0) {\n                    result += 1\n                    freq_map(test_list(i)) -= 1\n                    freq_map(test_list(j)) -= 1\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxq08qmkj.scala:27:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxq08qmkj.scala:27:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxq08qmkj.scala:27:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxq08qmkj.scala:27:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = 0L\n        var set = Set[Long]()\n        for (i <- test_list) {\n            if (!set.contains(i)) {\n                freq += 1\n                set += i\n            }\n        }\n        return freq\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510536,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpohf2r1ye.scala:17:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpohf2r1ye.scala:17:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpohf2r1ye.scala:17:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpohf2r1ye.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        freq.values.foldLeft(1L)((a, b) => a * b)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu2_e5uri.scala:17:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu2_e5uri.scala:17:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu2_e5uri.scala:17:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu2_e5uri.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var ans = 0L\n        for (i <- freq.values) {\n            ans += i * (i - 1) / 2\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps4x961nz.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps4x961nz.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps4x961nz.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps4x961nz.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510536,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpezf2le_p.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpezf2le_p.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpezf2le_p.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpezf2le_p.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- freq.values) {\n            sum += i * (i - 1) / 2\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7uk9rku4.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7uk9rku4.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7uk9rku4.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7uk9rku4.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpynrhswis.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpynrhswis.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpynrhswis.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpynrhswis.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_list = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            var freq = 1\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) == test_list(j)) {\n                    freq += 1\n                }\n            }\n            freq_list += freq\n        }\n        var unique_freq = new ListBuffer[Long]()\n        for (i <- 0 until freq_list.length) {\n            var is_unique = true\n            for (j <- 0 until unique_freq.length) {\n                if (freq_list(i) == unique_freq(j)) {\n                    is_unique = false\n                }\n            }\n            if (is_unique) {\n                unique_freq += freq_list(i)\n            }\n        }\n        return unique_freq.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfhz3n2tp.scala:31:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfhz3n2tp.scala:31:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfhz3n2tp.scala:31:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfhz3n2tp.scala:31:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                val key = test_list(i) * test_list(j)\n                if (freq_map.contains(key)) freq_map(key) += 1\n                else freq_map(key) = 1\n            }\n        }\n        freq_map.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekc4fs7v.scala:17:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekc4fs7v.scala:17:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekc4fs7v.scala:17:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekc4fs7v.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                result += freq_map(key)\n                freq_map(key) = 0\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6wn4aiqw.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6wn4aiqw.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6wn4aiqw.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6wn4aiqw.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(x => x).map(x => x._2.length).sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppc2y70qg.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppc2y70qg.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppc2y70qg.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppc2y70qg.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpynrhswis.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpynrhswis.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpynrhswis.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpynrhswis.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- freq_map.values) {\n            sum += i * (i - 1) / 2\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0sn2qc1j.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0sn2qc1j.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0sn2qc1j.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0sn2qc1j.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        test_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzxn7axw.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzxn7axw.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzxn7axw.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzxn7axw.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                result += freq_map(key)\n                freq_map(key) = 0\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6u9v0fz.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6u9v0fz.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6u9v0fz.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6u9v0fz.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) freq_map(test_list(i)) += 1\n            else freq_map(test_list(i)) = 1\n        }\n        var freq_list = freq_map.values.toList\n        var freq_list_sorted = freq_list.sorted\n        var freq_list_sorted_rev = freq_list_sorted.reverse\n        var freq_list_sorted_rev_sum = freq_list_sorted_rev.sum\n        var freq_list_sorted_rev_sum_half = freq_list_sorted_rev_sum / 2\n        var freq_list_sorted_rev_sum_half_index = 0\n        var freq_list_sorted_rev_sum_half_sum = 0\n        for (i <- 0 until freq_list_sorted_rev.length) {\n            freq_list_sorted_rev_sum_half_sum += freq_list_sorted_rev(i)\n            if (freq_list_sorted_rev_sum_half_sum >= freq_list_sorted_rev_sum_half) {\n                freq_list_sorted_rev_sum_half_index = i\n                break\n            }\n        }\n        var freq_list_sorted_rev_sum_half_index_value = freq_list_sorted_rev(freq_list_sorted_rev_sum_half_index)\n        var freq_list_sorted_rev_sum_half_index_value_sum = freq_list_sorted_rev_sum_half_index_value * (freq_list_sorted_rev_sum_half_index + 1)\n        if (freq_list_sorted_rev_sum_half_index + 1 < freq_list_sorted_rev.length) {\n            freq_list_sorted_rev_sum_half_index_value_sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpcunv1rhy.scala:37:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcunv1rhy.scala:19:46 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m            freq_list_sorted_rev_sum_half_sum += freq_list_sorted_rev(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcunv1rhy.scala:22:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcunv1rhy.scala:31:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcunv1rhy.scala:31:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Erro",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map += (i -> 1)\n        }\n        var count = 0\n        for (i <- test_map.values) {\n            if (i > 1) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9sbbu3zr.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9sbbu3zr.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9sbbu3zr.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9sbbu3zr.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                result += freq_map(key)\n                freq_map(key) = 0\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6wn4aiqw.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6wn4aiqw.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6wn4aiqw.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6wn4aiqw.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var sum = 0\n        for (i <- freq_map.values) {\n            sum += i * (i - 1) / 2\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncyzpkpz.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncyzpkpz.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncyzpkpz.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncyzpkpz.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i == 1) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj84167yq.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj84167yq.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj84167yq.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj84167yq.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_list_sorted = test_list.sorted\n        var count = 0\n        for (i <- 0 until test_list_sorted.length - 1) {\n            if (test_list_sorted(i) != test_list_sorted(i + 1)) count += 1\n        }\n        count + 1\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoa4q0gy0.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoa4q0gy0.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoa4q0gy0.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoa4q0gy0.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var freq_list = List[Int]()\n        for (i <- freq_map.values) {\n            freq_list = freq_list :+ i\n        }\n        var freq_freq_map = Map[Int, Int]()\n        for (i <- freq_list) {\n            if (freq_freq_map.contains(i)) {\n                freq_freq_map(i) += 1\n            } else {\n                freq_freq_map(i) = 1\n            }\n        }\n        var freq_freq_list = List[Int]()\n        for (i <- freq_freq_map.values) {\n            freq_freq_list = freq_freq_list :+ i\n        }\n        var sum = 0L\n        for (i <- freq_freq_list) {\n            sum += (i * (i - 1)) / 2\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp32rmz_0r.scala:37:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp32rmz_0r.scala:37:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp32rmz_0r.scala:37:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp32rmz_0r.scala:37:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i > 1) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp353bdvq.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp353bdvq.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp353bdvq.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp353bdvq.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var result = 1L\n        for (i <- 0 until freq_list.length) {\n            result *= (freq_list(i) + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl_bxa_wi.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl_bxa_wi.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl_bxa_wi.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl_bxa_wi.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        val freq_list = freq_map.values.toList\n        val freq_set = freq_list.toSet\n        var result = 0L\n        for (i <- freq_set) {\n            result += (i * (i - 1)) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps4fn3kb_.scala:24:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps4fn3kb_.scala:24:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps4fn3kb_.scala:24:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps4fn3kb_.scala:24:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        val freq_list = freq.values.toList\n        val freq_set = freq_list.toSet\n        freq_set.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx2bx_u4k.scala:12:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx2bx_u4k.scala:12:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx2bx_u4k.scala:12:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx2bx_u4k.scala:12:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124052,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbzks3_hv.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbzks3_hv.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbzks3_hv.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbzks3_hv.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = 0L\n        var freq_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) + test_list(j) == 0) {\n                    freq_list = (test_list(i) * test_list(j)) :: freq_list\n                }\n            }\n        }\n        freq_list = freq_list.distinct\n        freq = freq_list.length\n        return freq\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpny3recp7.scala:20:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpny3recp7.scala:20:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpny3recp7.scala:20:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpny3recp7.scala:20:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map : Map[Long, Int] = Map()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list : List[Int] = List()\n        for (i <- 0 until test_list.length) {\n            freq_list = freq_map(test_list(i)) :: freq_list\n        }\n        freq_list.distinct.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124181,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp55ynm6e9.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp55ynm6e9.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp55ynm6e9.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp55ynm6e9.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn50lh6nl.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn50lh6nl.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn50lh6nl.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn50lh6nl.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_set = test_list.toSet\n        val test_map = new HashMap[Long, Long]\n        for (x <- test_set) {\n            test_map(x) = test_list.count(_ == x)\n        }\n        test_map.values.toList.filter(_ > 1).map(x => x * (x - 1) / 2).sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa0kl18jw.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa0kl18jw.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa0kl18jw.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa0kl18jw.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_set = freq_list.toSet\n        var freq_set_list = freq_set.toList\n        var freq_set_list_sorted = freq_set_list.sorted\n        var freq_set_list_sorted_rev = freq_set_list_sorted.reverse\n        var freq_set_list_sorted_rev_map = new HashMap[Long, Long]()\n        for (i <- 0 until freq_set_list_sorted_rev.length) {\n            freq_set_list_sorted_rev_map(freq_set_list_sorted_rev(i)) = i\n        }\n        var freq_list_sorted = freq_list.sorted\n        var freq_list_sorted_rev = freq_list_sorted.reverse\n        var freq_list_sorted_rev_map = new HashMap[Long, Long]()\n        for (i <- 0 until freq_list_sorted_rev.length) {\n            freq_list_sorted_rev_map(freq_list_sorted_rev(i)) = i\n        }\n        var freq_list_sorted_rev_map_freq = new HashMap[Long, Long]()\n        for (i <- 0 until freq_list_sorted_rev.length) {\n            freq_list_sorted_rev_map_freq(freq_list_sorted_rev_map(freq_list_sorted_rev(i))) = freq_list_sorted_rev(i)\n        }\n        var freq_list_sorted_rev_map_freq_\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp71z1o7r1.scala:34:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp71z1o7r1.scala:34:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp71z1o7r1.scala:36:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp71z1o7r1.scala:36:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp71z1o7r1.scala:36:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_set = test_list.toSet\n        val test_map = new HashMap[Long, Long]\n        for (i <- test_set) {\n            test_map(i) = test_list.count(_ == i)\n        }\n        test_map.values.foldLeft(1L)((x, y) => x * (y + 1)) - 1\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124182,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp92tyq3nn.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp92tyq3nn.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp92tyq3nn.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp92tyq3nn.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map += (i -> 1)\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124183,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps9dmh92w.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps9dmh92w.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps9dmh92w.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps9dmh92w.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.toList\n        var freq_list_sorted = freq_list.sortWith(_._2 > _._2)\n        var freq_list_sorted_unique = freq_list_sorted.distinct\n        var freq_list_sorted_unique_count = freq_list_sorted_unique.length\n        return freq_list_sorted_unique_count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124209,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk0beodn1.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk0beodn1.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk0beodn1.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk0beodn1.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        // Write your code here\n        val map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- map.values) {\n            count += i * (i - 1) / 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcqzq_bz9.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcqzq_bz9.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcqzq_bz9.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcqzq_bz9.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (!freq.contains(test_list(i))) {\n                freq += (test_list(i) -> 1)\n            } else {\n                freq(test_list(i)) += 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124212,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaaw7pfze.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaaw7pfze.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaaw7pfze.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaaw7pfze.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(identity).mapValues(_.size).size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        val freq_list = freq.toList\n        val freq_list_sorted = freq_list.sortBy(_._1)\n        val freq_list_sorted_filtered = freq_list_sorted.filter(_._2 == 1)\n        freq_list_sorted_filtered.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124210,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa297qptu.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa297qptu.scala:13:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa297qptu.scala:13:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa297qptu.scala:13:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.map(x => (x, 1)).groupBy(_._1).map(x => (x._1, x._2.length)).size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124212,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps_idfwlj.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps_idfwlj.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps_idfwlj.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps_idfwlj.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = 0L\n        var i = 0\n        while (i < test_list.length) {\n            var j = i + 1\n            while (j < test_list.length) {\n                var k = j + 1\n                while (k < test_list.length) {\n                    if (test_list(i) + test_list(j) + test_list(k) == 0) {\n                        freq += 1\n                    }\n                    k += 1\n                }\n                j += 1\n            }\n            i += 1\n        }\n        freq\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3t1_9ry_.scala:25:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3t1_9ry_.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3t1_9ry_.scala:25:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3t1_9ry_.scala:25:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var total = 0L\n        for (i <- freq_map.values) {\n            total += i * (i - 1) / 2\n        }\n        return total\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124209,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9_tpa3g4.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9_tpa3g4.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9_tpa3g4.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9_tpa3g4.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i)))\n                freq(test_list(i)) += 1\n            else\n                freq(test_list(i)) = 1\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpotiq701b.scala:20:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpotiq701b.scala:20:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpotiq701b.scala:20:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpotiq701b.scala:20:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(x => x).map(x => x._2.length).sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppc2y70qg.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppc2y70qg.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppc2y70qg.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppc2y70qg.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) freq(test_list(i)) += 1\n            else freq(test_list(i)) = 1\n        }\n        var count = 0\n        for (i <- 0 until test_list.length) {\n            if (freq(test_list(i)) == 1) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124212,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwxp078g1.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwxp078g1.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwxp078g1.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwxp078g1.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val unique_tuples = test_list.distinct\n        return unique_tuples.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124212,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp90u7zoq8.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp90u7zoq8.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp90u7zoq8.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp90u7zoq8.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        val freq_list = freq.toList\n        val freq_list_sorted = freq_list.sortWith(_._2 > _._2)\n        val max_freq = freq_list_sorted(0)._2\n        var count = 0\n        for (i <- freq_list_sorted) {\n            if (i._2 == max_freq) count += 1\n            else break\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfva7hj9.scala:17:17 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33melse\u001b[0m break\n\u001b[31m\u001b[31m   |\u001b[0m                 ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                 Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfva7hj9.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfva7hj9.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfva7hj9.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124212,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwsbexxh.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwsbexxh.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwsbexxh.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwsbexxh.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map) {\n            freq_list = i._2 :: freq_list\n        }\n        freq_list = freq_list.sorted\n        var result = 1L\n        for (i <- 0 until freq_list.length) {\n            result = (result * (freq_list(i) + 1)) % 1000000007\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124212,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgjyn2uen.scala:27:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgjyn2uen.scala:27:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgjyn2uen.scala:27:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgjyn2uen.scala:27:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map(key) > 1) {\n                result += freq_map(key)\n                freq_map(key) = 0\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124212,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfxf6_qqp.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfxf6_qqp.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfxf6_qqp.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfxf6_qqp.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.distinct.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124212,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqu1kgh5d.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqu1kgh5d.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqu1kgh5d.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqu1kgh5d.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- freq.values) {\n            sum += i * (i - 1) / 2\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124212,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7spqlchs.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7spqlchs.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7spqlchs.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7spqlchs.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3hnt62q.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3hnt62q.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3hnt62q.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3hnt62q.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4pju1v1.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4pju1v1.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4pju1v1.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4pju1v1.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(identity).mapValues(_.size).size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result : Long = 0\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124212,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqd6n9r_v.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqd6n9r_v.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqd6n9r_v.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqd6n9r_v.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.values.toList.reduceLeft(_ * _)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124212,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppj9996dd.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppj9996dd.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppj9996dd.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppj9996dd.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.values.foldLeft(1L)((a, b) => a * b)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124212,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl7cxzlaj.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl7cxzlaj.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl7cxzlaj.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl7cxzlaj.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = 0L\n        var freq_list = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (!freq_list.contains(test_list(i))) {\n                freq_list = freq_list :+ test_list(i)\n                freq += 1\n            }\n        }\n        freq\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124211,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmparr9r5bh.scala:17:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmparr9r5bh.scala:17:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmparr9r5bh.scala:17:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmparr9r5bh.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq.keys) {\n            count += freq(i) * (freq(i) - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124212,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp75dq52yh.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp75dq52yh.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp75dq52yh.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp75dq52yh.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sorted\n        var count = 0L\n        for (i <- 0 to freq_list.length - 1) {\n            if (freq_list(i) == 1) {\n                count += 1\n            } else {\n                count += (freq_list(i) * (freq_list(i) - 1)) / 2\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124212,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprlm473fv.scala:30:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprlm473fv.scala:30:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprlm473fv.scala:30:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprlm473fv.scala:30:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = new ListBuffer[Long]()\n        for (i <- freq_map.keys) {\n            freq_list += freq_map(i)\n        }\n        return freq_list.toList.distinct.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124212,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgbn5x843.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgbn5x843.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgbn5x843.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgbn5x843.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i == 1) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfq23v37t.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfq23v37t.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfq23v37t.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfq23v37t.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.distinct.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        var result = 0\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124052,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfc45om7d.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfc45om7d.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfc45om7d.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfc45om7d.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (x <- test_list) {\n            if (freq_map.contains(x)) {\n                freq_map(x) += 1\n            } else {\n                freq_map(x) = 1\n            }\n        }\n        var result = 0L\n        for (x <- freq_map.values) {\n            result += x * (x - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps6lw4t3c.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps6lw4t3c.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps6lw4t3c.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps6lw4t3c.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                result += freq_map(key)\n                freq_map(key) = 0\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6u9v0fz.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6u9v0fz.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6u9v0fz.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6u9v0fz.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            val freq = freq_map(key)\n            result += freq * (freq - 1) / 2\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa0s3uxh9.scala:24:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa0s3uxh9.scala:24:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa0s3uxh9.scala:24:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa0s3uxh9.scala:24:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var total = 0L\n        for (i <- freq_map.values) {\n            total += i * (i - 1) / 2\n        }\n        return total\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124241,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg4cm9z_e.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg4cm9z_e.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg4cm9z_e.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg4cm9z_e.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var ans = 0L\n        for (i <- freq.values) {\n            ans += i * (i - 1) / 2\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124241,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8fy3gcl6.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8fy3gcl6.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8fy3gcl6.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8fy3gcl6.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (test_map.contains(test_list(i))) {\n                test_map(test_list(i)) += 1\n            } else {\n                test_map(test_list(i)) = 1\n            }\n        }\n        var count = 0\n        for (i <- test_map.values) {\n            count += i * (i - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124241,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbhn39769.scala:16:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            count += i * (i - \u001b[31m1\u001b[0m) / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbhn39769.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbhn39769.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbhn39769.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var freq_list = List[Int]()\n        for (i <- freq_map.values) {\n            freq_list = i :: freq_list\n        }\n        freq_list = freq_list.sorted\n        var result = 1L\n        for (i <- freq_list) {\n            result *= i\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124241,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp66a5_yf7.scala:27:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp66a5_yf7.scala:27:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp66a5_yf7.scala:27:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp66a5_yf7.scala:27:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_list = test_list.groupBy(identity).mapValues(_.size)\n        val freq_list_sorted = freq_list.toList.sortBy(_._1)\n        val freq_list_sorted_filtered = freq_list_sorted.filter(x => x._2 == 1)\n        val freq_list_sorted_filtered_map = freq_list_sorted_filtered.map(x => x._1)\n        freq_list_sorted_filtered_map.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprh5olauu.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprh5olauu.scala:13:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprh5olauu.scala:13:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprh5olauu.scala:13:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_freq = test_list.groupBy(identity).mapValues(_.size)\n        test_freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7jze9y3x.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7jze9y3x.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7jze9y3x.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7jze9y3x.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124242,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpumnqoe9z.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpumnqoe9z.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpumnqoe9z.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpumnqoe9z.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        return freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpft8xo0qg.scala:17:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpft8xo0qg.scala:17:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpft8xo0qg.scala:17:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpft8xo0qg.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_list :+ freq_map(i)\n        }\n        freq_list = freq_list.sorted\n        var result = 1L\n        for (i <- 0 until freq_list.length) {\n            result *= (i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124242,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4xxtsa0s.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4xxtsa0s.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4xxtsa0s.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4xxtsa0s.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf24_k_hm.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf24_k_hm.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf24_k_hm.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf24_k_hm.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkla7ta.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkla7ta.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkla7ta.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkla7ta.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) = freq_map(i) + 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i == 1) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124241,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpclsb7p29.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpclsb7p29.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpclsb7p29.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpclsb7p29.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            count += i * (i - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124242,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwgly_mkd.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwgly_mkd.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwgly_mkd.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwgly_mkd.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (!freq_map.contains(test_list(i))) {\n                freq_map += (test_list(i) -> 1)\n            } else {\n                freq_map(test_list(i)) += 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124241,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcxjivk6q.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcxjivk6q.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcxjivk6q.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcxjivk6q.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        return freq.values.foldLeft(0L)((a, b) => a + b * (b - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124242,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkxd5sn3j.scala:17:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkxd5sn3j.scala:17:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkxd5sn3j.scala:17:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkxd5sn3j.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124241,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv78rcrda.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv78rcrda.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv78rcrda.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv78rcrda.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpigp_vela.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpigp_vela.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpigp_vela.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpigp_vela.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq_map.values) {\n            count += i * (i - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124242,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjnex3toe.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjnex3toe.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjnex3toe.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjnex3toe.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sorted\n        var result = 0L\n        for (i <- 0 until freq_list.length) {\n            result += freq_list(i) * (freq_list(i) - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnpwl1sor.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnpwl1sor.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnpwl1sor.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnpwl1sor.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkla7ta.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkla7ta.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkla7ta.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkla7ta.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- freq_map.values) {\n            sum += i * (i - 1) / 2\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124242,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnh7atj_w.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnh7atj_w.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnh7atj_w.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnh7atj_w.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size).values.toList\n        freq.foldLeft(1L)((a, b) => a * b)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124242,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau3nkmdy.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau3nkmdy.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau3nkmdy.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau3nkmdy.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        val freq_list = freq_map.values.toList\n        val freq_set = freq_list.toSet\n        freq_set.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124241,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf4uhvg55.scala:16:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf4uhvg55.scala:16:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf4uhvg55.scala:16:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf4uhvg55.scala:16:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) freq(test_list(i)) += 1\n            else freq(test_list(i)) = 1\n        }\n        var count = 0L\n        for (i <- freq.values) {\n            count += i * (i - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124242,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0qv3jpkg.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0qv3jpkg.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0qv3jpkg.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0qv3jpkg.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq.values) {\n            count += i * (i - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124242,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiah1f3bk.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiah1f3bk.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiah1f3bk.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiah1f3bk.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_list_sorted = freq_list.sorted\n        var freq_list_sorted_rev = freq_list_sorted.reverse\n        var freq_list_sorted_rev_unique = freq_list_sorted_rev.distinct\n        var freq_list_sorted_rev_unique_sum = freq_list_sorted_rev_unique.sum\n        return freq_list_sorted_rev_unique_sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124268,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwt23amnn.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwt23amnn.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwt23amnn.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwt23amnn.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) freq(test_list(i)) += 1\n            else freq(test_list(i)) = 1\n        }\n        var result = 0L\n        for (i <- freq.values) result += i * (i - 1) / 2\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb85twwl_.scala:16:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb85twwl_.scala:16:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb85twwl_.scala:16:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb85twwl_.scala:16:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124050,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa3a_a8z4.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa3a_a8z4.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa3a_a8z4.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa3a_a8z4.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq_map.values) {\n            count += i * (i - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9dv_s_dy.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9dv_s_dy.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9dv_s_dy.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9dv_s_dy.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        test_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvu7k98e_.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvu7k98e_.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvu7k98e_.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvu7k98e_.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = 0L\n        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (!freq_map.contains(tuple)) {\n                freq_map += (tuple -> 1)\n                freq += 1\n            }\n        }\n        freq\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7587zr3d.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7587zr3d.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7587zr3d.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7587zr3d.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var total = 0L\n        for (i <- freq.values) {\n            total += i * (i - 1) / 2\n        }\n        return total\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplcaak3h2.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplcaak3h2.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplcaak3h2.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplcaak3h2.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(identity).mapValues(_.size).values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510537,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ip52uww.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ip52uww.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ip52uww.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ip52uww.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                val value = freq_map(key)\n                freq_map(key) = value + 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwyphf0cj.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwyphf0cj.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwyphf0cj.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwyphf0cj.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list.sorted.reverse.head\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdpifk912.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdpifk912.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdpifk912.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdpifk912.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_list :+ freq_map(i)\n        }\n        freq_list.sorted.reverse(0)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyukgr7to.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyukgr7to.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyukgr7to.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyukgr7to.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) freq(test_list(i)) += 1\n            else freq(test_list(i)) = 1\n        }\n        var count = 0L\n        for (i <- freq.values) {\n            count += i * (i - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0k5wxnl.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0k5wxnl.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0k5wxnl.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu0k5wxnl.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_list : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var temp_list : List[Long] = List()\n            for (j <- i until test_list.length) {\n                temp_list = temp_list :+ test_list(j)\n            }\n            freq_list = freq_list :+ temp_list.sum\n        }\n        return freq_list.distinct.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl7asel1o.scala:17:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl7asel1o.scala:17:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl7asel1o.scala:17:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl7asel1o.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i == 1) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124238,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfq23v37t.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfq23v37t.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfq23v37t.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfq23v37t.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.keys) {\n            result += freq_map(i) * (freq_map(i) - 1) / 2\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9i8c0v76.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9i8c0v76.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9i8c0v76.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9i8c0v76.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sortWith(_ > _)\n        var result = 0L\n        for (i <- 0 until freq_list.length) {\n            result += freq_list(i) * (freq_list(i) - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpppw2ca7m.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpppw2ca7m.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpppw2ca7m.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpppw2ca7m.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.distinct.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val map = Map[Long, Int]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        var sum = 0\n        for (i <- map.values) {\n            sum += i * (i - 1) / 2\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp67cm3agd.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp67cm3agd.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp67cm3agd.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp67cm3agd.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.values.foldLeft(0L)((a, b) => a + b * (b - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6ck_r9h.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6ck_r9h.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6ck_r9h.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc6ck_r9h.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            count += i * (i - 1) / 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpshr4m87t.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpshr4m87t.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpshr4m87t.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpshr4m87t.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- freq_map.keys) {\n            sum += (freq_map(i) * (freq_map(i) - 1)) / 2\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpodd9x88y.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpodd9x88y.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpodd9x88y.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpodd9x88y.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = Map[Long, Int]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        return freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj0v01fat.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj0v01fat.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj0v01fat.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj0v01fat.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var count = 0\n        var freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        for (i <- freq.values) {\n            if (i == 1) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0a7315_j.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0a7315_j.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0a7315_j.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0a7315_j.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            if (i > 1) {\n                result += i * (i - 1) / 2\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124271,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0iuti6ni.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0iuti6ni.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0iuti6ni.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0iuti6ni.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                if (freq_map(test_list(i)) > 0 && freq_map(test_list(j)) > 0) {\n                    result += 1\n                    freq_map(test_list(i)) -= 1\n                    freq_map(test_list(j)) -= 1\n                }\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124272,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdja71gbb.scala:27:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdja71gbb.scala:27:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdja71gbb.scala:27:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdja71gbb.scala:27:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphcu9pjum.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphcu9pjum.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphcu9pjum.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphcu9pjum.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map += (i -> 1)\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i > 1) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124273,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3t2feqsq.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3t2feqsq.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3t2feqsq.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3t2feqsq.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(identity).mapValues(_.size).size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3hnt62q.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3hnt62q.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3hnt62q.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3hnt62q.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for ((key, value) <- freq_map) {\n            result += value * (value - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_b2plwr.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_b2plwr.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_b2plwr.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_b2plwr.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_list :+ freq_map(i)\n        }\n        var freq_set = Set[Long]()\n        for (i <- freq_list) {\n            freq_set = freq_set + i\n        }\n        freq_set.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124273,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsqni486q.scala:25:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsqni486q.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsqni486q.scala:25:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsqni486q.scala:25:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_list_sorted = freq_list.sortWith(_ > _)\n        var freq_list_sorted_unique = freq_list_sorted.distinct\n        var freq_list_sorted_unique_sum = freq_list_sorted_unique.sum\n        return freq_list_sorted_unique_sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124297,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv6ziel41.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv6ziel41.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv6ziel41.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv6ziel41.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i > 1) count += i * (i - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq80hx52w.scala:13:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mif\u001b[0m (i > \u001b[31m1\u001b[0m) count += i * (i - \u001b[31m1\u001b[0m) / \u001b[31m2\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq80hx52w.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq80hx52w.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq80hx52w.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Requ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var count = 0L\n        for ((key, value) <- freq_map) {\n            count += value * (value - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg818xe6y.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg818xe6y.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg818xe6y.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg818xe6y.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var result = 1L\n        for (i <- 0 until freq_list.length) {\n            result *= (freq_list(i) + 1)\n        }\n        result - 1\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptko03_km.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptko03_km.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptko03_km.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptko03_km.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124300,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqpi4wz31.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqpi4wz31.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqpi4wz31.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqpi4wz31.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_set = test_list.toSet\n        val test_map = new HashMap[Long, Long]\n        for (i <- test_set) {\n            test_map(i) = test_list.filter(_ == i).length\n        }\n        var result = 0L\n        for (i <- test_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4t5cm5dv.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4t5cm5dv.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4t5cm5dv.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4t5cm5dv.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124299,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpek5fogwe.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpek5fogwe.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpek5fogwe.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpek5fogwe.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = new ListBuffer[Int]()\n        for (i <- freq_map.keys) {\n            freq_list += freq_map(i)\n        }\n        var freq_list_sorted = freq_list.sorted\n        var freq_list_sorted_unique = freq_list_sorted.distinct\n        var freq_list_sorted_unique_length = freq_list_sorted_unique.length\n        var freq_list_sorted_unique_length_sum = freq_list_sorted_unique.sum\n        var freq_list_sorted_unique_length_sum_product = freq_list_sorted_unique_length * freq_list_sorted_unique_length_sum\n        return freq_list_sorted_unique_length_sum_product\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124300,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmu6bs313.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmu6bs313.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmu6bs313.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmu6bs313.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124300,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpas0frvy7.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpas0frvy7.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpas0frvy7.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpas0frvy7.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        return freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124298,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps2mwhjt5.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps2mwhjt5.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps2mwhjt5.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps2mwhjt5.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.distinct.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sortWith(_ > _)\n        var result = 0L\n        for (i <- 0 until freq_list.length) {\n            result += freq_list(i) * (i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124300,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpje6hu18p.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpje6hu18p.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpje6hu18p.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpje6hu18p.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) freq_map(key) += 1\n            else freq_map(key) = 1\n        }\n        var result = 0\n        for ((key, value) <- freq_map) {\n            result += value * (value - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124300,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqhmfl55w.scala:19:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqhmfl55w.scala:19:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqhmfl55w.scala:19:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqhmfl55w.scala:19:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.values.foldLeft(0L)((a, b) => a + b * (b - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124300,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2jtcskr0.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2jtcskr0.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2jtcskr0.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2jtcskr0.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) freq_map(key) += 1\n            else freq_map(key) = 1\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                result += freq_map(key)\n                freq_map(key) = 0\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124300,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zu1bpzs.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zu1bpzs.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zu1bpzs.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zu1bpzs.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (freq_map.contains(tuple)) freq_map(tuple) += 1\n            else freq_map(tuple) = 1\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124300,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphqz7gqnb.scala:15:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphqz7gqnb.scala:15:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphqz7gqnb.scala:15:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphqz7gqnb.scala:15:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124300,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnp9avla8.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnp9avla8.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnp9avla8.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnp9avla8.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                val value = freq_map(key)\n                freq_map(key) = value + 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += (i * (i - 1)) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124301,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpafozserk.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpafozserk.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpafozserk.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpafozserk.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for ((k, v) <- freq_map) {\n            result += v * (v - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124301,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9jc7yv0x.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9jc7yv0x.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9jc7yv0x.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9jc7yv0x.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        test_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzxn7axw.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzxn7axw.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzxn7axw.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzxn7axw.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8l_cpx71.scala:17:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8l_cpx71.scala:17:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8l_cpx71.scala:17:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8l_cpx71.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_list :+ freq_map(i)\n        }\n        freq_list.sorted.reverse(0)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124269,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyukgr7to.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyukgr7to.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyukgr7to.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyukgr7to.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sortWith(_ > _)\n        var result = 0L\n        for (i <- 0 until freq_list.length) {\n            result += freq_list(i) * (freq_list(i) - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124270,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpppw2ca7m.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpppw2ca7m.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpppw2ca7m.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpppw2ca7m.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124301,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpru00mgfp.scala:17:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpru00mgfp.scala:17:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpru00mgfp.scala:17:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpru00mgfp.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[List[Long], Long]\n        for (i <- 0 until test_list.length - 1) {\n            val tuple = List(test_list(i), test_list(i + 1))\n            if (freq.contains(tuple)) freq(tuple) += 1\n            else freq(tuple) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124301,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptaobgor0.scala:15:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptaobgor0.scala:15:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptaobgor0.scala:15:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptaobgor0.scala:15:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) freq_map(key) += 1\n            else freq_map(key) = 1\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124302,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdvt1hpp.scala:19:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdvt1hpp.scala:19:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdvt1hpp.scala:19:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcdvt1hpp.scala:19:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq : Long = 0\n        var freq_map : Map[Long, Long] = Map()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                val tuple : Long = test_list(i) * test_list(j)\n                if (!freq_map.contains(tuple)) {\n                    freq_map(tuple) = 1\n                    freq += 1\n                }\n            }\n        }\n        freq\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124302,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf815i0kv.scala:20:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf815i0kv.scala:20:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf815i0kv.scala:20:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf815i0kv.scala:20:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124241,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv78rcrda.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv78rcrda.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv78rcrda.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv78rcrda.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) freq_map(key) += 1\n            else freq_map(key) = 1\n        }\n        freq_map.values.foldLeft(0L)((a, b) => a + b)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124302,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp740uxxgv.scala:15:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp740uxxgv.scala:15:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp740uxxgv.scala:15:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp740uxxgv.scala:15:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            freq_list += freq_map(test_list(i))\n        }\n        var freq_list_sorted = freq_list.sorted\n        var freq_list_sorted_set = freq_list_sorted.toSet\n        var freq_list_sorted_set_list = freq_list_sorted_set.toList\n        var freq_list_sorted_set_list_sorted = freq_list_sorted_set_list.sorted\n        var freq_list_sorted_set_list_sorted_rev = freq_list_sorted_set_list_sorted.reverse\n        var freq_list_sorted_set_list_sorted_rev_map = new HashMap[Long, Long]\n        for (i <- 0 until freq_list_sorted_set_list_sorted_rev.length) {\n            freq_list_sorted_set_list_sorted_rev_map(freq_list_sorted_set_list_sorted_rev(i)) = i\n        }\n        var freq_list_sorted_set_list_sorted_rev_map_list = new ListBuffer[Long]\n        for (i <- 0 until freq_list.length) {\n            freq_list_sorted_set_list_sorted_rev_map_list += freq_list_sorted_set_list_sorted_rev_map(freq_list(i))\n        }\n        var freq_list_sorted_set_list_sorted_rev_map_list_sorted = freq_list_sorted\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124303,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp61spu57k.scala:32:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp61spu57k.scala:34:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp61spu57k.scala:34:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp61spu57k.scala:34:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (freq.contains(tuple)) {\n                freq(tuple) += 1\n            } else {\n                freq(tuple) = 1\n            }\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprge_bcbg.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprge_bcbg.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprge_bcbg.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprge_bcbg.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_list :+ freq_map(i)\n        }\n        var freq_map2 = Map[Long, Long]()\n        for (i <- 0 until freq_list.length) {\n            if (freq_map2.contains(freq_list(i))) {\n                freq_map2(freq_list(i)) += 1\n            } else {\n                freq_map2(freq_list(i)) = 1\n            }\n        }\n        var freq_list2 = List[Long]()\n        for (i <- freq_map2.keys) {\n            freq_list2 = freq_list2 :+ freq_map2(i)\n        }\n        var freq_map3 = Map[Long, Long]()\n        for (i <- 0 until freq_list2.length) {\n            if (freq_map3.contains(freq_list2(i))) {\n                freq_map3(freq_list2(i)) += 1\n            } else {\n                freq_map3(freq_list2(i)) = 1\n            }\n        }\n        var freq_list3 = List[Long]()\n        for (i <- freq_map3.keys) {\n            freq_list3 = freq_list3 :+ freq_map3(i)\n        }\n        var freq_map4 = Map[Long, Long]()\n        for (i <- 0 until freq_list3.length) {\n            if (freq_map4.contains(freq_list3(i))) {\n                freq_map4\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124305,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_n5u0rwu.scala:54:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_n5u0rwu.scala:48:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_n5u0rwu.scala:48:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_n5u0rwu.scala:48:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_n5u0rwu.s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sorted\n        var result = 0L\n        for (i <- 0 until freq_list.length) {\n            result += freq_list(i) * (freq_list(i) - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124240,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnpwl1sor.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnpwl1sor.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnpwl1sor.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnpwl1sor.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}