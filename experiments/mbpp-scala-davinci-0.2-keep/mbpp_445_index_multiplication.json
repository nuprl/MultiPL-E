{
  "name": "mbpp_445_index_multiplication",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    def indexMultiplication(test_tup1 : Long, test_tup2 : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(indexMultiplication(((1l, 3l), (4l, 5l), (2l, 9l), (1l, 10l)), ((6l, 7l), (3l, 9l), (1l, 1l), (7l, 3l))) == ((6l, 21l), (12l, 45l), (2l, 9l), (7l, 30l)));\n    assert(indexMultiplication(((2l, 4l), (5l, 6l), (3l, 10l), (2l, 11l)), ((7l, 8l), (4l, 10l), (2l, 2l), (8l, 4l))) == ((14l, 32l), (20l, 60l), (6l, 20l), (16l, 44l)));\n    assert(indexMultiplication(((3l, 5l), (6l, 7l), (4l, 11l), (3l, 12l)), ((8l, 9l), (5l, 11l), (3l, 3l), (9l, 5l))) == ((24l, 45l), (30l, 77l), (12l, 33l), (27l, 60l)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var sum = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 > 0) {\n            sum += (tup1 % 10) * (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        while (tup1 > 0) {\n            result += (tup1 % 10) * (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var tup1 = test_tup1.toString.split(\"\").map(_.toLong)\n        var tup2 = test_tup2.toString.split(\"\").map(_.toLong)\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            result += tup1(i) * tup2(i)\n        }\n        return result",
    "        var result : Long = 0\n        var tup1 = test_tup1.toString.toList\n        var tup2 = test_tup2.toString.toList\n        var tup1_len = tup1.length\n        var tup2_len = tup2.length\n        var max_len = max(tup1_len, tup2_len)\n        if (tup1_len < max_len) {\n            for (i <- 1 to max_len - tup1_len) {\n                tup1 = 0 :: tup1\n            }\n        }\n        if (tup2_len < max_len) {\n            for (i <- 1 to max_len - tup2_len) {\n                tup2 = 0 :: tup2\n            }\n        }\n        for (i <- 0 to max_len - 1) {\n            result = result + (tup1(i).asDigit * tup2(i).asDigit) * pow(10, max_len - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 1\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 > 0) {\n            result *= (tup1 % 10) * (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var result : Long = 0\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 > 0 && tup2 > 0) {\n            result += (tup1 % 10) * (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var result = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 > 0 && tup2 > 0) {\n            result += (tup1 % 10) * (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var tup1 = test_tup1.toString.toList.map(_.asDigit)\n        var tup2 = test_tup2.toString.toList.map(_.asDigit)\n        var result = 0\n        for (i <- 0 to tup1.length - 1) {\n            result += tup1(i) * tup2(i)\n        }\n        return result",
    "        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var index : Int = 0\n        while (tup1 > 0) {\n            var digit1 : Long = tup1 % 10\n            var digit2 : Long = tup2 % 10\n            result += digit1 * digit2 * pow(10, index).toLong\n            tup1 /= 10\n            tup2 /= 10\n            index += 1\n        }\n        return result",
    "        var tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        var tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        var result = 0\n        for (i <- 0 until tup1.length) {\n            result += tup1(i) * tup2(i)\n        }\n        return result",
    "        var tup1 = test_tup1.toString.split(\"\").map(_.toLong)\n        var tup2 = test_tup2.toString.split(\"\").map(_.toLong)\n        var tup3 = new Array[Long](tup1.length)\n        for (i <- 0 until tup1.length) {\n            tup3(i) = tup1(i) * tup2(i)\n        }\n        return tup3.mkString.toLong",
    "        var tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        var tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        var result = 0\n        for (i <- 0 to tup1.length - 1) {\n            result += tup1(i) * tup2(i)\n        }\n        return result",
    "        var result = 1L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 > 0) {\n            result *= (tup1 % 10) * (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        while (tup1 != 0 && tup2 != 0) {\n            result += (tup1 % 10) * (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var test_tup1_list = test_tup1.toString.toList\n        var test_tup2_list = test_tup2.toString.toList\n        var result = 0\n        for (i <- 0 to test_tup1_list.length - 1) {\n            result += (test_tup1_list(i).toString.toInt * test_tup2_list(i).toString.toInt)\n        }\n        return result",
    "        var result = 1L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 > 0) {\n            result *= (tup1 % 10) * (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        while (tup1 != 0) {\n            result += (tup1 % 10) * (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result",
    "        var result : Long = 0\n        var tup1 : List[Int] = test_tup1.toString.toList.map(_.asDigit)\n        var tup2 : List[Int] = test_tup2.toString.toList.map(_.asDigit)\n        var tup1_len : Int = tup1.length\n        var tup2_len : Int = tup2.length\n        var max_len : Int = max(tup1_len, tup2_len)\n        var min_len : Int = min(tup1_len, tup2_len)\n        var i : Int = 0\n        var j : Int = 0\n        var k : Int = 0\n        var temp : Int = 0\n        var carry : Int = 0\n        var temp_result : List[Int] = List()\n        for (i <- 0 to min_len - 1) {\n            temp = tup1(i) * tup2(i) + carry\n            carry = temp / 10\n            temp_result = temp % 10 :: temp_result\n        }\n        if (tup1_len > tup2_len) {\n            for (i <- min_len to max_len - 1) {\n                temp = tup1(i) + carry\n                carry = temp / 10\n                temp_result = temp % 10 :: temp_result\n            }\n        }\n        else if (tup2_len > tup1_len) {\n            for (i <- min_len to max_len - 1) {\n                temp = tup2(i) + carry\n                carry = temp / 10\n                temp_result = temp % 10 :: temp_result\n            }\n        }\n        if (carry != 0) {\n            temp_result = carry :: temp_result\n        }\n        result = temp_result.mkString.toLong\n        return result",
    "        var tup1 = test_tup1.toString.map(_.asDigit).toList\n        var tup2 = test_tup2.toString.map(_.asDigit).toList\n        var result = 0\n        for (i <- 0 until tup1.length) {\n            result += tup1(i) * tup2(i)\n        }\n        return result",
    "        var sum = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 > 0) {\n            sum += (tup1 % 10) * (tup2 % 10)\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return sum"
  ]
}