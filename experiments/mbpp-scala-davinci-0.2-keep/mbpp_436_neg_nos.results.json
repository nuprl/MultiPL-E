{
  "name": "mbpp_436_neg_nos",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) list2 = list2 :+ i\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        return list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        return list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        return list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        return list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        return list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) list2 = list2 :+ i\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var negList = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                negList = i :: negList\n            }\n        }\n        negList\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5p4ax6s5.scala:15)\n\tat Problem.main(tmp5p4ax6s5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) list2 = i :: list2\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzia0wpt2.scala:13)\n\tat Problem.main(tmpzia0wpt2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        return list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- 0 until list1.length) {\n            if (list1(i) < 0) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        return list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- 0 until list1.length) {\n            if (list1(i) < 0) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) list2 = list2 :+ i\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var negList = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                negList = i :: negList\n            }\n        }\n        return negList\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpsi17rmup.scala:15)\n\tat Problem.main(tmpsi17rmup.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) list2 = list2 :+ i\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (list1(i) < 0) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        return list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = Nil\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = i :: list2\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpifxqhruv.scala:15)\n\tat Problem.main(tmpifxqhruv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) list2 = i :: list2\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzia0wpt2.scala:13)\n\tat Problem.main(tmpzia0wpt2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        return list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        return list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- 0 until list1.length) {\n            if (list1(i) < 0) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) list2 = list2 :+ i\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        return list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = new ListBuffer[Long]()\n        for (i <- list1) {\n            if (i < 0) list2 += i\n        }\n        return list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for(i <- list1) {\n            if(i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        return list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (list1(i) < 0) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) list2 = list2 :+ i\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 : List[Long] = List()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        return list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) list2 = list2 :+ i\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122770,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        var list2 = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                list2 = list2 :+ i\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(x => x < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to return the negative numbers in a list.\n    def negNos(list1 : List[Long]) : List[Long] = {\n        list1.filter(_ < 0)\n    }\n    def main(args: Array[String]) = {\n    assert(negNos((List[Long](-1l.toLong, 4l.toLong, 5l.toLong, -6l.toLong))).equals((List[Long](-1l.toLong, -6l.toLong))));\n    assert(negNos((List[Long](-1l.toLong, -2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](-1l.toLong, -2l.toLong))));\n    assert(negNos((List[Long](-7l.toLong, -6l.toLong, 8l.toLong, 9l.toLong))).equals((List[Long](-7l.toLong, -6l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}