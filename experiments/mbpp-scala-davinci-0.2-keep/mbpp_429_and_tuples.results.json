{
  "name": "mbpp_429_and_tuples",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            and_tup += (bit1 * bit2) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517274,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4izwj3sx.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4izwj3sx.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4izwj3sx.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4izwj3sx.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                and_tup += pow(2, i).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517274,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcgwsd04b.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcgwsd04b.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcgwsd04b.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcgwsd04b.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517275,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjrmqp1f8.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjrmqp1f8.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjrmqp1f8.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjrmqp1f8.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var tup_and = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                tup_and += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return tup_and\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517275,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7lcddafu.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7lcddafu.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7lcddafu.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7lcddafu.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                res |= 1\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            if (i < 31) res <<= 1\n            i += 1\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517275,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgo44igwn.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgo44igwn.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgo44igwn.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgo44igwn.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var test_tup1_str = test_tup1.toString\n        var test_tup2_str = test_tup2.toString\n        var test_tup1_arr = test_tup1_str.toCharArray\n        var test_tup2_arr = test_tup2_str.toCharArray\n        var result_arr = new Array[Char](test_tup1_arr.length)\n        for (i <- 0 until test_tup1_arr.length) {\n            if (test_tup1_arr(i) == test_tup2_arr(i)) result_arr(i) = '1'\n            else result_arr(i) = '0'\n        }\n        var result = result_arr.mkString\n        result.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517274,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8a59zikf.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8a59zikf.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8a59zikf.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8a59zikf.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517275,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj_biyqff.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj_biyqff.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj_biyqff.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj_biyqff.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        var tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        var result = 0\n        for (i <- 0 until tup1.length) {\n            result = result * 10 + (tup1(i) & tup2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517275,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxzm3ggyt.scala:15:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxzm3ggyt.scala:15:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxzm3ggyt.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxzm3ggyt.scala:16:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 != 0) {\n            if(((tup1 & 1) == 1) && ((tup2 & 1) == 1)) {\n                result += pow(2, i).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517274,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_4uogxa5.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_4uogxa5.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_4uogxa5.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_4uogxa5.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                and_tup += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517274,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp64chh5_9.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp64chh5_9.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp64chh5_9.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp64chh5_9.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 64) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                and_tup += 1\n            }\n            and_tup <<= 1\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        and_tup >>= 1\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517274,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptptfe601.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptptfe601.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptptfe601.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptptfe601.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517274,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjbndmrc9.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjbndmrc9.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjbndmrc9.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjbndmrc9.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517274,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpen34je7a.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpen34je7a.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpen34je7a.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpen34je7a.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                and_tup += pow(2, i).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517275,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsg8qh9mj.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsg8qh9mj.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsg8qh9mj.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsg8qh9mj.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var test_tup1_list = test_tup1.toString.toList\n        var test_tup2_list = test_tup2.toString.toList\n        var result = 0L\n        for (i <- 0 until test_tup1_list.length) {\n            if (test_tup1_list(i) == test_tup2_list(i)) {\n                result = result * 10 + test_tup1_list(i).toString.toLong\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517275,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bf6hp44.scala:17:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bf6hp44.scala:17:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bf6hp44.scala:18:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7bf6hp44.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 64) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau3drh20.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau3drh20.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau3drh20.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpau3drh20.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq29uhs5.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq29uhs5.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq29uhs5.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq29uhs5.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i : Int = 0\n        while (tup1 != 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result |= (1 << i)\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr3l53qy6.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr3l53qy6.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr3l53qy6.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr3l53qy6.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 != 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                and_tup = and_tup | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphfs0nq3l.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphfs0nq3l.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphfs0nq3l.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphfs0nq3l.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var count = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result += pow(2, count).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            count += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdeo36yq8.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdeo36yq8.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdeo36yq8.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdeo36yq8.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2eq7jh21.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2eq7jh21.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2eq7jh21.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2eq7jh21.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdsa5cyvb.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdsa5cyvb.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdsa5cyvb.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdsa5cyvb.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var t1 = tup1 % 10\n            var t2 = tup2 % 10\n            if (t1 == 1 && t2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo8mo1npw.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo8mo1npw.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo8mo1npw.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo8mo1npw.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toLong)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toLong)\n        var result = 0L\n        for (i <- 0 until tup1.length) {\n            result = result * 10 + (tup1(i) & tup2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp56r0ifxx.scala:15:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp56r0ifxx.scala:15:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp56r0ifxx.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp56r0ifxx.scala:16:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (tup1 > 0) {\n            if ((tup1 % 2 == 1) && (tup2 % 2 == 1)) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9cgntya.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9cgntya.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9cgntya.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9cgntya.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0\n        var i = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                and_tup += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp8stltmb.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                and_tup += pow(\u001b[31m10\u001b[0m, i).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp8stltmb.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp8stltmb.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp8stltmb.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        var result = 0\n        for (i <- 0 until tup1.length) {\n            result += tup1(i) * pow(10, i).toInt\n            result += tup2(i) * pow(10, i).toInt\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpph6jpg77.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpph6jpg77.scala:16:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpph6jpg77.scala:17:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpph6jpg77.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                and_tup += pow(10, i).toInt\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1bdys7c6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1bdys7c6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1bdys7c6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1bdys7c6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup = and_tup + ((tup1 % 10) * (tup2 % 10) * pow(10, i).toLong)\n            tup1 = tup1 / 10\n            tup2 = tup2 / 10\n            i = i + 1\n        }\n        and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9gmzb0l.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9gmzb0l.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9gmzb0l.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm9gmzb0l.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += ((tup1 % 10) & (tup2 % 10)) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyahv_571.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyahv_571.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyahv_571.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyahv_571.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybae0r4_.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybae0r4_.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybae0r4_.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybae0r4_.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toBinaryString.toList.map(_.asDigit)\n        val tup2 = test_tup2.toBinaryString.toList.map(_.asDigit)\n        val tup_length = max(tup1.length, tup2.length)\n        val tup1_padded = tup1.padTo(tup_length, 0)\n        val tup2_padded = tup2.padTo(tup_length, 0)\n        val result = for (i <- 0 until tup_length) yield {\n            if (tup1_padded(i) == 1 && tup2_padded(i) == 1) 1 else 0\n        }\n        result.reverse.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4trixsjk.scala:17:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4trixsjk.scala:17:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4trixsjk.scala:18:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4trixsjk.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var count : Int = 0\n        while (tup1 > 0) {\n            var bit1 : Long = tup1 % 10\n            var bit2 : Long = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, count).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            count += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmakdbdwb.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmakdbdwb.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmakdbdwb.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmakdbdwb.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while(tup1 > 0) {\n            and_tup += ((tup1 % 10) & (tup2 % 10)) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprcdvgu2i.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprcdvgu2i.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprcdvgu2i.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprcdvgu2i.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (tup1 != 0) {\n            var bit1 : Long = tup1 % 10\n            var bit2 : Long = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvoz3iygh.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvoz3iygh.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvoz3iygh.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvoz3iygh.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result |= 1\n            }\n            result <<= 1\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        result >>= 1\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwy4i8bf.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwy4i8bf.scala:25:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwy4i8bf.scala:26:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuwy4i8bf.scala:26:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) result |= 1\n            result <<= 1\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        result >>= 1\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpazls0j8_.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpazls0j8_.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpazls0j8_.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpazls0j8_.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq29uhs5.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq29uhs5.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq29uhs5.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq29uhs5.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var t1 = tup1 % 10\n            var t2 = tup2 % 10\n            if (t1 == 1 && t2 == 1) {\n                result = result + pow(10, i).toLong\n            }\n            tup1 = tup1 / 10\n            tup2 = tup2 / 10\n            i = i + 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo2v3c01s.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo2v3c01s.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo2v3c01s.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo2v3c01s.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2)\n        and_tup.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.toList.map(_.toString.toLong)\n        val tup2 = test_tup2.toString.toList.map(_.toString.toLong)\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2)\n        and_tup.foldLeft(0L)((x, y) => x * 10 + y)\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjpa1hfou.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjpa1hfou.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjpa1hfou.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjpa1hfou.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var test_tup1_list : List[Long] = List()\n        var test_tup2_list : List[Long] = List()\n        var result : Long = 0\n        var i : Long = 0\n        while(test_tup1 != 0) {\n            test_tup1_list = (test_tup1 % 10) :: test_tup1_list\n            test_tup1 /= 10\n        }\n        while(test_tup2 != 0) {\n            test_tup2_list = (test_tup2 % 10) :: test_tup2_list\n            test_tup2 /= 10\n        }\n        while(i < test_tup1_list.length) {\n            result += (test_tup1_list(i.toInt) & test_tup2_list(i.toInt)) * pow(10, i).toLong\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8m9gkwn7.scala:12:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            test_tup1 /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           value /= is not a member of Long - did you mean test_tup1.!=?\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8m9gkwn7.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            test_tup2 /= \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m           value /= is not a member of Long - did you mean test_tup2.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8m9gkwn7.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8m9gkwn7.scala:25:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8m9gkwn7.scala:26:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var count = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result += pow(2, count).toLong\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            count += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122895,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdeo36yq8.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdeo36yq8.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdeo36yq8.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdeo36yq8.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            and_tup = and_tup | (bit1 & bit2)\n            and_tup = and_tup << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        and_tup = and_tup >> 1\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptbhrpjmg.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptbhrpjmg.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptbhrpjmg.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptbhrpjmg.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 64) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122876,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1rkuwsts.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1rkuwsts.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1rkuwsts.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1rkuwsts.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res : Long = 0\n        var i = 0\n        while (tup1 > 0 || tup2 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                res += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl1keudzg.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl1keudzg.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl1keudzg.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl1keudzg.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            if (((tup1 & 1) == 1) && ((tup2 & 1) == 1)) result += (1 << i)\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp54vrcfsp.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp54vrcfsp.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp54vrcfsp.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp54vrcfsp.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybae0r4_.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybae0r4_.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybae0r4_.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybae0r4_.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        var tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        var tup3 = new ArrayBuffer[Int]()\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) == 1 && tup2(i) == 1) tup3 += 1\n            else tup3 += 0\n        }\n        return tup3.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmj2toiau.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmj2toiau.scala:16:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmj2toiau.scala:17:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmj2toiau.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) result = result | (1L << i)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi6k3w1a6.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi6k3w1a6.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi6k3w1a6.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi6k3w1a6.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 != 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpob1lpjwv.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpob1lpjwv.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpob1lpjwv.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpob1lpjwv.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            if ((tup1 % 10) == 1 && (tup2 % 10) == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgcrt01md.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgcrt01md.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgcrt01md.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgcrt01md.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) res += pow(2, i).toLong\n            tup1 >>= 1\n            tup2 >>= 1\n            i += 1\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93ckkxdz.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93ckkxdz.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93ckkxdz.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93ckkxdz.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup = and_tup + (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 = tup1 / 10\n            tup2 = tup2 / 10\n            i += 1\n        }\n        and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcoran8o8.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcoran8o8.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcoran8o8.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcoran8o8.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ez1b919.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ez1b919.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ez1b919.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ez1b919.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var i = 0\n        while (tup1 != 0) {\n            result += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplabwmxgx.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplabwmxgx.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplabwmxgx.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplabwmxgx.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        var tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        var result = 0\n        for (i <- 0 to tup1.length - 1) {\n            result += pow(10, i).toInt * (tup1(i) & tup2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptoujbybb.scala:15:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptoujbybb.scala:15:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptoujbybb.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptoujbybb.scala:16:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcbfyayrc.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr7vv32wj.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr7vv32wj.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr7vv32wj.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr7vv32wj.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (i < 32) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_0_a5xlv.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_0_a5xlv.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_0_a5xlv.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_0_a5xlv.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Long = 0\n        while (tup1 > 0 || tup2 > 0) {\n            var bit1 : Long = tup1 % 10\n            var bit2 : Long = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbi8fe_2h.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbi8fe_2h.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbi8fe_2h.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbi8fe_2h.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 63) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd0yp9ruh.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd0yp9ruh.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd0yp9ruh.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd0yp9ruh.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup : Long = 0\n        var i = 0\n        while (i < 64) {\n            and_tup = and_tup | ((tup1 & 1) & (tup2 & 1))\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            and_tup = and_tup << 1\n            i += 1\n        }\n        and_tup = and_tup >> 1\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcicd6yj1.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcicd6yj1.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcicd6yj1.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcicd6yj1.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            i += 1\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8gulia5q.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8gulia5q.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8gulia5q.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8gulia5q.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            result += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3jk_6kn.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3jk_6kn.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3jk_6kn.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3jk_6kn.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var test_tup1_bin = test_tup1.toBinaryString\n        var test_tup2_bin = test_tup2.toBinaryString\n        var test_tup1_bin_arr = test_tup1_bin.toCharArray\n        var test_tup2_bin_arr = test_tup2_bin.toCharArray\n        var and_tup = new StringBuilder\n        for (i <- 0 to test_tup1_bin_arr.length - 1) {\n            if (test_tup1_bin_arr(i) == '1' && test_tup2_bin_arr(i) == '1') {\n                and_tup.append(\"1\")\n            } else {\n                and_tup.append(\"0\")\n            }\n        }\n        and_tup.toString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9yney61d.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9yney61d.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9yney61d.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9yney61d.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var i = 0\n        while (i < 64) {\n            var tup1_bit = tup1 & 1\n            var tup2_bit = tup2 & 1\n            if (tup1_bit == 1 && tup2_bit == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpla2pgccu.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpla2pgccu.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpla2pgccu.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpla2pgccu.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 % 10 == 1) && (tup2 % 10 == 1)) {\n                and_tup += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu6ecnsp2.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu6ecnsp2.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu6ecnsp2.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu6ecnsp2.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpcscdceev.scala:11:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            and_tup += (tup1 % \u001b[31m10\u001b[0m) * (tup2 % \u001b[31m10\u001b[0m) * pow(\u001b[31m10\u001b[0m, i).toLong\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcscdceev.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcscdceev.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcscdceev.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation avail",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val and_tup = (tup1 zip tup2).map(x => x._1 & x._2)\n        and_tup.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph86dily6.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph86dily6.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph86dily6.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph86dily6.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while(tup1 > 0) {\n            and_tup += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5jkl8u7j.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5jkl8u7j.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5jkl8u7j.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5jkl8u7j.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3mua65o.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3mua65o.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3mua65o.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3mua65o.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122931,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgzrsjqh6.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgzrsjqh6.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgzrsjqh6.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgzrsjqh6.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            result += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122807,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3jk_6kn.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3jk_6kn.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3jk_6kn.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy3jk_6kn.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += ((tup1 % 10) & (tup2 % 10)) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyahv_571.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyahv_571.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyahv_571.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyahv_571.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            i += 1\n            tup1 /= 2\n            tup2 /= 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var tup1_bit = tup1 % 10\n            var tup2_bit = tup2 % 10\n            if (tup1_bit == 1 && tup2_bit == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122930,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpik_wbpmh.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpik_wbpmh.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpik_wbpmh.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpik_wbpmh.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            i += 1\n            tup1 /= 2\n            tup2 /= 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7jghltxq.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7jghltxq.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7jghltxq.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7jghltxq.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        var tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        var and_tup = new ArrayBuffer[Int]()\n        for (i <- 0 until tup1.length) {\n            if (tup1(i) == 1 && tup2(i) == 1) and_tup += 1\n            else and_tup += 0\n        }\n        and_tup.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122930,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx_ur7iu2.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx_ur7iu2.scala:16:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx_ur7iu2.scala:17:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx_ur7iu2.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) result += pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwsle8sn.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwsle8sn.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwsle8sn.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwsle8sn.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122930,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpekztv8hj.scala:14:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                result += pow(\u001b[31m10\u001b[0m, i).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekztv8hj.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekztv8hj.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpekztv8hj.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 > 0) {\n            var t1 = tup1 % 10\n            var t2 = tup2 % 10\n            if(t1 == 1 && t2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122929,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps0gl86bv.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps0gl86bv.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps0gl86bv.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps0gl86bv.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val result = tup1.zip(tup2).map(x => x._1 & x._2)\n        result.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122930,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnhc_gouw.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnhc_gouw.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnhc_gouw.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnhc_gouw.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122857,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122930,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp8cnpy_k.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp8cnpy_k.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp8cnpy_k.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp8cnpy_k.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val and_tup = (tup1 zip tup2).map(x => x._1 & x._2)\n        and_tup.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph86dily6.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph86dily6.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph86dily6.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph86dily6.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var bit1 : Long = tup1 % 10\n            var bit2 : Long = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122930,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58uskgav.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58uskgav.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58uskgav.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58uskgav.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var result : Long = 0\n        var i : Int = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122930,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwon6ssf4.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwon6ssf4.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwon6ssf4.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwon6ssf4.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517263,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybae0r4_.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybae0r4_.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybae0r4_.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybae0r4_.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq29uhs5.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq29uhs5.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq29uhs5.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjq29uhs5.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 % 2 == 1) && (tup2 % 2 == 1)) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122931,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqiaqfi6q.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqiaqfi6q.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqiaqfi6q.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqiaqfi6q.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var i = 0\n        while (i < 64) {\n            if (((tup1 & 1) == 1) && ((tup2 & 1) == 1)) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122858,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7axcdot.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7axcdot.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7axcdot.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7axcdot.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2)\n        and_tup.foldLeft(0)((x, y) => x * 10 + y)\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122930,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33zh_7ck.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33zh_7ck.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33zh_7ck.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp33zh_7ck.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122931,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6b_l_5pf.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6b_l_5pf.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6b_l_5pf.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6b_l_5pf.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        result = result >> 1\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122931,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuofxqb3y.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuofxqb3y.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuofxqb3y.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuofxqb3y.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 % 10 == 1) && (tup2 % 10 == 1)) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122930,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuahejiyd.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuahejiyd.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuahejiyd.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuahejiyd.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 : List[Long] = List()\n        var tup2 : List[Long] = List()\n        var result : List[Long] = List()\n        var temp1 : Long = test_tup1\n        var temp2 : Long = test_tup2\n        while (temp1 != 0) {\n            tup1 = (temp1 % 10) :: tup1\n            temp1 /= 10\n        }\n        while (temp2 != 0) {\n            tup2 = (temp2 % 10) :: tup2\n            temp2 /= 10\n        }\n        for (i <- 0 until min(tup1.length, tup2.length)) {\n            result = (tup1(i) & tup2(i)) :: result\n        }\n        var ans : Long = 0\n        for (i <- 0 until result.length) {\n            ans += result(i) * pow(10, i).toLong\n        }\n        ans\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122930,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9iwp92bz.scala:29:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9iwp92bz.scala:29:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9iwp92bz.scala:30:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9iwp92bz.scala:30:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(x => x.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(x => x.toInt).toList\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2).mkString(\"\").toLong\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ntxqfay.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ntxqfay.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ntxqfay.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4ntxqfay.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2)\n        and_tup.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                and_tup = and_tup | 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            and_tup = and_tup << 1\n            i += 1\n        }\n        return and_tup >> 1\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122931,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxjijtp2e.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxjijtp2e.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxjijtp2e.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxjijtp2e.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122931,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp66i2rvjf.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp66i2rvjf.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp66i2rvjf.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp66i2rvjf.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122931,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmay5903.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmay5903.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmay5903.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmay5903.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var tup3 = 0L\n        var i = 0\n        while (i < 64) {\n            var tup1_bit = tup1 & 1\n            var tup2_bit = tup2 & 1\n            tup3 = tup3 | (tup1_bit & tup2_bit)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return tup3\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122931,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4iigc1d0.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4iigc1d0.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4iigc1d0.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4iigc1d0.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val result = tup1.zip(tup2).map(x => x._1 & x._2).mkString(\"\")\n        return result.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpumq_til9.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpumq_til9.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpumq_til9.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpumq_til9.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            result = result << 1\n        }\n        return result >> 1\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122931,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqdylz64e.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqdylz64e.scala:20:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqdylz64e.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqdylz64e.scala:21:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122874,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqm9jgrzp.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqm9jgrzp.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqm9jgrzp.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqm9jgrzp.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517274,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpen34je7a.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpen34je7a.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpen34je7a.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpen34je7a.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0\n        var i = 0\n        while (tup1 > 0) {\n            and_tup += (tup1 % 2) * (tup2 % 2) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122932,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6s9d47r6.scala:11:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            and_tup += (tup1 % \u001b[31m2\u001b[0m) * (tup2 % \u001b[31m2\u001b[0m) * pow(\u001b[31m10\u001b[0m, i).toLong\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6s9d47r6.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6s9d47r6.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6s9d47r6.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation availab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            tup1 /= 2\n            tup2 /= 2\n            result += (bit1 & bit2) * pow(2, i).toLong\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122931,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzt0_czsg.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzt0_czsg.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzt0_czsg.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzt0_czsg.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        var result = 0\n        for (i <- 0 until tup1.length) {\n            result += tup1(i) * pow(10, i).toInt\n            result += tup2(i) * pow(10, i).toInt\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122897,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpph6jpg77.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpph6jpg77.scala:16:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpph6jpg77.scala:17:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpph6jpg77.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                and_tup = and_tup | 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            and_tup = and_tup << 1\n            i += 1\n        }\n        and_tup = and_tup >> 1\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122932,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgteln6ci.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgteln6ci.scala:25:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgteln6ci.scala:26:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgteln6ci.scala:26:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (tup1 > 0) {\n            var bit1 : Long = tup1 % 10\n            var bit2 : Long = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk7efwwr.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk7efwwr.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk7efwwr.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdk7efwwr.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 > 0) {\n            if(tup1 % 2 == 1 && tup2 % 2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz8hp68au.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz8hp68au.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz8hp68au.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz8hp68au.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122874,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqm9jgrzp.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqm9jgrzp.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqm9jgrzp.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqm9jgrzp.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            i += 1\n            tup1 /= 2\n            tup2 /= 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122824,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn98ijkhv.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxkmmnpqe.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxkmmnpqe.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxkmmnpqe.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxkmmnpqe.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517275,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj_biyqff.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj_biyqff.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj_biyqff.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj_biyqff.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (tup1 > 0) {\n            var tup1_bit : Long = tup1 % 2\n            var tup2_bit : Long = tup2 % 2\n            if (tup1_bit == 1 && tup2_bit == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 = tup1 / 2\n            tup2 = tup2 / 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoourhxxt.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoourhxxt.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoourhxxt.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoourhxxt.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        val and_tup = tup1.zip(tup2).map(x => x._1 & x._2)\n        and_tup.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122823,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_jhr3vp.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 != 0) {\n            result += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwop4sia9.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwop4sia9.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwop4sia9.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwop4sia9.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result = result + pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpplhet1g1.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpplhet1g1.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpplhet1g1.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpplhet1g1.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr7vv32wj.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr7vv32wj.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr7vv32wj.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr7vv32wj.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        val tup3 = new ArrayBuffer[Int]()\n        for (i <- 0 until tup1.length) {\n            tup3 += tup1(i) & tup2(i)\n        }\n        tup3.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprd77e539.scala:15:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprd77e539.scala:15:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprd77e539.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprd77e539.scala:16:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0\n        var i = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                res += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnydirvb8.scala:14:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                res += pow(\u001b[31m10\u001b[0m, i).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnydirvb8.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnydirvb8.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnydirvb8.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        while (tup1 > 0) {\n            var temp = tup1 % 10\n            tup1 /= 10\n            var temp2 = tup2 % 10\n            tup2 /= 10\n            if (temp == 1 && temp2 == 1) {\n                result = result * 10 + 1\n            }\n            else {\n                result = result * 10\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdypwdco9.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdypwdco9.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdypwdco9.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdypwdco9.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122857,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnz5eklxc.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplrh0sse6.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) result = result | (1L << i)\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpduyy3byf.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpduyy3byf.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpduyy3byf.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpduyy3byf.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i : Long = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var bit1 : Long = tup1 % 10\n            var bit2 : Long = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxlmodnx9.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxlmodnx9.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxlmodnx9.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxlmodnx9.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = ArrayBuffer[Long]()\n        var tup2 = ArrayBuffer[Long]()\n        var tup3 = ArrayBuffer[Long]()\n        var tup4 = ArrayBuffer[Long]()\n        var tup5 = ArrayBuffer[Long]()\n        var tup6 = ArrayBuffer[Long]()\n        var tup7 = ArrayBuffer[Long]()\n        var tup8 = ArrayBuffer[Long]()\n        var tup9 = ArrayBuffer[Long]()\n        var tup10 = ArrayBuffer[Long]()\n        var tup11 = ArrayBuffer[Long]()\n        var tup12 = ArrayBuffer[Long]()\n        var tup13 = ArrayBuffer[Long]()\n        var tup14 = ArrayBuffer[Long]()\n        var tup15 = ArrayBuffer[Long]()\n        var tup16 = ArrayBuffer[Long]()\n        var tup17 = ArrayBuffer[Long]()\n        var tup18 = ArrayBuffer[Long]()\n        var tup19 = ArrayBuffer[Long]()\n        var tup20 = ArrayBuffer[Long]()\n        var tup21 = ArrayBuffer[Long]()\n        var tup22 = ArrayBuffer[Long]()\n        var tup23 = ArrayBuffer[Long]()\n        var tup24 = ArrayBuffer[Long]()\n        var tup25 = ArrayBuffer[Long]()\n        var tup26 = ArrayBuffer[Long]()\n        var tup27 = ArrayBuffer[Long]()\n        var tup28 = ArrayBuffer[Long]()\n        var tup29 = ArrayBuffer[Long]()\n        var tup30 = ArrayBuffer[Long]()\n        var tup31 = ArrayBuffer[Long]()\n        var tup32 = ArrayBuffer[Long]()\n        var tup33 = ArrayBuffer[Long]()\n        var tup34 = ArrayBuffer[Long]()\n        var tup35 = ArrayBuffer[Long]()\n        var tup36 = ArrayBuffer[Long]()\n        var tup37 = ArrayBuffer[Long]()\n        var tup38 = ArrayBuffer[Long]()\n        var tup39 = ArrayBuffer[Long]()\n        var tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpoodxhebq.scala:46:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoodxhebq.scala:46:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoodxhebq.scala:48:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoodxhebq.scala:48:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoodxhebq.scala:49:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m49 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) result += pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122875,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwsle8sn.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwsle8sn.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwsle8sn.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphwsle8sn.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 != 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpob1lpjwv.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpob1lpjwv.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpob1lpjwv.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpob1lpjwv.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpel8gxmp4.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpel8gxmp4.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpel8gxmp4.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpel8gxmp4.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            if (i < 31) {\n                result = result << 1\n            }\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq2kvxbap.scala:26:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq2kvxbap.scala:26:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq2kvxbap.scala:27:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq2kvxbap.scala:27:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0\n        var i = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvglr4wjg.scala:14:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                result += pow(\u001b[31m10\u001b[0m, i).toLong\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvglr4wjg.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvglr4wjg.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvglr4wjg.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprr1jbc_u.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprr1jbc_u.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprr1jbc_u.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprr1jbc_u.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var result : Long = 0\n        var i : Int = 0\n        while (tup1 != 0) {\n            var bit1 : Long = tup1 & 1\n            var bit2 : Long = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp54m2ntxb.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp54m2ntxb.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp54m2ntxb.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp54m2ntxb.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 = test_tup1.toBinaryString\n        var tup2 = test_tup2.toBinaryString\n        var tup1_len = tup1.length\n        var tup2_len = tup2.length\n        var max_len = max(tup1_len, tup2_len)\n        var min_len = min(tup1_len, tup2_len)\n        var diff_len = max_len - min_len\n        if (tup1_len > tup2_len) {\n            for (i <- 0 until diff_len) {\n                tup2 = \"0\" + tup2\n            }\n        }\n        else {\n            for (i <- 0 until diff_len) {\n                tup1 = \"0\" + tup1\n            }\n        }\n        for (i <- 0 until max_len) {\n            if (tup1(i) == '1' && tup2(i) == '1') {\n                result = result + pow(2, max_len - i - 1).toLong\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxqf61n5q.scala:32:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxqf61n5q.scala:32:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxqf61n5q.scala:33:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxqf61n5q.scala:33:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n        }\n        return result >> 1\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4xc3gd8j.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4xc3gd8j.scala:20:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4xc3gd8j.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4xc3gd8j.scala:21:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val result = tup1.zip(tup2).map(x => x._1 & x._2)\n        result.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122930,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnhc_gouw.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnhc_gouw.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnhc_gouw.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnhc_gouw.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (tup1 > 0) {\n            var digit1 : Long = tup1 % 10\n            var digit2 : Long = tup2 % 10\n            if (digit1 == 1 && digit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3jz9khdr.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3jz9khdr.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3jz9khdr.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3jz9khdr.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                and_tup += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy_x3tlfp.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy_x3tlfp.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy_x3tlfp.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy_x3tlfp.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toLong)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toLong)\n        var and_tup = List[Long]()\n        for (i <- 0 until tup1.length) {\n            and_tup = and_tup :+ (tup1(i) & tup2(i))\n        }\n        and_tup.mkString.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprcj5f3q3.scala:15:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprcj5f3q3.scala:15:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprcj5f3q3.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprcj5f3q3.scala:16:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                res += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122949,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_zn38kz.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_zn38kz.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_zn38kz.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr_zn38kz.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (i < 32) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122913,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_0_a5xlv.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_0_a5xlv.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_0_a5xlv.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_0_a5xlv.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 32) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                and_tup += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9cue8dmu.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9cue8dmu.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9cue8dmu.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9cue8dmu.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while (tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy64iiy82.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy64iiy82.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy64iiy82.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy64iiy82.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122914,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3mua65o.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3mua65o.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3mua65o.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd3mua65o.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt)\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt)\n        var result = 0\n        for (i <- 0 until tup1.length) {\n            result += tup1(i) * pow(10, i).toInt\n            result += tup2(i) * pow(10, i).toInt\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dust7o6.scala:16:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dust7o6.scala:16:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dust7o6.scala:17:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dust7o6.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        val tup1 = test_tup1.toString.split(\"\").map(_.toInt).toList\n        val tup2 = test_tup2.toString.split(\"\").map(_.toInt).toList\n        val result = tup1.zip(tup2).map(x => x._1 & x._2).mkString(\"\")\n        return result.toLong\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122841,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpumq_til9.scala:12:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpumq_til9.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpumq_til9.scala:13:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpumq_til9.scala:13:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result |= 1\n            }\n            tup1 >>= 1\n            tup2 >>= 1\n            result <<= 1\n        }\n        result >>= 1\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_jpjbfz.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_jpjbfz.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_jpjbfz.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_jpjbfz.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i : Int = 0\n        while (tup1 != 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122956,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfd71yq8.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfd71yq8.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfd71yq8.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgfd71yq8.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var i = 0\n        while(tup1 > 0) {\n            var bit1 = tup1 % 2\n            var bit2 = tup2 % 2\n            if(bit1 == 1 && bit2 == 1) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmdg4wgks.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmdg4wgks.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmdg4wgks.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmdg4wgks.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result = 0L\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) result |= 1\n            result <<= 1\n            tup1 >>= 1\n            tup2 >>= 1\n        }\n        result >>= 1\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj__d6mc.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj__d6mc.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj__d6mc.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphj__d6mc.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        for (i <- 0 to 63) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            if (bit1 == 1 && bit2 == 1) result = result | (1 << i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122957,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgrxnory3.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgrxnory3.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgrxnory3.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgrxnory3.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 != 0) {\n            if (tup1 % 2 == 1 && tup2 % 2 == 1) {\n                result += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpez7l1hzz.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpez7l1hzz.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpez7l1hzz.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpez7l1hzz.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            result = result << 1\n            i += 1\n        }\n        result = result >> 1\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpat6zx_pd.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpat6zx_pd.scala:25:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpat6zx_pd.scala:26:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpat6zx_pd.scala:26:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517274,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpen34je7a.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpen34je7a.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpen34je7a.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpen34je7a.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (tup1 != 0) {\n            and_tup += (tup1 % 10) * (tup2 % 10) * pow(10, i).toLong\n            tup1 /= 10\n            tup2 /= 10\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ht95lo4.scala:19:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ht95lo4.scala:19:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ht95lo4.scala:20:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7ht95lo4.scala:20:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | 1\n            }\n            result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517274,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpen34je7a.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpen34je7a.scala:24:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpen34je7a.scala:25:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpen34je7a.scala:25:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var and_tup = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                and_tup = and_tup | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return and_tup\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpba9a_628.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpba9a_628.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpba9a_628.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpba9a_628.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                result = result | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9bdym3dm.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (tup1 > 0) {\n            if ((tup1 & 1) == 1 && (tup2 & 1) == 1) {\n                result = result | (1L << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122948,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpel8gxmp4.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpel8gxmp4.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpel8gxmp4.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpel8gxmp4.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var result : Long = 0\n        var tup1 : Long = test_tup1\n        var tup2 : Long = test_tup2\n        var i : Int = 0\n        while (tup1 > 0) {\n            if ((tup1 % 2 == 1) && (tup2 % 2 == 1)) {\n                result += pow(2, i).toLong\n            }\n            tup1 /= 2\n            tup2 /= 2\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122896,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9cgntya.scala:21:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9cgntya.scala:21:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9cgntya.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9cgntya.scala:22:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while(tup1 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if(bit1 == 1 && bit2 == 1) {\n                result += pow(10, i).toLong\n            }\n            i += 1\n            tup1 /= 10\n            tup2 /= 10\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122806,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9laye02n.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9laye02n.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9laye02n.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9laye02n.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result : Long = 0\n        var count = 0\n        while (tup1 > 0 && tup2 > 0) {\n            var bit1 = tup1 % 10\n            var bit2 = tup2 % 10\n            if (bit1 == 1 && bit2 == 1) {\n                result += pow(10, count).toLong\n            }\n            tup1 /= 10\n            tup2 /= 10\n            count += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphucqgc6r.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphucqgc6r.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphucqgc6r.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphucqgc6r.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var res = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            if (bit1 == 1 && bit2 == 1) {\n                res = res | (1 << i)\n            }\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1665517264,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:23:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:24:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7kip6fu3.scala:24:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the elementwise and tuples from the given two tuples.\n    def andTuples(test_tup1 : Long, test_tup2 : Long) : Long = {\n        var tup1 = test_tup1\n        var tup2 = test_tup2\n        var result = 0L\n        var i = 0\n        while (i < 32) {\n            var bit1 = tup1 & 1\n            var bit2 = tup2 & 1\n            result = result | (bit1 & bit2)\n            if (i < 31) result = result << 1\n            tup1 = tup1 >> 1\n            tup2 = tup2 >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(andTuples((10l, 4l, 6l, 9l), (5l, 2l, 3l, 3l)) == (0l, 0l, 2l, 1l));\n    assert(andTuples((1l, 2l, 3l, 4l), (5l, 6l, 7l, 8l)) == (1l, 2l, 3l, 0l));\n    assert(andTuples((8l, 9l, 11l, 12l), (7l, 13l, 14l, 17l)) == (0l, 9l, 10l, 0l));\n    }\n\n}\n",
      "timestamp": 1666122958,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppmpkniga.scala:22:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppmpkniga.scala:22:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(andTuples((\u001b[31m10l\u001b[0m, \u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m9l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m3l\u001b[0m)) == (\u001b[31m0l\u001b[0m, \u001b[31m0l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m1l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppmpkniga.scala:23:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (Long, Long, Long, Long)\n\u001b[31m   |\u001b[0m                     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppmpkniga.scala:23:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(andTuples((\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, \u001b[31m7l\u001b[0m, \u001b[31m8l\u001b[0m)) == (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m0l\u001b[0m))",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}