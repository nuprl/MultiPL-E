{
  "name": "mbpp_65_recursive_list_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a list and sum all of its elements.\n    def recursiveListSum(data_list : List[Either[Long, List[Long]]]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(recursiveListSum((List[Either[Long, List[Long]]](1l, 2l, List[Long](3l.toLong, 4l.toLong), List[Long](5l.toLong, 6l.toLong)))) == (21l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](7l, 10l, List[Long](15l.toLong, 14l.toLong), List[Long](19l.toLong, 41l.toLong)))) == (106l));\n    assert(recursiveListSum((List[Either[Long, List[Long]]](10l, 20l, List[Long](30l.toLong, 40l.toLong), List[Long](50l.toLong, 60l.toLong)))) == (210l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        def recursiveListSumHelper(data_list : List[Either[Long, List[Long]]], sum : Long) : Long = {\n            if (data_list.isEmpty) sum\n            else {\n                val head = data_list.head\n                val tail = data_list.tail\n                head match {\n                    case Left(x) => recursiveListSumHelper(tail, sum + x)\n                    case Right(x) => recursiveListSumHelper(tail, sum + recursiveListSumHelper(x, 0))\n                }\n            }\n        }\n        recursiveListSumHelper(data_list, 0)",
    "        data_list match {\n            case Nil => 0\n            case (x :: xs) => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        def recursiveListSumHelper(data_list : List[Either[Long, List[Long]]], sum : Long) : Long = {\n            if (data_list.isEmpty) sum\n            else {\n                val head = data_list.head\n                if (head.isLeft) recursiveListSumHelper(data_list.tail, sum + head.left.get)\n                else recursiveListSumHelper(data_list.tail ::: head.right.get, sum)\n            }\n        }\n        recursiveListSumHelper(data_list, 0)",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        var sum = 0L\n        data_list.foreach(x => x match {\n            case Left(x) => sum += x\n            case Right(x) => sum += recursiveListSum(x)\n        })\n        sum",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        def recursiveListSumHelper(data_list : List[Either[Long, List[Long]]], acc : Long) : Long = {\n            if (data_list.isEmpty) acc\n            else {\n                val head = data_list.head\n                head match {\n                    case Left(x) => recursiveListSumHelper(data_list.tail, acc + x)\n                    case Right(x) => recursiveListSumHelper(data_list.tail, acc + recursiveListSum(x))\n                }\n            }\n        }\n        recursiveListSumHelper(data_list, 0)",
    "        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(y => Left(y)))\n        }).sum",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        var sum = 0L\n        for (i <- data_list) {\n            i match {\n                case Left(x) => sum += x\n                case Right(x) => sum += recursiveListSum(x)\n            }\n        }\n        return sum",
    "        def recursiveListSumHelper(data_list : List[Either[Long, List[Long]]], sum : Long) : Long = {\n            if (data_list.isEmpty) sum\n            else {\n                val head = data_list.head\n                val tail = data_list.tail\n                head match {\n                    case Left(x) => recursiveListSumHelper(tail, sum + x)\n                    case Right(x) => recursiveListSumHelper(tail, sum + recursiveListSumHelper(x.map(Left(_)), 0))\n                }\n            }\n        }\n        recursiveListSumHelper(data_list, 0)",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x ::: tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(Left(_)))\n        }).sum",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        if (data_list.isEmpty) 0\n        else data_list.head match {\n            case Left(x) => x + recursiveListSum(data_list.tail)\n            case Right(x) => recursiveListSum(x) + recursiveListSum(data_list.tail)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(value) => value + recursiveListSum(tail)\n                case Right(value) => recursiveListSum(value) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        def flatten(data_list : List[Either[Long, List[Long]]]) : List[Long] = {\n            data_list match {\n                case Nil => Nil\n                case Left(x) :: xs => x :: flatten(xs)\n                case Right(x) :: xs => flatten(x) ::: flatten(xs)\n            }\n        }\n        flatten(data_list).sum",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(Left(_)))\n        }).sum",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        def helper(data_list : List[Either[Long, List[Long]]], sum : Long) : Long = {\n            if (data_list.isEmpty) sum\n            else {\n                val head = data_list.head\n                val tail = data_list.tail\n                head match {\n                    case Left(x) => helper(tail, sum + x)\n                    case Right(x) => helper(tail, sum + recursiveListSum(x.map(Left(_))))\n                }\n            }\n        }\n        helper(data_list, 0)",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        var sum : Long = 0\n        for (i <- data_list) {\n            i match {\n                case Left(x) => sum += x\n                case Right(x) => sum += recursiveListSum(x)\n            }\n        }\n        sum",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(Left(_)))\n        }).sum",
    "        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(Left(_)))\n        }).sum",
    "        def recursiveListSumHelper(data_list : List[Either[Long, List[Long]]], sum : Long) : Long = {\n            if (data_list.isEmpty) sum\n            else if (data_list.head.isLeft) recursiveListSumHelper(data_list.tail, sum + data_list.head.left.get)\n            else recursiveListSumHelper(data_list.tail ::: data_list.head.right.get, sum)\n        }\n        recursiveListSumHelper(data_list, 0)",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(Left(_)))\n        }).sum",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x)) :: tail => x + recursiveListSum(tail)\n            case (Right(x)) :: tail => recursiveListSum(x) + recursiveListSum(tail)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list.foldLeft(0L)((sum, element) => sum + element.fold(identity, recursiveListSum))",
    "        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(y => Left(y)))\n        }).sum",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(Left(_)))\n        }).sum",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(value) => value + recursiveListSum(tail)\n                case Right(value) => recursiveListSum(value) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        var sum : Long = 0\n        for (data <- data_list) {\n            data match {\n                case Left(x) => sum += x\n                case Right(x) => sum += recursiveListSum(x)\n            }\n        }\n        return sum",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list.map(x => x match {\n            case Left(x) => x\n            case Right(x) => recursiveListSum(x.map(Left(_)))\n        }).sum",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case x :: xs => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        var sum : Long = 0\n        for (i <- data_list) {\n            i match {\n                case Left(x) => sum += x\n                case Right(x) => sum += recursiveListSum(x)\n            }\n        }\n        return sum",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case x :: xs => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (x :: xs) => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (x :: xs) => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (x :: xs) => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (x :: xs) => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x)) :: xs => x + recursiveListSum(xs)\n            case (Right(x)) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        var sum = 0L\n        for (data <- data_list) {\n            data match {\n                case Left(x) => sum += x\n                case Right(x) => sum += recursiveListSum(x)\n            }\n        }\n        return sum",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case x :: xs => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        def helper(data_list : List[Either[Long, List[Long]]], sum : Long) : Long = {\n            if (data_list.isEmpty) sum\n            else {\n                data_list.head match {\n                    case Left(x) => helper(data_list.tail, sum + x)\n                    case Right(x) => helper(data_list.tail, sum + recursiveListSum(x))\n                }\n            }\n        }\n        helper(data_list, 0)",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list.foldLeft(0L)((acc, x) => acc + x.fold(identity, recursiveListSum))",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(value) => value + recursiveListSum(tail)\n                case Right(list) => recursiveListSum(list) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (x :: xs) => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }",
    "        def recursiveListSumHelper(data_list : List[Either[Long, List[Long]]], sum : Long) : Long = {\n            if (data_list.isEmpty) sum\n            else {\n                val head = data_list.head\n                val tail = data_list.tail\n                head match {\n                    case Left(x) => recursiveListSumHelper(tail, sum + x)\n                    case Right(x) => recursiveListSumHelper(tail, sum + recursiveListSumHelper(x.map(Left(_)), 0))\n                }\n            }\n        }\n        recursiveListSumHelper(data_list, 0)",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        def helper(data_list : List[Either[Long, List[Long]]], acc : Long) : Long = {\n            if (data_list.isEmpty) acc\n            else {\n                val head = data_list.head\n                val tail = data_list.tail\n                if (head.isLeft) helper(tail, acc + head.left.get)\n                else helper(tail, acc + helper(head.right.get, 0))\n            }\n        }\n        helper(data_list, 0)",
    "        data_list match {\n            case Nil => 0\n            case (Left(x))::xs => x + recursiveListSum(xs)\n            case (Right(x))::xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case Left(x) :: xs => x + recursiveListSum(xs)\n            case Right(x) :: xs => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (x : Left[Long, List[Long]]) :: xs => x.left.get + recursiveListSum(xs)\n            case (x : Right[Long, List[Long]]) :: xs => recursiveListSum(x.right.get) + recursiveListSum(xs)\n        }",
    "        var sum = 0L\n        for (data <- data_list) {\n            data match {\n                case Left(x) => sum += x\n                case Right(x) => sum += recursiveListSum(x)\n            }\n        }\n        return sum",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case (Left(x) :: xs) => x + recursiveListSum(xs)\n            case (Right(x) :: xs) => recursiveListSum(x) + recursiveListSum(xs)\n        }",
    "        data_list match {\n            case Nil => 0\n            case (x :: xs) => x match {\n                case Left(x) => x + recursiveListSum(xs)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(xs)\n            }\n        }",
    "        data_list match {\n            case Nil => 0\n            case head :: tail => head match {\n                case Left(x) => x + recursiveListSum(tail)\n                case Right(x) => recursiveListSum(x) + recursiveListSum(tail)\n            }\n        }"
  ]
}