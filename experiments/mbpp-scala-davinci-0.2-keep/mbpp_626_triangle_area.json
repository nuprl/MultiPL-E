{
  "name": "mbpp_626_triangle_area",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    def triangleArea(r : Long) : Option[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(triangleArea((-1l)).equals(None));\n    assert(triangleArea((0l)).equals(0l));\n    assert(triangleArea((2l)).equals(4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val h = r\n        val a = r\n        val b = r\n        val c = sqrt(a * a + b * b).toLong\n        val s = (a + b + c) / 2\n        val area = sqrt(s * (s - a) * (s - b) * (s - c)).toLong\n        Some(area)",
    "        val h = r * sqrt(3) / 2\n        val a = h * r / 2\n        if (a.isValidLong) Some(a.toLong) else None",
    "        val a = r * 2\n        val b = a * a\n        val c = b / 2\n        val s = (a + b + c) / 2\n        val area = sqrt(s * (s - a) * (s - b) * (s - c))\n        Some(area.toLong)",
    "        val a = r * 2\n        val b = r * 2\n        val c = sqrt(a * a + b * b)\n        val s = (a + b + c) / 2\n        val area = sqrt(s * (s - a) * (s - b) * (s - c))\n        if (area > 0) Some(area.toLong) else None",
    "        val h = r * sqrt(3) / 2\n        val a = h * r / 2\n        if (a > 0) Some(a.toLong) else None",
    "        val h = r * sqrt(3) / 2\n        val a = h * r / 2\n        if (a > 0) Some(a.toLong) else None",
    "        val a = r * 2\n        val b = a\n        val c = sqrt(a * a + b * b).toLong\n        val s = (a + b + c) / 2\n        val area = sqrt(s * (s - a) * (s - b) * (s - c)).toLong\n        if (area == 0) None else Some(area)",
    "        val a = r / 2\n        val b = r\n        val c = sqrt(a * a + b * b).toLong\n        val s = (a + b + c) / 2\n        val area = sqrt(s * (s - a) * (s - b) * (s - c)).toLong\n        if (area == 0) None else Some(area)",
    "        val h = r * sqrt(3) / 2\n        val area = h * r / 2\n        if (area > 0) Some(area.toLong) else None",
    "        val h = r * sqrt(3) / 2\n        val area = h * r / 2\n        if (area > 0) Some(area.toLong) else None",
    "        val a = r * r * sqrt(3) / 4\n        if (a > 0) Some(a.toLong) else None",
    "        val a = r.toDouble\n        val b = a / 2\n        val c = sqrt(a * a - b * b)\n        val s = (a + b + c) / 2\n        val area = sqrt(s * (s - a) * (s - b) * (s - c))\n        if (area.isNaN) None else Some(area.toLong)",
    "        val h = r * sqrt(3) / 2\n        val a = h * r / 2\n        if (a > 0) Some(a.toLong) else None",
    "        val a = r * 2\n        val b = a\n        val c = sqrt(a * a + b * b).toLong\n        val s = (a + b + c) / 2\n        val area = sqrt(s * (s - a) * (s - b) * (s - c)).toLong\n        Some(area)",
    "        val a = r * 2\n        val b = r * 2\n        val c = sqrt(a * a + b * b)\n        val s = (a + b + c) / 2\n        val area = sqrt(s * (s - a) * (s - b) * (s - c))\n        if (area.isNaN) None else Some(area.toLong)",
    "        val h = r * sqrt(3) / 2\n        val a = h * r / 2\n        if (a <= 0) None else Some(a.toLong)",
    "        if (r < 0) None\n        else {\n            val h = r * sqrt(3) / 2\n            val a = h * r / 2\n            Some(a.toLong)\n        }",
    "        val a = r * r * sqrt(3) / 4\n        if (a > 0) Some(a.toLong) else None",
    "        val h = r\n        val a = r\n        val b = r\n        val c = sqrt(a * a + b * b).toLong\n        val s = (a + b + c) / 2\n        val area = sqrt(s * (s - a) * (s - b) * (s - c)).toLong\n        Some(area)",
    "        val a = r * 2\n        val b = a\n        val c = sqrt(a * a + b * b)\n        val s = (a + b + c) / 2\n        val area = sqrt(s * (s - a) * (s - b) * (s - c))\n        if (area.isNaN) None else Some(area.toLong)"
  ]
}