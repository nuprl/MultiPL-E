{
  "name": "mbpp_633_pair_xor_Sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    def pairXorSum(arr : List[Long], n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(pairXorSum((List[Long](5l.toLong, 9l.toLong, 7l.toLong, 6l.toLong)), (4l)) == (47l));\n    assert(pairXorSum((List[Long](7l.toLong, 3l.toLong, 5l.toLong)), (3l)) == (12l));\n    assert(pairXorSum((List[Long](7l.toLong, 3l.toLong)), (2l)) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val count = Array.fill(64)(0)\n        for (i <- 0 until n) {\n            var x = arr(i.toInt)\n            var j = 0\n            while (x > 0) {\n                count(j) += (x & 1)\n                j += 1\n                x >>= 1\n            }\n        }\n        var result : Long = 0\n        for (i <- 0 until 64) {\n            result += (count(i) * (n - count(i)) * pow(2, i).toLong)\n        }\n        result",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 to n - 1) {\n            for (j <- i + 1 to n - 1) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val xors = arr.map(x => x ^ n)\n        xors.foldLeft(0L)(_ + _)",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        sum",
    "        val xor = Array.fill[Long](100000)(0)\n        for (i <- 0 until n.toInt) {\n            val a = arr(i).toInt\n            for (j <- 0 until 32) {\n                val b = (1 << j)\n                if ((a & b) != 0) xor(j) += 1\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until 32) {\n            val x = xor(i)\n            ans += (x * (n - x) * 2)\n        }\n        ans",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- 0 to n - 1) {\n            for (j <- i + 1 to n - 1) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        return sum"
  ]
}