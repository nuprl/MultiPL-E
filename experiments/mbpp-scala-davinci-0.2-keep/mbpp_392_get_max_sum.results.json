{
  "name": "mbpp_392_get_max_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_cmakpom.scala:17)\n\tat Problem.main(tmp_cmakpom.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val map = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (map.contains(n)) return map(n)\n            val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            map(n) = max\n            max\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510146,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp3f7q8aas.scala:11:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(n, getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def f(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, f(n / 2) + f(n / 3) + f(n / 4) + f(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        f(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n        else {\n            val max = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            max\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510145,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmplceol7dy.scala:9:22 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m), n)\n\u001b[31m\u001b[31m  |\u001b[0m                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpov9kahui.scala:17)\n\tat Problem.main(tmpov9kahui.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        if (n <= 5) return n\n        val maxSum = new Array[Long](n.toInt + 1)\n        maxSum(1) = 1\n        maxSum(2) = 2\n        maxSum(3) = 3\n        maxSum(4) = 4\n        maxSum(5) = 5\n        for (i <- 6 to n.toInt) {\n            maxSum(i) = max(maxSum(i / 2) + maxSum(i / 3) + maxSum(i / 4) + maxSum(i / 5), i)\n        }\n        maxSum(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            List(a, b, c, d, e).max\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbop1sa3i.scala:18)\n\tat Problem.main(tmpbop1sa3i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(n, a + b + c + d)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            max(a + b + c + d, e)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = Array.fill(n.toInt + 1)(0L)\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache(n.toInt) != 0) cache(n.toInt)\n            else {\n                val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n.toInt) = max\n                max\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510147,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprzjwmu18.scala:11:26 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(n, getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val memo = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (memo.contains(n)) return memo(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            memo(n) = result\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:9)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSum",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n        else {\n            val max = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            println(n + \" \" + max)\n            max\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510145,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpd32k55o_.scala:9:22 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m), n)\n\u001b[31m\u001b[31m  |\u001b[0m                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> maxSum)\n                maxSum\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = a + b + c + d\n            if (e > n) e else n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 0\n        cache(1) = 1\n        cache(2) = 2\n        cache(3) = 3\n        cache(4) = 4\n        cache(5) = 5\n        cache(6) = 6\n        cache(7) = 7\n        cache(8) = 8\n        cache(9) = 9\n        cache(10) = 10\n        cache(11) = 11\n        for (i <- 12 to n.toInt) {\n            cache(i) = max(cache(i / 2) + cache(i / 3) + cache(i / 4) + cache(i / 5), i)\n        }\n        cache(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr0zgnw_z.scala:26)\n\tat Problem.main(tmpr0zgnw_z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp8vhb63v3.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(n, getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = max\n                max\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123055,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_bxt1ybz.scala:11:26 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(n, getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n < 0) -1\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            val f = getMaxSum(n / 7)\n            val g = getMaxSum(n / 8)\n            val h = getMaxSum(n / 9)\n            val i = getMaxSum(n / 10)\n            val j = getMaxSum(n / 11)\n            val k = getMaxSum(n / 12)\n            val l = getMaxSum(n / 13)\n            val m = getMaxSum(n / 14)\n            val o = getMaxSum(n / 15)\n            val p = getMaxSum(n / 16)\n            val q = getMaxSum(n / 17)\n            val r = getMaxSum(n / 18)\n            val s = getMaxSum(n / 19)\n            val t = getMaxSum(n / 20)\n            val u = getMaxSum(n / 21)\n            val v = getMaxSum(n / 22)\n            val w = getMaxSum(n / 23)\n            val x = getMaxSum(n / 24)\n            val y = getMaxSum(n / 25)\n            val z = getMaxSum(n / 26)\n            val aa = getMaxSum(n / 27)\n            val ab = getMaxSum(n / 28)\n            val ac = getMaxSum(n / 29)\n            val ad = getMaxSum(n / 30)\n            val ae = getMaxSum(n / 31)\n            val af = getMaxSum(n / 32)\n            val ag = getMaxSum(n / 33)\n            val ah = getMaxSum(n / 34)\n            val ai = getMaxSum(n / 35)\n            val aj = getMaxSum(n / 36)\n            val ak = getMaxSum(n / 37)\n            val al = getMaxSum(n / 38)\n            val\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E032] Syntax Error: /tmp/tmptywo4k8x.scala:46:15 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m            \u001b[33mval\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m               ^\u001b[0m\n\u001b[31m   |\u001b[0m               pattern expected\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptywo4k8x.scala:55:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptywo4k8x.scala:54:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmptywo4k8x.scala:48:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m48 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5), n)\n            cache(n) = result\n            return result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123029,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgebs759k.scala:17)\n\tat Problem.main(tmpgebs759k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:9)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 0\n        cache(1) = 1\n        cache(2) = 2\n        cache(3) = 3\n        cache(4) = 4\n        cache(5) = 5\n        cache(6) = 6\n        cache(7) = 7\n        cache(8) = 8\n        cache(9) = 9\n        cache(10) = 10\n        cache(11) = 11\n        for (i <- 12 to n.toInt) {\n            cache(i) = max(cache(i / 2) + cache(i / 3) + cache(i / 4) + cache(i / 5), i)\n        }\n        cache(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr0zgnw_z.scala:26)\n\tat Problem.main(tmpr0zgnw_z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:9)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 0\n        cache(1) = 1\n        cache(2) = 2\n        cache(3) = 3\n        cache(4) = 4\n        cache(5) = 5\n        cache(6) = 6\n        cache(7) = 7\n        cache(8) = 8\n        cache(9) = 9\n        cache(10) = 10\n        cache(11) = 11\n        for (i <- 12 to n.toInt) {\n            cache(i) = max(cache(i / 2) + cache(i / 3) + cache(i / 4) + cache(i / 5), i)\n        }\n        return cache(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123046,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpda1cwamj.scala:26)\n\tat Problem.main(tmpda1cwamj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123037,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm1lee_bt.scala:18)\n\tat Problem.main(tmpm1lee_bt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = n\n        return max(a + b + c + d, e)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val cache = new HashMap[Long, Long]\n            def getMaxSum(n : Long) : Long = {\n                if (n <= 0) 0\n                else if (cache.contains(n)) cache(n)\n                else {\n                    val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    cache(n) = maxSum\n                    maxSum\n                }\n            }\n            getMaxSum(n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:9)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_cmakpom.scala:17)\n\tat Problem.main(tmp_cmakpom.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new Array[Long](n.toInt + 1)\n        def getMaxSum(n : Long) : Long = {\n            if (n < 0) 0\n            else if (n == 0) 0\n            else if (cache(n.toInt) != 0) cache(n.toInt)\n            else {\n                cache(n.toInt) = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n.toInt)\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n                    cache(n) = result\n                    result\n                }\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123029,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvynaa11m.scala:21)\n\tat Problem.main(tmpvynaa11m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val map = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (map.contains(n)) return map(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            map(n) = result\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123038,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHashNumber(Statics.java:132)\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:9)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 0\n        cache(1) = 1\n        cache(2) = 2\n        cache(3) = 3\n        cache(4) = 4\n        cache(5) = 5\n        cache(6) = 6\n        cache(7) = 7\n        cache(8) = 8\n        cache(9) = 9\n        cache(10) = 10\n        cache(11) = 11\n        for (i <- 12 to n.toInt) {\n            cache(i) = max(cache(i / 2) + cache(i / 3) + cache(i / 4) + cache(i / 5), i)\n        }\n        cache(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr0zgnw_z.scala:26)\n\tat Problem.main(tmpr0zgnw_z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123038,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHashNumber(Statics.java:132)\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:9)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391d4o.scala:10)\n\tat Problem$.getMaxSum$1(tmp_m391",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = maxSum\n                maxSum\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_cmakpom.scala:17)\n\tat Problem.main(tmp_cmakpom.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val memo = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n == 0) 0\n            else if (memo.contains(n)) memo(n)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                memo += (n -> result)\n                result\n            }\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        var maxSum = n\n        for (i <- 2 to 5) {\n            val sum = getMaxSum(n / i)\n            if (sum > maxSum) maxSum = sum\n        }\n        maxSum\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt4bvzekd.scala:15)\n\tat Problem.main(tmpt4bvzekd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 0\n        cache(1) = 1\n        cache(2) = 2\n        cache(3) = 3\n        cache(4) = 4\n        cache(5) = 5\n        cache(6) = 6\n        cache(7) = 7\n        cache(8) = 8\n        cache(9) = 9\n        cache(10) = 10\n        cache(11) = 11\n        for (i <- 12 to n.toInt) {\n            cache(i) = max(cache(i / 2) + cache(i / 3) + cache(i / 4) + cache(i / 5), i)\n        }\n        cache(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr0zgnw_z.scala:26)\n\tat Problem.main(tmpr0zgnw_z.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val map = new HashMap[Long, Long]\n        def getMaxSumRec(n : Long) : Long = {\n            if (n < 12) return n\n            if (map.contains(n)) return map(n)\n            val m = max(getMaxSumRec(n / 2) + getMaxSumRec(n / 3) + getMaxSumRec(n / 4) + getMaxSumRec(n / 5), n)\n            map += (n -> m)\n            return m\n        }\n        return getMaxSumRec(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2t_rbvw9.scala:18)\n\tat Problem.main(tmp2t_rbvw9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            max(a + b + c + d, e)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:9)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123038,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            return result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy1_o1p0g.scala:17)\n\tat Problem.main(tmpy1_o1p0g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = 1\n        for (i <- 2 to n.toInt) {\n            val a = if (i % 2 == 0) dp(i / 2) else 0\n            val b = if (i % 3 == 0) dp(i / 3) else 0\n            val c = if (i % 4 == 0) dp(i / 4) else 0\n            val d = if (i % 5 == 0) dp(i / 5) else 0\n            dp(i) = max(a + b + c + d, i)\n        }\n        dp(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2b9nnqhj.scala:19)\n\tat Problem.main(tmp2b9nnqhj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]()\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n        else {\n            val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            maxSum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    cache += (n -> result)\n                    result\n                }\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_h1tarfo.scala:21)\n\tat Problem.main(tmp_h1tarfo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 0) return 0\n        if (n == 0) return 0\n        if (n == 1) return 1\n        if (n == 2) return 2\n        if (n == 3) return 3\n        if (n == 4) return 4\n        if (n == 5) return 5\n        val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp57wvr8kn.scala:13:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(n, getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val memo = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (memo.contains(n)) memo(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                memo(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]()\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5), n)\n            cache(n) = result\n            return result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpol3r_qdh.scala:17)\n\tat Problem.main(tmpol3r_qdh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSumRec(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumRec(n / 2) + getMaxSumRec(n / 3) + getMaxSumRec(n / 4) + getMaxSumRec(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSumRec(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:9)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tmp8zt4plri.scala:10)\n\tat Problem$.getMaxSumRec$1(tm",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3ewstib.scala:18)\n\tat Problem.main(tmpf3ewstib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n < 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHashNumber(Statics.java:132)\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:9)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavccejm.scala:11)\n\tat Problem$.getMaxSum$1(tmpbavcc",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            max(a + b + c + d, e)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123057,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        var cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = max\n            return max\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmplwu23ng4.scala:10:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(n, getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            val f = getMaxSum(n / 7)\n            val g = getMaxSum(n / 8)\n            val h = getMaxSum(n / 9)\n            val i = getMaxSum(n / 10)\n            val j = getMaxSum(n / 11)\n            val k = getMaxSum(n / 12)\n            val l = getMaxSum(n / 13)\n            val m = getMaxSum(n / 14)\n            val o = getMaxSum(n / 15)\n            val p = getMaxSum(n / 16)\n            val q = getMaxSum(n / 17)\n            val r = getMaxSum(n / 18)\n            val s = getMaxSum(n / 19)\n            val t = getMaxSum(n / 20)\n            val u = getMaxSum(n / 21)\n            val v = getMaxSum(n / 22)\n            val w = getMaxSum(n / 23)\n            val x = getMaxSum(n / 24)\n            val y = getMaxSum(n / 25)\n            val z = getMaxSum(n / 26)\n            val aa = getMaxSum(n / 27)\n            val ab = getMaxSum(n / 28)\n            val ac = getMaxSum(n / 29)\n            val ad = getMaxSum(n / 30)\n            val ae = getMaxSum(n / 31)\n            val af = getMaxSum(n / 32)\n            val ag = getMaxSum(n / 33)\n            val ah = getMaxSum(n / 34)\n            val ai = getMaxSum(n / 35)\n            val aj = getMaxSum(n / 36)\n            val ak = getMaxSum(n / 37)\n            val al = getMaxSum(n / 38)\n            val am = getMaxSum(n / 39)\n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpn_6t_vpm.scala:55:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn_6t_vpm.scala:54:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpn_6t_vpm.scala:48:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m48 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val sum = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache(n) = sum\n            sum\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += n -> result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_cmakpom.scala:17)\n\tat Problem.main(tmp_cmakpom.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = max(a + b + c + d, n)\n            e\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            return result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3sr1sv0y.scala:18)\n\tat Problem.main(tmp3sr1sv0y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val memo = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (memo.contains(n)) return memo(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            memo(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5ov0htjl.scala:17)\n\tat Problem.main(tmp5ov0htjl.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = max(a + b + c + d, n)\n            e\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def f(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, f(n / 2) + f(n / 3) + f(n / 4) + f(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        f(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123066,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val dp = Array.fill(n.toInt + 1)(0L)\n        for (i <- 1 to n.toInt) {\n            val a = if (i / 2 <= n) dp(i / 2) else 0\n            val b = if (i / 3 <= n) dp(i / 3) else 0\n            val c = if (i / 4 <= n) dp(i / 4) else 0\n            val d = if (i / 5 <= n) dp(i / 5) else 0\n            dp(i) = max(a + b + c + d, i)\n        }\n        dp(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:9)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n < 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:9)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSum",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val maxSum = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = maxSum\n            return maxSum\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5gcxg772.scala:17)\n\tat Problem.main(tmp5gcxg772.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val memo = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (memo.contains(n)) return memo(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            memo(n) = result\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:9)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmphvxt1cv6.scala:10)\n\tat Problem$.getMaxSum",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        var map = Map[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (map.contains(n)) map(n)\n            else {\n                val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                map += (n -> maxSum)\n                maxSum\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            max(a + b + c + d, e)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val maxSum = new Array[Long](n.toInt + 1)\n            maxSum(0) = 0\n            maxSum(1) = 1\n            for (i <- 2 to n.toInt) {\n                val a = maxSum(i / 2)\n                val b = maxSum(i / 3)\n                val c = maxSum(i / 4)\n                val d = maxSum(i / 5)\n                maxSum(i) = max(a + b + c + d, i)\n            }\n            maxSum(n.toInt)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            max(n, a + b + c + d + e)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqhafv_9b.scala:17)\n\tat Problem.main(tmpqhafv_9b.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3ewstib.scala:18)\n\tat Problem.main(tmpf3ewstib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def f(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(f(n / 2) + f(n / 3) + f(n / 4) + f(n / 5), n)\n            cache(n) = result\n            result\n        }\n        f(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val max = max(a + b + c + d, n)\n            max\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprzv8d3d1.scala:12:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(a + b + c + d, n)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            maxSum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val m = new HashMap[Long, Long]\n        def f(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (m.contains(n)) return m(n)\n            val result = max(f(n / 2) + f(n / 3) + f(n / 4) + f(n / 5), n)\n            m(n) = result\n            result\n        }\n        f(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            max(n, a + b + c + d + e)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123046,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1ezjfdju.scala:17)\n\tat Problem.main(tmp1ezjfdju.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n == 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:9)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:9)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp6sjz8214.scala:10)\n\tat Problem$.getMaxSum",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        var maxSum = n\n        for (i <- 2 to 5) {\n            val sum = getMaxSum(n / i)\n            if (sum > maxSum) maxSum = sum\n        }\n        maxSum\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt4bvzekd.scala:15)\n\tat Problem.main(tmpt4bvzekd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        var maxSum = n\n        for (i <- 2 to 5) {\n            val sum = getMaxSum(n / i)\n            if (sum > maxSum) maxSum = sum\n        }\n        maxSum\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123058,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt4bvzekd.scala:15)\n\tat Problem.main(tmpt4bvzekd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            return result\n        }\n        return getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHashNumber(Statics.java:132)\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:9)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wptox3.scala:10)\n\tat Problem$.getMaxSum$1(tmp_9wpt",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new Array[Long](n.toInt + 1)\n        cache(0) = 0\n        cache(1) = 1\n        for (i <- 2 to n.toInt) {\n            cache(i) = max(cache(i / 2) + cache(i / 3) + cache(i / 4) + cache(i / 5), i)\n        }\n        cache(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val maxSum = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n        maxSum\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = max\n            max\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123065,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp478u28ia.scala:11:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(n, getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpgeud8jk0.scala:7:18 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(n, getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:9)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = max(a + b + c + d, n)\n            e\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 0) 0\n        else if (n == 0) 0\n        else if (n == 1) 1\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = a + b + c + d\n            if (e > n) e\n            else n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val maxSum = n max (getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            maxSum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        if (n == 1) return 1\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (n == 1) return 1\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:9)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 0) return 0\n        if (n == 0) return 0\n        if (n == 1) return 1\n        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 0\n        dp(1) = 1\n        for (i <- 2 to n.toInt) {\n            val a = dp(i / 2)\n            val b = dp(i / 3)\n            val c = dp(i / 4)\n            val d = dp(i / 5)\n            dp(i) = max(a + b + c + d, i)\n        }\n        return dp(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123069,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val m = new HashMap[Long, Long]\n        def f(n : Long) : Long = {\n            if (m.contains(n)) return m(n)\n            val result = max(f(n / 2) + f(n / 3) + f(n / 4) + f(n / 5), n)\n            m(n) = result\n            return result\n        }\n        f(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHashNumber(Statics.java:132)\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:9)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1cqo9.scala:10)\n\tat Problem$.f$1(tmpgjw1c",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:9)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat Problem$.getMaxSum$1(tmp811ev365.scala:11)\n\tat",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpov9kahui.scala:17)\n\tat Problem.main(tmpov9kahui.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val half = getMaxSum(n / 2)\n            val third = getMaxSum(n / 3)\n            val fourth = getMaxSum(n / 4)\n            val fifth = getMaxSum(n / 5)\n            val sum = half + third + fourth + fifth\n            if (sum > n) sum\n            else n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpov9kahui.scala:17)\n\tat Problem.main(tmpov9kahui.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            maxSum\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123072,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 0) return 0\n        if (n == 0) return 0\n        if (n == 1) return 1\n        if (n == 2) return 2\n        if (n == 3) return 3\n        if (n == 4) return 4\n        if (n == 5) return 5\n        val max = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n        return max\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123069,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpn4kqvyg6.scala:13:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m), n)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(n, a + b + c + d)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpov9kahui.scala:17)\n\tat Problem.main(tmpov9kahui.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:9)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat Problem$.getMaxSum$1(tmpyp7fdpty.scala:11)\n\tat",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n == 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5), n)\n            cache += (n -> result)\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = n\n            max(a + b + c + d, e)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            val f = getMaxSum(n / 7)\n            val g = getMaxSum(n / 8)\n            val h = getMaxSum(n / 9)\n            val i = getMaxSum(n / 10)\n            val j = getMaxSum(n / 11)\n            val k = getMaxSum(n / 12)\n            val l = getMaxSum(n / 13)\n            val m = getMaxSum(n / 14)\n            val o = getMaxSum(n / 15)\n            val p = getMaxSum(n / 16)\n            val q = getMaxSum(n / 17)\n            val r = getMaxSum(n / 18)\n            val s = getMaxSum(n / 19)\n            val t = getMaxSum(n / 20)\n            val u = getMaxSum(n / 21)\n            val v = getMaxSum(n / 22)\n            val w = getMaxSum(n / 23)\n            val x = getMaxSum(n / 24)\n            val y = getMaxSum(n / 25)\n            val z = getMaxSum(n / 26)\n            val aa = getMaxSum(n / 27)\n            val ab = getMaxSum(n / 28)\n            val ac = getMaxSum(n / 29)\n            val ad = getMaxSum(n / 30)\n            val ae = getMaxSum(n / 31)\n            val af = getMaxSum(n / 32)\n            val ag = getMaxSum(n / 33)\n            val ah = getMaxSum(n / 34)\n            val ai = getMaxSum(n / 35)\n            val aj = getMaxSum(n / 36)\n            val ak = getMaxSum(n / 37)\n            val al = getMaxSum(n / 38)\n            val am = getMaxSum(n / 39)\n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphxnaao2z.scala:55:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphxnaao2z.scala:54:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmphxnaao2z.scala:48:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m48 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    cache(n) = maxSum\n                    maxSum\n                }\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0jyih5g_.scala:21)\n\tat Problem.main(tmp0jyih5g_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val map = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (map.contains(n)) return map(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            map += (n -> result)\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5), n)\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:9)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat Problem$.getMaxSum$1(tmpzkxuv_nt.scala:10)\n\tat",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = n\n        return max(a + b + c + d, e)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            val f = getMaxSum(n / 7)\n            val g = getMaxSum(n / 8)\n            val h = getMaxSum(n / 9)\n            val i = getMaxSum(n / 10)\n            val j = getMaxSum(n / 11)\n            val k = getMaxSum(n / 12)\n            val l = getMaxSum(n / 13)\n            val m = getMaxSum(n / 14)\n            val o = getMaxSum(n / 15)\n            val p = getMaxSum(n / 16)\n            val q = getMaxSum(n / 17)\n            val r = getMaxSum(n / 18)\n            val s = getMaxSum(n / 19)\n            val t = getMaxSum(n / 20)\n            val u = getMaxSum(n / 21)\n            val v = getMaxSum(n / 22)\n            val w = getMaxSum(n / 23)\n            val x = getMaxSum(n / 24)\n            val y = getMaxSum(n / 25)\n            val z = getMaxSum(n / 26)\n            val aa = getMaxSum(n / 27)\n            val ab = getMaxSum(n / 28)\n            val ac = getMaxSum(n / 29)\n            val ad = getMaxSum(n / 30)\n            val ae = getMaxSum(n / 31)\n            val af = getMaxSum(n / 32)\n            val ag = getMaxSum(n / 33)\n            val ah = getMaxSum(n / 34)\n            val ai = getMaxSum(n / 35)\n            val aj = getMaxSum(n / 36)\n            val ak = getMaxSum(n / 37)\n            val al = getMaxSum(n / 38)\n            val am = getMaxSum(n / 39)\n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmphxnaao2z.scala:55:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphxnaao2z.scala:54:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmphxnaao2z.scala:48:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m48 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val memo = new HashMap[Long, Long]\n        def f(n : Long) : Long = {\n            if (n < 12) return n\n            if (memo.contains(n)) return memo(n)\n            val result = max(f(n / 2) + f(n / 3) + f(n / 4) + f(n / 5), n)\n            memo(n) = result\n            result\n        }\n        f(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkhxi_7ro.scala:18)\n\tat Problem.main(tmpkhxi_7ro.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        var maxSum = n\n        for (i <- 2 to 5) {\n            val sum = getMaxSum(n / i)\n            if (sum > maxSum) maxSum = sum\n        }\n        maxSum\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr03qwlts.scala:15)\n\tat Problem.main(tmpr03qwlts.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new Array[Long](n.toInt + 1)\n        def getMaxSum(n : Long, cache : Array[Long]) : Long = {\n            if (n <= 0) 0\n            else if (cache(n.toInt) != 0) cache(n.toInt)\n            else {\n                val max = max(n, getMaxSum(n / 2, cache) + getMaxSum(n / 3, cache) + getMaxSum(n / 4, cache) + getMaxSum(n / 5, cache))\n                cache(n.toInt) = max\n                max\n            }\n        }\n        getMaxSum(n, cache)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123073,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpbrhdx7l4.scala:11:26 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(n, getMaxSum(n / \u001b[31m2\u001b[0m, cache) + getMaxSum(n / \u001b[31m3\u001b[0m, cache) + getMaxSum(n / \u001b[31m4\u001b[0m, cache) + getMaxSum(n / \u001b[31m5\u001b[0m, cache))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3ewstib.scala:18)\n\tat Problem.main(tmpf3ewstib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = max(a + b + c + d, n)\n            e\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> result)\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510138,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        var map = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (map.contains(n)) return map(n)\n            val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            map += (n -> max)\n            return max\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpfc5eywzk.scala:10:22 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(n, getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                      ^\u001b[0m\n\u001b[31m   |\u001b[0m                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]()\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpi2v012vf.scala:17)\n\tat Problem.main(tmpi2v012vf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpov9kahui.scala:17)\n\tat Problem.main(tmpov9kahui.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n < 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123067,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:9)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSumHelper$1(tmplbdjhrgb.scala:11)\n\tat Problem$.getMaxSum",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) n\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2l1h9vfb.scala:16)\n\tat Problem.main(tmp2l1h9vfb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3ewstib.scala:18)\n\tat Problem.main(tmpf3ewstib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            max(n, a + b + c + d + e)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123046,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1ezjfdju.scala:17)\n\tat Problem.main(tmp1ezjfdju.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = a + b + c + d\n        if (e > n) e else n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache(n) = result\n            return result\n        }\n        return getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHashNumber(Statics.java:132)\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:9)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmprm3f44lv.scala:10)\n\tat Problem$.getM",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:9)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat Problem$.getMaxSum$1(tmp0o7nfv4u.scala:10)\n\tat",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5), n)\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(a + b + c + d, n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val sum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = sum\n                sum\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache += (n -> maxSum)\n                maxSum\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n < 0) -1\n        else {\n            val memo = new HashMap[Long, Long]\n            def getMaxSum(n : Long) : Long = {\n                if (n == 0) 0\n                else if (n < 0) -1\n                else if (memo.contains(n)) memo(n)\n                else {\n                    val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    memo(n) = max\n                    max\n                }\n            }\n            getMaxSum(n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123074,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpq9t1xevh.scala:15:30 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                    \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(n, getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            val e = getMaxSum(n / 6)\n            val f = getMaxSum(n / 7)\n            val g = getMaxSum(n / 8)\n            val h = getMaxSum(n / 9)\n            val i = getMaxSum(n / 10)\n            val j = getMaxSum(n / 11)\n            val k = getMaxSum(n / 12)\n            val l = getMaxSum(n / 13)\n            val m = getMaxSum(n / 14)\n            val o = getMaxSum(n / 15)\n            val p = getMaxSum(n / 16)\n            val q = getMaxSum(n / 17)\n            val r = getMaxSum(n / 18)\n            val s = getMaxSum(n / 19)\n            val t = getMaxSum(n / 20)\n            val u = getMaxSum(n / 21)\n            val v = getMaxSum(n / 22)\n            val w = getMaxSum(n / 23)\n            val x = getMaxSum(n / 24)\n            val y = getMaxSum(n / 25)\n            val z = getMaxSum(n / 26)\n            val aa = getMaxSum(n / 27)\n            val ab = getMaxSum(n / 28)\n            val ac = getMaxSum(n / 29)\n            val ad = getMaxSum(n / 30)\n            val ae = getMaxSum(n / 31)\n            val af = getMaxSum(n / 32)\n            val ag = getMaxSum(n / 33)\n            val ah = getMaxSum(n / 34)\n            val ai = getMaxSum(n / 35)\n            val aj = getMaxSum(n / 36)\n            val ak = getMaxSum(n / 37)\n            val al = getMaxSum(n / 38)\n            val am = getMaxSum(n / 39)\n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpn_6t_vpm.scala:55:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m55 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn_6t_vpm.scala:54:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m54 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmpn_6t_vpm.scala:48:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m48 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:9)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:10)\n\tat Problem$.getMaxSum$1(tmpzz03wkst.scala:1",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n == 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = max\n                max\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123038,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp19w7858k.scala:11:26 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(n, getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m))\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val n2 = getMaxSum(n / 2)\n            val n3 = getMaxSum(n / 3)\n            val n4 = getMaxSum(n / 4)\n            val n5 = getMaxSum(n / 5)\n            val sum = n2 + n3 + n4 + n5\n            if (sum > n) sum else n\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = a + b + c + d\n        if (e > n) e else n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = a + b + c + d\n        if (e > n) e else n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf3ewstib.scala:18)\n\tat Problem.main(tmpf3ewstib.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSumRec(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumRec(n / 2) + getMaxSumRec(n / 3) + getMaxSumRec(n / 4) + getMaxSumRec(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSumRec(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123076,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:9)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat Problem$.getMaxSum$1(tmp7ceuxi5v.scala:10)\n\tat",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val maxSum = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = maxSum\n            return maxSum\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123077,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbnpg3r5o.scala:18)\n\tat Problem.main(tmpbnpg3r5o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) 0\n        else {\n            val max = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            max\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123075,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmptmaquso2.scala:8:22 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(n, getMaxSum(n / \u001b[31m2\u001b[0m) + getMaxSum(n / \u001b[31m3\u001b[0m) + getMaxSum(n / \u001b[31m4\u001b[0m) + getMaxSum(n / \u001b[31m5\u001b[0m))\n\u001b[31m\u001b[31m  |\u001b[0m                      ^\u001b[0m\n\u001b[31m  |\u001b[0m                      Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        if (n == 1) return 1\n        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i) = max(dp(i / 2) + dp(i / 3) + dp(i / 4) + dp(i / 5), i)\n        }\n        dp(n.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]()\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache += (n -> result)\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) n\n            else {\n                if (cache.contains(n)) cache(n)\n                else {\n                    val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                    cache(n) = result\n                    result\n                }\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu2cc_qtq.scala:21)\n\tat Problem.main(tmpu2cc_qtq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = max(a + b + c + d, n)\n        return e\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123028,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n < 12) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510150,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpov9kahui.scala:17)\n\tat Problem.main(tmpov9kahui.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123047,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 5) return n\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) 0\n            else if (cache.contains(n)) cache(n)\n            else {\n                val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n                cache(n) = result\n                result\n            }\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123019,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n <= 0) return 0\n        val cache = new HashMap[Long, Long]\n        def getMaxSum(n : Long) : Long = {\n            if (n <= 0) return 0\n            if (cache.contains(n)) return cache(n)\n            val result = max(n, getMaxSum(n / 2) + getMaxSum(n / 3) + getMaxSum(n / 4) + getMaxSum(n / 5))\n            cache(n) = result\n            result\n        }\n        getMaxSum(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510137,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n < 12) return n\n        val memo = new HashMap[Long, Long]\n        def getMaxSumHelper(n : Long) : Long = {\n            if (memo.contains(n)) return memo(n)\n            val result = max(getMaxSumHelper(n / 2) + getMaxSumHelper(n / 3) + getMaxSumHelper(n / 4) + getMaxSumHelper(n / 5), n)\n            memo += (n -> result)\n            result\n        }\n        getMaxSumHelper(n)\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123078,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.Statics.anyHashNumber(Statics.java:132)\n\tat scala.runtime.Statics.anyHash(Statics.java:124)\n\tat scala.collection.mutable.HashMap.contains(HashMap.scala:78)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:9)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getMaxSumHelper$1(tmp8l1wcrr9.scala:10)\n\tat Problem$.getM",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) 0\n        else {\n            val a = getMaxSum(n / 2)\n            val b = getMaxSum(n / 3)\n            val c = getMaxSum(n / 4)\n            val d = getMaxSum(n / 5)\n            max(n, a + b + c + d)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510149,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    def getMaxSum(n : Long) : Long = {\n        if (n == 0) return 0\n        val a = getMaxSum(n / 2)\n        val b = getMaxSum(n / 3)\n        val c = getMaxSum(n / 4)\n        val d = getMaxSum(n / 5)\n        val e = a + b + c + d\n        if (e > n) e else n\n    }\n    def main(args: Array[String]) = {\n    assert(getMaxSum((60l)) == (106l));\n    assert(getMaxSum((10l)) == (12l));\n    assert(getMaxSum((2l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123018,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}