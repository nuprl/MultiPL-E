{
  "name": "mbpp_418_Find_Max",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the element of a list having maximum length.\n    def FindMax(lst : Any) : Any = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(FindMax((Any(List[String](\"A\"), List[String](\"A\", \"B\"), List[String](\"A\", \"B\", \"C\")))).equals((Any(\"A\", \"B\", \"C\"))));\n    assert(FindMax((Any(List[Long](1l.toLong), List[Long](1l.toLong, 2l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong)))).equals((Any(1l.toLong, 2l.toLong, 3l.toLong))));\n    assert(FindMax((Any(List[Long](1l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](1l.toLong, 5l.toLong, 6l.toLong, 1l.toLong)))).equals((Any(1l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var max = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length > max.asInstanceOf[List[Any]].length) {\n                max = i\n            }\n        }\n        return max",
    "        var max = lst(0)\n        for (i <- 1 until lst.length) {\n            if (lst(i).toString.length > max.toString.length) {\n                max = lst(i)\n            }\n        }\n        return max",
    "        var max = lst(0)\n        for (i <- 1 until lst.length) {\n            if (lst(i).toString.length > max.toString.length) {\n                max = lst(i)\n            }\n        }\n        return max",
    "        var max = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.toString.length > max.toString.length) max = i\n        }\n        return max",
    "        var max = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length > max.asInstanceOf[List[Any]].length) {\n                max = i\n            }\n        }\n        return max",
    "        var max = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.toString.length > max.toString.length) {\n                max = i\n            }\n        }\n        return max",
    "        var max = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length > max.asInstanceOf[List[Any]].length) {\n                max = i\n            }\n        }\n        return max",
    "        var max = 0\n        var max_elem = lst(0)\n        for (elem <- lst) {\n            if (elem.toString.length > max) {\n                max = elem.toString.length\n                max_elem = elem\n            }\n        }\n        return max_elem",
    "        var max = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[String].length > max.asInstanceOf[String].length) {\n                max = i\n            }\n        }\n        return max",
    "        var max = lst(0)\n        for (i <- lst) {\n            if (i.toString.length > max.toString.length) {\n                max = i\n            }\n        }\n        return max",
    "        var max : Any = lst(0)\n        for (i <- 1 until lst.length) {\n            if (lst(i).toString.length > max.toString.length) {\n                max = lst(i)\n            }\n        }\n        return max",
    "        var max = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.toString.length > max.toString.length) {\n                max = i\n            }\n        }\n        return max",
    "        var max = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.toString.length > max.toString.length) max = i\n        }\n        return max",
    "        var max = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length > max.asInstanceOf[List[Any]].length) {\n                max = i\n            }\n        }\n        return max",
    "        var max = 0\n        var max_item = lst(0)\n        for (item <- lst) {\n            if (item.toString.length > max) {\n                max = item.toString.length\n                max_item = item\n            }\n        }\n        return max_item",
    "        var max = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.toString.length > max.toString.length) {\n                max = i\n            }\n        }\n        return max",
    "        var max = lst.asInstanceOf[List[Any]].head\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.toString.length > max.toString.length) max = i\n        }\n        return max",
    "        var max = 0\n        var max_element = lst(0)\n        for (i <- 0 to lst.length - 1) {\n            if (lst(i).toString.length > max) {\n                max = lst(i).toString.length\n                max_element = lst(i)\n            }\n        }\n        return max_element",
    "        var max = lst.asInstanceOf[List[Any]](0)\n        for (i <- lst.asInstanceOf[List[Any]]) {\n            if (i.asInstanceOf[List[Any]].length > max.asInstanceOf[List[Any]].length) max = i\n        }\n        return max",
    "        var max = lst(0)\n        for (i <- 1 until lst.length) {\n            if (lst(i).toString.length > max.toString.length) {\n                max = lst(i)\n            }\n        }\n        return max"
  ]
}