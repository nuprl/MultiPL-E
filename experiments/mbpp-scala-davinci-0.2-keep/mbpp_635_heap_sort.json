{
  "name": "mbpp_635_heap_sort",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort the given list.\n    def heapSort(iterable : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(heapSort((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 0l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    assert(heapSort((List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 25l.toLong, 58l.toLong))).equals((List[Long](14l.toLong, 22l.toLong, 25l.toLong, 25l.toLong, 35l.toLong, 58l.toLong, 65l.toLong, 75l.toLong, 85l.toLong))));\n    assert(heapSort((List[Long](7l.toLong, 1l.toLong, 9l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        var result = List[Long]()\n        while (heap.size > 0) {\n            result = heap.pop() :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        var result = List[Long]()\n        while (heap.size > 0) {\n            result = heap.pop() :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap[Long]\n        heap.addAll(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap[Long]\n        heap.addAll(iterable)\n        heap.toList",
    "        val heap = new Heap[Long]\n        heap.insertAll(iterable)\n        val result = new ListBuffer[Long]\n        while(!heap.isEmpty) {\n            result += heap.extractMin\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        var result = List[Long]()\n        while (heap.size > 0) {\n            result = heap.pop() :: result\n        }\n        result",
    "        var heap = new Heap(iterable)\n        var result = new ListBuffer[Long]()\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        var result = List[Long]()\n        while (heap.size > 0) {\n            result = heap.pop() :: result\n        }\n        result",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        val result = new ListBuffer[Long]\n        while (heap.size > 0) {\n            result += heap.pop\n        }\n        result.toList",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        heap.sort",
    "        val heap = new Heap(iterable)\n        heap.sort()",
    "        val heap = new Heap[Long]\n        for (i <- iterable) heap.insert(i)\n        var result = List[Long]()\n        while (!heap.isEmpty) result = heap.extractMin :: result\n        result"
  ]
}