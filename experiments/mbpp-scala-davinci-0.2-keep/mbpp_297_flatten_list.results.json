{
  "name": "mbpp_297_flatten_list",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => for (x <- list) list2 = list2 ::: flattenList(x)\n            case x : Long => list2 = list2 :+ x\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp50vxoqiy.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp50vxoqiy.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp50vxoqiy.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85ob7urn.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85ob7urn.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85ob7urn.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : Long => x :: flattenList(xs)\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4t0o3s7s.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4t0o3s7s.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4t0o3s7s.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case long : Long => List(long)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2h9bb13t.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2h9bb13t.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2h9bb13t.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x:List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn_nu6fkc.scala:9:28 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m x :: xs => x :: flattenList(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Found:    (x : Any)\n\u001b[31m  |\u001b[0m                            Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn_nu6fkc.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn_nu6fkc.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8m3wqro1.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8m3wqro1.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8m3wqro1.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocjywfw3.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocjywfw3.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocjywfw3.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp92pck3t.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp92pck3t.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp92pck3t.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => head match {\n                case head : Long => head :: flattenList(tail)\n                case head : List[Any] => flattenList(head) ::: flattenList(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0mpbllix.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0mpbllix.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0mpbllix.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaagm0oia.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaagm0oia.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaagm0oia.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case x : Long => List(x)\n            case x : List[Any] => x.flatMap(flattenList)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpig9vve0x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpig9vve0x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpig9vve0x.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8m3wqro1.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8m3wqro1.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8m3wqro1.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list1 : List[Any] => {\n                var list2 = List[Long]()\n                for (i <- list1) {\n                    list2 = list2 ::: flattenList(i)\n                }\n                list2\n            }\n            case list1 : Long => List(list1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpig5yr480.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpig5yr480.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpig5yr480.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 ::: List(item)\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfq8kjddk.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfq8kjddk.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfq8kjddk.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85ob7urn.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85ob7urn.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85ob7urn.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 ::: List(item)\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123901,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpldxr_51q.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpldxr_51q.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpldxr_51q.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case x : List[Any] => x.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz9er68wx.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz9er68wx.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz9er68wx.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x => List(x.asInstanceOf[Long])\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7o6qpt6e.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7o6qpt6e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7o6qpt6e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n                case y : Long => y :: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp65b2rzgn.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp65b2rzgn.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp65b2rzgn.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x:Long) :: xs => x :: flattenList(xs)\n            case (x:List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb90_iadj.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb90_iadj.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb90_iadj.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk0csrc4r.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk0csrc4r.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk0csrc4r.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- 0 until x.length) {\n                    list2 = list2 ::: flattenList(x(i))\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123901,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4cut64v8.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4cut64v8.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4cut64v8.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmparhh9knq.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmparhh9knq.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmparhh9knq.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list1 : List[Any] => list1.flatMap(flattenList)\n            case list1 : Long => List(list1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123901,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbbxqh25c.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbbxqh25c.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbbxqh25c.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list1 : List[Any] => list1.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85kij0jh.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85kij0jh.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85kij0jh.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case x : List[Any] => x.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz9er68wx.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz9er68wx.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz9er68wx.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list1 : List[Any] => list1.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85kij0jh.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85kij0jh.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85kij0jh.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case num : Long => List(num)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi92ws0lu.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi92ws0lu.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi92ws0lu.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocjywfw3.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocjywfw3.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocjywfw3.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case l : Long => List(l)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2iwg237b.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2iwg237b.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2iwg237b.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x.asInstanceOf[Long] :: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9vbkvxm1.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9vbkvxm1.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9vbkvxm1.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7izv3pz0.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7izv3pz0.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7izv3pz0.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp41dlupk1.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp41dlupk1.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp41dlupk1.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => x.foreach(y => list2 = list2 ++ flattenList(y))\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaucwsa29.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaucwsa29.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaucwsa29.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => list2 = list2 ::: flattenList(x)\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp72qtyl_9.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp72qtyl_9.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp72qtyl_9.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Int => list2 = list2 :+ x.toLong\n            case x : Long => list2 = list2 :+ x\n            case x : Double => list2 = list2 :+ x.toLong\n            case x : Float => list2 = list2 :+ x.toLong\n            case x : String => list2 = list2 :+ x.toLong\n            case _ => list2 = list2 :+ 0\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123901,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmltmzcxl.scala:23:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmltmzcxl.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmltmzcxl.scala:25:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocjywfw3.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocjywfw3.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocjywfw3.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ++ flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxnbzo6n2.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxnbzo6n2.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxnbzo6n2.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : Long => x :: flattenList(xs)\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4t0o3s7s.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4t0o3s7s.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4t0o3s7s.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => for (i <- x) list2 = list2 ::: flattenList(i)\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn7x9n4dj.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn7x9n4dj.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn7x9n4dj.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => head match {\n                case x : Long => x :: flattenList(tail)\n                case x : List[Any] => flattenList(x) ::: flattenList(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsfu1cgdo.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsfu1cgdo.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsfu1cgdo.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case l : List[Any] => for (i <- l) list2 = list2 ::: flattenList(i)\n            case i : Int => list2 = list2 :+ i.toLong\n            case l : Long => list2 = list2 :+ l\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjpd97r1j.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjpd97r1j.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjpd97r1j.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case n : Long => List(n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123901,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjcst0a5y.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjcst0a5y.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjcst0a5y.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case i : Long => list2 = list2 :+ i\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpivnm9umn.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpivnm9umn.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpivnm9umn.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp16z94uem.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp16z94uem.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp16z94uem.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => list2 = list2 :+ item\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123901,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqsi01swp.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqsi01swp.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqsi01swp.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => x.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu1c2_9fe.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu1c2_9fe.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu1c2_9fe.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfho5h79.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfho5h79.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfho5h79.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (x <- list) {\n                    list2 = list2 ::: flattenList(x)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbamwr1vf.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbamwr1vf.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbamwr1vf.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case i : Long => {\n                list2 = list2 :+ i\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8c1z2cmn.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8c1z2cmn.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8c1z2cmn.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = Nil\n        list1 match {\n            case Nil => list2\n            case head :: tail => head match {\n                case x : Long => list2 = list2 ::: List(x)\n                case x : List[Any] => list2 = list2 ::: flattenList(x)\n            }\n            list2 = list2 ::: flattenList(tail)\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqg0v70zt.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqg0v70zt.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqg0v70zt.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case long : Long => {\n                list2 = list2 :+ long\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo45al77_.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo45al77_.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo45al77_.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (elem <- list) {\n                    list2 = list2 ::: flattenList(elem)\n                }\n            }\n            case long : Long => {\n                list2 = list2 :+ long\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123901,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpantv3rh6.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpantv3rh6.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpantv3rh6.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case (x : List[Any]) => x.flatMap(flattenList)\n            case (x : Long) => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123901,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq5sf8pch.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq5sf8pch.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq5sf8pch.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case (x : Long) :: xs => x :: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpio18ef72.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpio18ef72.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpio18ef72.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => x.foreach(x => list2 = list2 ::: flattenList(x))\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoo0hk9zn.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoo0hk9zn.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoo0hk9zn.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = Nil\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case n : Long => list2 = list2 ::: List(n)\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123906,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1fj7s_ya.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1fj7s_ya.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1fj7s_ya.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => head match {\n                case x : Long => x :: flattenList(tail)\n                case x : List[Any] => flattenList(x) ::: flattenList(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsfu1cgdo.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsfu1cgdo.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsfu1cgdo.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgw46t4ut.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgw46t4ut.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgw46t4ut.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123906,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_ko50ax4.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_ko50ax4.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_ko50ax4.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp41dlupk1.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp41dlupk1.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp41dlupk1.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85ob7urn.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85ob7urn.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85ob7urn.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case x : List[Any] => x.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz9er68wx.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz9er68wx.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz9er68wx.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var result = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    result = result ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                result = result ::: List(x)\n            }\n            case _ => {\n                throw new Exception(\"Invalid input\")\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpidxazz2r.scala:23:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpidxazz2r.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpidxazz2r.scala:25:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ++ flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n            case _ => {\n                println(\"Error\")\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi3yf7om5.scala:23:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi3yf7om5.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi3yf7om5.scala:25:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (elem <- list) {\n                    list2 = list2 ::: flattenList(elem)\n                }\n            }\n            case elem : Long => {\n                list2 = list2 ::: List(elem)\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123906,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmwq3_o36.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmwq3_o36.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmwq3_o36.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsgz2mkkl.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsgz2mkkl.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsgz2mkkl.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case l : List[Any] => {\n                for (item <- l) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case n : Long => {\n                list2 = list2 :+ n\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpakqye9rp.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpakqye9rp.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpakqye9rp.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case i : Int => list2 = list2 :+ i.toLong\n            case i : Long => list2 = list2 :+ i\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3ocj4ckq.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3ocj4ckq.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3ocj4ckq.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case x : Long => List(x)\n            case x : List[Any] => x.flatMap(flattenList)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7mitu3ab.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7mitu3ab.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7mitu3ab.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp92pck3t.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp92pck3t.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp92pck3t.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case x : Long => List(x)\n            case x : List[Any] => x.flatMap(flattenList)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpig9vve0x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpig9vve0x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpig9vve0x.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case i : Long => {\n                list2 = list2 :+ i\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4x9c99fj.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4x9c99fj.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4x9c99fj.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case num : Long => list2 = list2 :+ num\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphsvgjwuw.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphsvgjwuw.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphsvgjwuw.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfho5h79.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfho5h79.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfho5h79.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case l : List[Any] => l.flatMap(flattenList)\n            case l : Long => List(l)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9y3d5_4n.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9y3d5_4n.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9y3d5_4n.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf3wkq1wj.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf3wkq1wj.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf3wkq1wj.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8m3wqro1.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8m3wqro1.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8m3wqro1.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => for (i <- x) list2 = list2 ++ flattenList(i)\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfub4umol.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfub4umol.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfub4umol.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 ::: List(item)\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123901,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpldxr_51q.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpldxr_51q.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpldxr_51q.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case x : List[Any] => {\n                var list2 = List[Long]()\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n                list2\n            }\n            case x : Long => List(x)\n            case x : Int => List(x.toLong)\n            case x : Double => List(x.toLong)\n            case x : Float => List(x.toLong)\n            case x : String => List(x.toLong)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpovdjotki.scala:23:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpovdjotki.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpovdjotki.scala:25:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbx_klb6.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbx_klb6.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbx_klb6.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ++ flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuz6ays4j.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuz6ays4j.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuz6ays4j.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.map(flattenList).flatten\n            case n : Long => List(n)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy8u_03l2.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy8u_03l2.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy8u_03l2.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8m3wqro1.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8m3wqro1.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8m3wqro1.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaagm0oia.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaagm0oia.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaagm0oia.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case num : Long => List(num)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5syyqjoo.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5syyqjoo.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5syyqjoo.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case l : Long => {\n                list2 = list2 :+ l\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp33nx41ul.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp33nx41ul.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp33nx41ul.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.map(flattenList).flatten\n            case num : Long => List(num)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp596_kpcx.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp596_kpcx.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp596_kpcx.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case long : Long => {\n                list2 = list2 :+ long\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo45al77_.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo45al77_.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo45al77_.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : Long => x :: flattenList(xs)\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4t0o3s7s.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4t0o3s7s.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4t0o3s7s.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case (x : List[Any]) => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case (x : Long) => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpubjy64u7.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpubjy64u7.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpubjy64u7.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case num : Long => list2 = list2 :+ num\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiv5u9w21.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiv5u9w21.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiv5u9w21.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n                case x : Long => x :: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgz9llp1v.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgz9llp1v.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgz9llp1v.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case head :: tail => head match {\n                case x : Long => x :: flattenList(tail)\n                case x : List[Any] => flattenList(x) ::: flattenList(tail)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsfu1cgdo.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsfu1cgdo.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsfu1cgdo.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case x : Long => List(x)\n            case x : List[Any] => x.flatMap(flattenList)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpig9vve0x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpig9vve0x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpig9vve0x.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x => List(x.asInstanceOf[Long])\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123885,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7o6qpt6e.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7o6qpt6e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7o6qpt6e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case num : Long => List(num)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123886,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5syyqjoo.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5syyqjoo.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5syyqjoo.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => for (i <- x) list2 = list2 ::: flattenList(i)\n            case x : Long => list2 = list2 :+ x\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4tcpikof.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4tcpikof.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4tcpikof.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqwpk8gno.scala:9:28 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m x :: xs => x :: flattenList(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Found:    (x : Any)\n\u001b[31m  |\u001b[0m                            Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwpk8gno.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwpk8gno.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case long : Long => list2 = list2 :+ long\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk_adnhj1.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk_adnhj1.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk_adnhj1.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85ob7urn.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85ob7urn.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85ob7urn.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (elem <- list) {\n                    list2 = list2 ::: flattenList(elem)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123879,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpauspzzv9.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpauspzzv9.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpauspzzv9.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjts3b8uz.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjts3b8uz.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjts3b8uz.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case i : Int => list2 = list2 :+ i.toLong\n            case i : Long => list2 = list2 :+ i\n            case i : Double => list2 = list2 :+ i.toLong\n            case i : Float => list2 = list2 :+ i.toLong\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgi99iouf.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgi99iouf.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgi99iouf.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var result = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    result = result ::: flattenList(item)\n                }\n            }\n            case item : Long => result = result :+ item\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbbaj_kyo.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbbaj_kyo.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbbaj_kyo.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqwpk8gno.scala:9:28 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m x :: xs => x :: flattenList(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Found:    (x : Any)\n\u001b[31m  |\u001b[0m                            Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwpk8gno.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwpk8gno.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85ob7urn.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85ob7urn.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp85ob7urn.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : Int => list2 = list2 :+ x.toLong\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => list2 = list2 ++ flattenList(x)\n            case _ =>\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123911,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt0cip2jc.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt0cip2jc.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt0cip2jc.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = Nil\n        list1 match {\n            case Nil => list2\n            case x :: xs => list2 = list2 ::: List(x.asInstanceOf[Long]) ::: flattenList(xs)\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123911,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxpo02dgt.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxpo02dgt.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxpo02dgt.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x:List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510651,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn_nu6fkc.scala:9:28 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m x :: xs => x :: flattenList(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Found:    (x : Any)\n\u001b[31m  |\u001b[0m                            Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn_nu6fkc.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn_nu6fkc.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case long : Long => List(long)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2h9bb13t.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2h9bb13t.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2h9bb13t.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case x : Long => List(x)\n            case x : List[Any] => x.flatMap(flattenList)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpig9vve0x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpig9vve0x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpig9vve0x.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_t25txer.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_t25txer.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_t25txer.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n                case y : Long => y :: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp65b2rzgn.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp65b2rzgn.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp65b2rzgn.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x : Long => List(x)\n            case x : List[Any] => flattenList(x.head) ::: flattenList(x.tail)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyki82xhl.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyki82xhl.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyki82xhl.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case l : List[Any] => l.flatMap(flattenList)\n            case i : Long => List(i)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx4acc2vd.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx4acc2vd.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx4acc2vd.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => for (i <- list) list2 = list2 ::: flattenList(i)\n            case i : Long => list2 = list2 :+ i\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa9_pchpf.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa9_pchpf.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa9_pchpf.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => for (i <- x) list2 = list2 ::: flattenList(i)\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123911,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7uk6w176.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7uk6w176.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7uk6w176.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgfv7miwx.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgfv7miwx.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgfv7miwx.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case l : List[Any] => for (i <- l) list2 = list2 ::: flattenList(i)\n            case i : Int => list2 = list2 :+ i.toLong\n            case l : Long => list2 = list2 :+ l\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpenbgziqa.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpenbgziqa.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpenbgziqa.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqwpk8gno.scala:9:28 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m x :: xs => x :: flattenList(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Found:    (x : Any)\n\u001b[31m  |\u001b[0m                            Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwpk8gno.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwpk8gno.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case h :: t => h match {\n                case x: Long => x :: flattenList(t)\n                case x: List[Any] => flattenList(x) ::: flattenList(t)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg5kssqax.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg5kssqax.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg5kssqax.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxjg63q7.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123873,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpquvf1pnz.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => x.foreach(y => list2 = list2 ::: flattenList(y))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123911,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmgdttb07.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmgdttb07.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmgdttb07.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => {\n                var list2 = List[Long]()\n                for (x <- list) {\n                    list2 = list2 ::: flattenList(x)\n                }\n                list2\n            }\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplswuekdq.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplswuekdq.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplswuekdq.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123900,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk0csrc4r.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk0csrc4r.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk0csrc4r.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123892,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfho5h79.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfho5h79.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbfho5h79.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list1 : List[Any] => list1.flatMap(flattenList)\n            case num : Long => List(num)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwas9gmv9.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwas9gmv9.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwas9gmv9.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (head : List[Any]) :: tail => flattenList(head) ::: flattenList(tail)\n            case head :: tail => head :: flattenList(tail)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26sz5aay.scala:9:33 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m head :: tail => head :: flattenList(tail)\n\u001b[31m\u001b[31m  |\u001b[0m                                 ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                 Found:    (head : Any)\n\u001b[31m  |\u001b[0m                                 Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp26sz5aay.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp26sz5aay.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123887,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqwpk8gno.scala:9:28 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mcase\u001b[0m x :: xs => x :: flattenList(xs)\n\u001b[31m\u001b[31m  |\u001b[0m                            ^\u001b[0m\n\u001b[31m  |\u001b[0m                            Found:    (x : Any)\n\u001b[31m  |\u001b[0m                            Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwpk8gno.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqwpk8gno.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocjywfw3.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocjywfw3.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocjywfw3.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case num : Long => List(num)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi92ws0lu.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi92ws0lu.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi92ws0lu.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfeehea7e.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510650,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv1codrjh.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 ::: List(x)\n            }\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqk8hts7c.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqk8hts7c.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqk8hts7c.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n            case _ => {\n                // Do nothing\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz5puha73.scala:23:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz5puha73.scala:24:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz5puha73.scala:25:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:12:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:13:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpevfczy6x.scala:14:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzyhn5qli.scala:18:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzyhn5qli.scala:19:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzyhn5qli.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510649,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocjywfw3.scala:15:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocjywfw3.scala:16:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpocjywfw3.scala:17:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123907,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsgz2mkkl.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsgz2mkkl.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsgz2mkkl.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case n : Long => {\n                list2 = list2 :+ n\n            }\n        }\n        return list2\n    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123912,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6go1cgct.scala:20:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(flattenList((Any(\u001b[31m0l\u001b[0m, \u001b[31m10l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong), \u001b[31m40l\u001b[0m, \u001b[31m50l\u001b[0m, List[\u001b[35mLong\u001b[0m](\u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m0l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m50l\u001b[0m.toLong, \u001b[31m60l\u001b[0m.toLong, \u001b[31m70l\u001b[0m.toLong, \u001b[31m80l\u001b[0m.toLong, \u001b[31m90l\u001b[0m.toLong, \u001b[31m100l\u001b[0m.toLong, \u001b[31m110l\u001b[0m.toLong, \u001b[31m120l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6go1cgct.scala:21:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m33l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m40l\u001b[0m.toLong)))).equals((List[\u001b[35mLong\u001b[0m](\u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong, \u001b[31m30l\u001b[0m.toLong, \u001b[31m56l\u001b[0m.toLong, \u001b[31m25l\u001b[0m.toLong, \u001b[31m10l\u001b[0m.toLong, \u001b[31m20l\u001b[0m.toLong, \u001b[31m33l\u001b[0m.toLong, \u001b[31m40l\u001b[0m.toLong))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6go1cgct.scala:22:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(flattenList((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}