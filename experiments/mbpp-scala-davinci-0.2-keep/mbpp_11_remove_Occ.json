{
  "name": "mbpp_11_remove_Occ",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val l = s.length\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) return s\n        if (first == last) return s.substring(0, first) + s.substring(first + 1, l)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1, l)",
    "        var i = 0\n        var j = s.length - 1\n        var flag = false\n        while (i < s.length && s(i) != ch(0)) {\n            i += 1\n        }\n        while (j >= 0 && s(j) != ch(0)) {\n            j -= 1\n        }\n        if (i < j) {\n            s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)\n        } else {\n            s\n        }",
    "        if (s.length == 0) return \"\"\n        if (s.head == ch.head) return removeOcc(s.tail, ch)\n        if (s.last == ch.head) return removeOcc(s.init, ch)\n        s.head + removeOcc(s.tail, ch)",
    "        if (s.length == 0) return \"\"\n        if (s.head == ch.head) return s.tail.reverse.tail.reverse\n        s.head + removeOcc(s.tail, ch)",
    "        val i = s.indexOf(ch)\n        val j = s.lastIndexOf(ch)\n        if (i == -1) return s\n        if (i == j) return s.substring(0, i) + s.substring(i + 1)\n        s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        val index = s.indexOf(ch)\n        if (index == -1) return s\n        s.substring(0, index) + s.substring(index + 1, s.length)",
    "        var i = 0\n        var j = s.length - 1\n        while (i < s.length && s(i) != ch(0)) i += 1\n        while (j >= 0 && s(j) != ch(0)) j -= 1\n        if (i == s.length || j == -1) return s\n        return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        var sb = new StringBuilder\n        var flag = false\n        for (i <- 0 until s.length) {\n            if (s(i) == ch(0)) {\n                if (flag) {\n                    sb.append(s(i))\n                }\n                else {\n                    flag = true\n                }\n            }\n            else {\n                sb.append(s(i))\n            }\n        }\n        return sb.toString",
    "        var i = s.indexOf(ch)\n        var j = s.lastIndexOf(ch)\n        if (i == -1) return s\n        if (i == j) return s.substring(0, i) + s.substring(i + 1)\n        return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        var result = s\n        var index = result.indexOf(ch)\n        if (index != -1) {\n            result = result.substring(0, index) + result.substring(index + 1)\n        }\n        index = result.lastIndexOf(ch)\n        if (index != -1) {\n            result = result.substring(0, index) + result.substring(index + 1)\n        }\n        result",
    "        val i = s.indexOf(ch)\n        val j = s.lastIndexOf(ch)\n        if (i == j) s.substring(0, i) + s.substring(i + 1)\n        else s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        val i = s.indexOf(ch)\n        val j = s.lastIndexOf(ch)\n        if (i == -1) s\n        else if (i == j) s.substring(0, i) + s.substring(i + 1)\n        else s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        var res = s\n        if (s.indexOf(ch) != -1) {\n            res = s.substring(0, s.indexOf(ch)) + s.substring(s.indexOf(ch) + 1)\n        }\n        if (res.lastIndexOf(ch) != -1) {\n            res = res.substring(0, res.lastIndexOf(ch)) + res.substring(res.lastIndexOf(ch) + 1)\n        }\n        res",
    "        s.replaceFirst(ch, \"\").reverse.replaceFirst(ch, \"\").reverse",
    "        val i = s.indexOf(ch)\n        val j = s.lastIndexOf(ch)\n        if (i == -1) s\n        else if (i == j) s.substring(0, i) + s.substring(i + 1)\n        else s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) {\n            return s\n        }\n        if (index == lastIndex) {\n            return s.substring(0, index) + s.substring(index + 1)\n        }\n        return s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        var sb = new StringBuilder()\n        var first = true\n        for (c <- s) {\n            if (c.toString != ch) {\n                sb.append(c)\n            } else {\n                if (first) {\n                    first = false\n                } else {\n                    sb.append(c)\n                }\n            }\n        }\n        return sb.toString",
    "        val index = s.indexOf(ch)\n        if (index == -1) s\n        else s.substring(0, index) + s.substring(index + 1, s.length)",
    "        var result = s\n        result = result.replaceFirst(ch, \"\")\n        result = result.reverse.replaceFirst(ch, \"\").reverse\n        return result",
    "        val index = s.indexOf(ch)\n        if (index == -1) s\n        else {\n            val index2 = s.lastIndexOf(ch)\n            s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)\n        }",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) return s\n        if (index == 0) return s.substring(1, s.length)\n        if (lastIndex == s.length - 1) return s.substring(0, s.length - 1)\n        s.substring(0, index) + s.substring(index + 1, s.length)",
    "        var res = s\n        if (s.contains(ch)) {\n            res = s.substring(0, s.indexOf(ch)) + s.substring(s.indexOf(ch) + 1)\n            res = res.substring(0, res.lastIndexOf(ch)) + res.substring(res.lastIndexOf(ch) + 1)\n        }\n        return res",
    "        var str = s\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ch(0)) {\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n            i += 1\n        }\n        str",
    "        val index = s.indexOf(ch)\n        if (index == -1) return s\n        val index2 = s.lastIndexOf(ch)\n        if (index == index2) return s.substring(0, index) + s.substring(index + 1)\n        s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)",
    "        if (s.length == 0) return s\n        if (s.charAt(0) == ch.charAt(0)) return removeOcc(s.substring(1), ch)\n        if (s.charAt(s.length - 1) == ch.charAt(0)) return removeOcc(s.substring(0, s.length - 1), ch)\n        s.charAt(0) + removeOcc(s.substring(1, s.length - 1), ch) + s.charAt(s.length - 1)",
    "        var result = s\n        if (s.contains(ch)) {\n            result = s.substring(0, s.indexOf(ch)) + s.substring(s.indexOf(ch) + 1, s.length)\n            result = result.substring(0, result.lastIndexOf(ch)) + result.substring(result.lastIndexOf(ch) + 1, result.length)\n        }\n        result",
    "        var i = s.indexOf(ch)\n        var j = s.lastIndexOf(ch)\n        if (i == -1 || j == -1) return s\n        return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        if (s.length == 0) return s\n        if (s.charAt(0) == ch.charAt(0)) return removeOcc(s.substring(1), ch)\n        if (s.charAt(s.length - 1) == ch.charAt(0)) return removeOcc(s.substring(0, s.length - 1), ch)\n        s.charAt(0) + removeOcc(s.substring(1, s.length - 1), ch) + s.charAt(s.length - 1)",
    "        var i = s.indexOf(ch)\n        var j = s.lastIndexOf(ch)\n        if (i == -1) return s\n        if (i == j) return s.substring(0, i) + s.substring(i + 1)\n        return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) return s\n        if (index == lastIndex) return s.substring(0, index) + s.substring(index + 1)\n        s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) return s\n        if (index == lastIndex) return s.substring(0, index) + s.substring(index + 1)\n        s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) return s\n        if (index == lastIndex) return s.substring(0, index) + s.substring(index + 1)\n        s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) return s\n        if (first == last) return s.substring(0, first) + s.substring(first + 1)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        var result = s\n        if (s.contains(ch)) {\n            result = s.replaceFirst(ch, \"\")\n            result = result.replaceFirst(ch, \"\")\n        }\n        result",
    "        var sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (s(i) != ch(0)) sb.append(s(i))\n        }\n        sb.toString.substring(1, sb.toString.length - 1)",
    "        s.replaceAll(ch, \"\").replaceAll(ch, \"\")",
    "        var i = 0\n        var j = s.length - 1\n        var flag = false\n        var flag2 = false\n        while (i < s.length && s(i) != ch(0)) {\n            i += 1\n        }\n        while (j >= 0 && s(j) != ch(0)) {\n            j -= 1\n        }\n        if (i == s.length) {\n            return s\n        }\n        else if (j == -1) {\n            return s\n        }\n        else {\n            return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)\n        }",
    "        var result = s\n        var index = s.indexOf(ch)\n        if (index != -1) {\n            result = s.substring(0, index) + s.substring(index + 1)\n        }\n        index = result.lastIndexOf(ch)\n        if (index != -1) {\n            result = result.substring(0, index) + result.substring(index + 1)\n        }\n        return result",
    "        if (s.length == 0) return \"\"\n        if (s.head == ch.head) return s.tail.reverse.tail.reverse\n        s.head + removeOcc(s.tail, ch)",
    "        if (s.length == 0) return \"\"\n        if (s.length == 1) return if (s(0) == ch(0)) \"\" else s\n        if (s(0) == ch(0)) return removeOcc(s.substring(1), ch)\n        if (s(s.length - 1) == ch(0)) return removeOcc(s.substring(0, s.length - 1), ch)\n        s(0) + removeOcc(s.substring(1, s.length - 1), ch) + s(s.length - 1)",
    "        if (s.length == 0) return \"\"\n        if (s.head == ch.head) return removeOcc(s.tail, ch)\n        if (s.last == ch.head) return removeOcc(s.init, ch)\n        s.head + removeOcc(s.tail, ch)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        var result = s\n        if (s.contains(ch)) {\n            result = s.substring(0, s.indexOf(ch)) + s.substring(s.indexOf(ch) + 1, s.length)\n            result = result.substring(0, result.lastIndexOf(ch)) + result.substring(result.lastIndexOf(ch) + 1, result.length)\n        }\n        result",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1 || lastIndex == -1) return s\n        s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val idx = s.indexOf(ch)\n        if (idx == -1) return s\n        val idx2 = s.lastIndexOf(ch)\n        s.substring(0, idx) + s.substring(idx + 1, idx2) + s.substring(idx2 + 1)",
    "        s.replaceFirst(ch, \"\").replaceAll(ch, \"\")",
    "        val i = s.indexOf(ch)\n        val j = s.lastIndexOf(ch)\n        if (i == -1) s\n        else if (i == j) s.substring(0, i) + s.substring(i + 1)\n        else s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) return s\n        if (first == last) return s.substring(0, first) + s.substring(first + 1)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        var str = s\n        if (str.indexOf(ch) != -1) {\n            str = str.substring(0, str.indexOf(ch)) + str.substring(str.indexOf(ch) + 1)\n        }\n        if (str.lastIndexOf(ch) != -1) {\n            str = str.substring(0, str.lastIndexOf(ch)) + str.substring(str.lastIndexOf(ch) + 1)\n        }\n        return str",
    "        var i = s.indexOf(ch)\n        var j = s.lastIndexOf(ch)\n        if (i == -1) return s\n        if (i == j) return s.substring(0, i) + s.substring(i + 1)\n        return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        var i = s.indexOf(ch)\n        var j = s.lastIndexOf(ch)\n        if (i == -1) return s\n        if (i == j) return s.substring(0, i) + s.substring(i + 1)\n        return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        var sb = new StringBuilder\n        var i = 0\n        while (i < s.length) {\n            if (s(i) != ch(0)) sb.append(s(i))\n            i += 1\n        }\n        return sb.toString",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) return s\n        if (index == lastIndex) return s.substring(0, index) + s.substring(index + 1)\n        return s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val indexOfFirst = s.indexOf(ch)\n        val indexOfLast = s.lastIndexOf(ch)\n        if (indexOfFirst == -1 || indexOfLast == -1) return s\n        s.substring(0, indexOfFirst) + s.substring(indexOfFirst + 1, indexOfLast) + s.substring(indexOfLast + 1)",
    "        if (s.length == 0) return \"\"\n        if (s.charAt(0) == ch.charAt(0)) return removeOcc(s.substring(1), ch)\n        if (s.charAt(s.length - 1) == ch.charAt(0)) return removeOcc(s.substring(0, s.length - 1), ch)\n        return s.charAt(0) + removeOcc(s.substring(1, s.length - 1), ch) + s.charAt(s.length - 1)",
    "        val index = s.indexOf(ch)\n        val index2 = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == index2) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)",
    "        var sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (s(i) != ch(0)) sb.append(s(i))\n        }\n        return sb.toString",
    "        var result = \"\"\n        var first = true\n        for (i <- 0 until s.length) {\n            if (s(i) != ch(0)) {\n                result += s(i)\n            } else if (first) {\n                first = false\n            } else {\n                result += s(i)\n            }\n        }\n        return result",
    "        val i = s.indexOf(ch)\n        val j = s.lastIndexOf(ch)\n        if (i == -1 || j == -1) return s\n        s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        if (s.length == 0) return \"\"\n        if (s.head == ch.head) return removeOcc(s.tail, ch)\n        if (s.last == ch.head) return removeOcc(s.init, ch)\n        s.head + removeOcc(s.tail, ch)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) return s\n        if (first == last) return s.substring(0, first) + s.substring(first + 1)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val index = s.indexOf(ch)\n        if (index == -1) s\n        else {\n            val index2 = s.lastIndexOf(ch)\n            s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)\n        }",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val index = s.indexOf(ch)\n        val index2 = s.lastIndexOf(ch)\n        if (index == -1) {\n            return s\n        }\n        if (index == index2) {\n            return s.substring(0, index) + s.substring(index + 1)\n        }\n        s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val index = s.indexOf(ch)\n        if (index == -1) s\n        else {\n            val index2 = s.lastIndexOf(ch)\n            if (index == index2) s.substring(0, index) + s.substring(index + 1)\n            else s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)\n        }",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == last) s.replace(ch, \"\")\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        var sb = new StringBuilder\n        var i = 0\n        var first = true\n        while (i < s.length) {\n            if (s(i) == ch(0)) {\n                if (first) {\n                    first = false\n                } else {\n                    sb.append(s(i))\n                }\n            } else {\n                sb.append(s(i))\n            }\n            i += 1\n        }\n        sb.toString",
    "        var result = s\n        if (s.contains(ch)) {\n            result = s.substring(0, s.indexOf(ch)) + s.substring(s.indexOf(ch) + 1)\n            result = result.substring(0, result.lastIndexOf(ch)) + result.substring(result.lastIndexOf(ch) + 1)\n        }\n        result",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        s.replaceFirst(ch, \"\").replaceFirst(ch, \"\")",
    "        s.replaceFirst(ch, \"\").replaceFirst(ch, \"\")",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        var x = s.indexOf(ch)\n        var y = s.lastIndexOf(ch)\n        if (x == -1) return s\n        if (x == y) return s.substring(0, x) + s.substring(x + 1)\n        return s.substring(0, x) + s.substring(x + 1, y) + s.substring(y + 1)",
    "        var result = s\n        var index = result.indexOf(ch)\n        if (index != -1) {\n            result = result.substring(0, index) + result.substring(index + 1)\n        }\n        index = result.lastIndexOf(ch)\n        if (index != -1) {\n            result = result.substring(0, index) + result.substring(index + 1)\n        }\n        result",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        s.replaceFirst(ch, \"\").reverse.replaceFirst(ch, \"\").reverse",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        return s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) s\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        var result = \"\"\n        var first = true\n        for (c <- s) {\n            if (c.toString != ch || first) {\n                result += c\n                first = false\n            }\n        }\n        result.dropRight(1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        var i = s.indexOf(ch)\n        var j = s.lastIndexOf(ch)\n        if (i == -1 || j == -1) return s\n        else return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        var i = s.indexOf(ch)\n        var j = s.lastIndexOf(ch)\n        if (i == -1) return s\n        if (i == j) return s.substring(0, i) + s.substring(i + 1)\n        return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        var result = s\n        var index = result.indexOf(ch)\n        if (index != -1) {\n            result = result.substring(0, index) + result.substring(index + 1)\n        }\n        index = result.lastIndexOf(ch)\n        if (index != -1) {\n            result = result.substring(0, index) + result.substring(index + 1)\n        }\n        result",
    "        if (s.length == 0) return \"\"\n        if (s.charAt(0) == ch.charAt(0)) return removeOcc(s.substring(1), ch)\n        if (s.charAt(s.length - 1) == ch.charAt(0)) return removeOcc(s.substring(0, s.length - 1), ch)\n        s.charAt(0) + removeOcc(s.substring(1, s.length - 1), ch)",
    "        var sb = new StringBuilder\n        var i = 0\n        var first = true\n        var last = false\n        while (i < s.length) {\n            if (s(i) == ch(0) && first) {\n                first = false\n                i += 1\n            }\n            else if (s(i) == ch(0) && !first) {\n                last = true\n                i += 1\n            }\n            else if (s(i) != ch(0) && last) {\n                sb.append(s(i))\n                i += 1\n            }\n            else {\n                sb.append(s(i))\n                i += 1\n            }\n        }\n        sb.toString",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        s.replaceFirst(ch, \"\").reverse.replaceFirst(ch, \"\").reverse",
    "        if (s.length == 0) return s\n        if (s.charAt(0) == ch.charAt(0)) return removeOcc(s.substring(1), ch)\n        if (s.charAt(s.length - 1) == ch.charAt(0)) return removeOcc(s.substring(0, s.length - 1), ch)\n        return s.charAt(0) + removeOcc(s.substring(1, s.length - 1), ch) + s.charAt(s.length - 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        var sb = new StringBuilder()\n        var first = true\n        for (i <- 0 until s.length) {\n            if (s(i) == ch(0)) {\n                if (first) {\n                    first = false\n                } else {\n                    sb.append(ch)\n                }\n            } else {\n                sb.append(s(i))\n            }\n        }\n        sb.toString",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val index = s.indexOf(ch)\n        if (index == -1) s\n        else s.substring(0, index) + s.substring(index + 1, s.length)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) return s\n        if (index == lastIndex) return s.substring(0, index) + s.substring(index + 1)\n        s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        if (first == last) return s.substring(0, first) + s.substring(first + 1)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val i = s.indexOf(ch)\n        val j = s.lastIndexOf(ch)\n        if (i == -1 || j == -1) return s\n        s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        var i = 0\n        var j = s.length - 1\n        while (i < s.length && s(i) != ch(0)) i += 1\n        while (j >= 0 && s(j) != ch(0)) j -= 1\n        if (i == s.length || j == -1) return s\n        return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        if (s.length == 0) return \"\"\n        if (s.head == ch(0)) return removeOcc(s.tail, ch)\n        if (s.last == ch(0)) return removeOcc(s.init, ch)\n        return s.head + removeOcc(s.tail, ch)",
    "        val index = s.indexOf(ch)\n        if (index == -1) s\n        else {\n            val index2 = s.lastIndexOf(ch)\n            val s1 = s.substring(0, index)\n            val s2 = s.substring(index + 1, index2)\n            val s3 = s.substring(index2 + 1)\n            s1 + s2 + s3\n        }",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val index = s.indexOf(ch)\n        if (index == -1) return s\n        val index2 = s.lastIndexOf(ch)\n        if (index2 == -1) return s\n        s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)",
    "        var result = \"\"\n        var first = true\n        for (i <- 0 until s.length) {\n            if (s(i) != ch(0)) {\n                result += s(i)\n            } else if (first) {\n                first = false\n            } else {\n                result += s(i)\n            }\n        }\n        result",
    "        val index = s.indexOf(ch)\n        if (index == -1) return s\n        val index2 = s.lastIndexOf(ch)\n        if (index2 == -1) return s\n        s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val i = s.indexOf(ch)\n        val j = s.lastIndexOf(ch)\n        if (i == -1) s\n        else if (i == j) s.substring(0, i) + s.substring(i + 1)\n        else s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        val sb = new StringBuilder\n        var i = 0\n        var first = true\n        while (i < s.length) {\n            if (s(i) == ch(0) && first) {\n                first = false\n            } else {\n                sb.append(s(i))\n            }\n            i += 1\n        }\n        sb.toString.reverse.replaceFirst(ch, \"\").reverse",
    "        s.replaceFirst(ch, \"\").reverse.replaceFirst(ch, \"\").reverse",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val ind = s.indexOf(ch)\n        if (ind == -1) return s\n        val ind2 = s.lastIndexOf(ch)\n        if (ind == ind2) return s.substring(0, ind) + s.substring(ind + 1)\n        s.substring(0, ind) + s.substring(ind + 1, ind2) + s.substring(ind2 + 1)",
    "        var result = s.replaceFirst(ch, \"\")\n        result = result.reverse.replaceFirst(ch, \"\").reverse\n        return result",
    "        val i = s.indexOf(ch)\n        val j = s.lastIndexOf(ch)\n        s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) return s\n        if (first == last) return s.substring(0, first) + s.substring(first + 1)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        var i = s.indexOf(ch)\n        var j = s.lastIndexOf(ch)\n        if (i == -1) return s\n        if (i == j) return s.substring(0, i) + s.substring(i + 1)\n        return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1 || lastIndex == -1) return s\n        val first = s.substring(0, index)\n        val last = s.substring(lastIndex + 1)\n        return first + last",
    "        val index = s.indexOf(ch)\n        val index2 = s.lastIndexOf(ch)\n        if (index == -1) return s\n        else if (index == index2) return s.substring(0, index) + s.substring(index + 1)\n        else return s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) return s\n        if (index == lastIndex) return s.substring(0, index) + s.substring(index + 1)\n        return s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) return s\n        if (first == last) return s.substring(0, first) + s.substring(first + 1)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        var str = s\n        if (str.contains(ch)) {\n            str = str.replaceFirst(ch, \"\")\n            str = str.reverse.replaceFirst(ch, \"\").reverse\n        }\n        str",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        if (s.length == 0) \"\"\n        else if (s.head.toString == ch) removeOcc(s.tail, ch)\n        else if (s.last.toString == ch) removeOcc(s.init, ch)\n        else s",
    "        val index = s.indexOf(ch)\n        if (index == -1) s\n        else s.substring(0, index) + s.substring(index + 1, s.length)",
    "        var res = s\n        var i = 0\n        while (i < res.length) {\n            if (res(i) == ch(0)) {\n                res = res.substring(0, i) + res.substring(i + 1)\n                i -= 1\n            }\n            i += 1\n        }\n        i = res.length - 1\n        while (i >= 0) {\n            if (res(i) == ch(0)) {\n                res = res.substring(0, i) + res.substring(i + 1)\n                i += 1\n            }\n            i -= 1\n        }\n        res",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == last) s.replace(ch, \"\")\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) return s\n        if (index == lastIndex) return s.substring(0, index) + s.substring(index + 1)\n        s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        var result = \"\"\n        var first = true\n        for (i <- 0 until s.length) {\n            if (s(i) == ch(0) && first) {\n                first = false\n            } else {\n                result += s(i)\n            }\n        }\n        result.substring(0, result.length - 1)",
    "        if (s.length == 0) return \"\"\n        if (s.head == ch.head) return removeOcc(s.tail, ch)\n        if (s.last == ch.head) return removeOcc(s.init, ch)\n        s.head + removeOcc(s.tail, ch)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) {\n            return s\n        }\n        return s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val index = s.indexOf(ch)\n        val index2 = s.lastIndexOf(ch)\n        if (index == -1 || index2 == -1) return s\n        s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)",
    "        var str = s\n        str = str.replaceFirst(ch, \"\")\n        str = str.substring(0, str.lastIndexOf(ch)) + str.substring(str.lastIndexOf(ch) + 1)\n        return str",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val index = s.indexOf(ch)\n        if (index == -1) s\n        else {\n            val index2 = s.lastIndexOf(ch)\n            if (index2 == -1) s\n            else s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)\n        }",
    "        s.replaceFirst(ch, \"\").reverse.replaceFirst(ch, \"\").reverse",
    "        val index = s.indexOf(ch)\n        if (index == -1) s\n        else s.substring(0, index) + s.substring(index + 1, s.length)",
    "        var str = s\n        var index = str.indexOf(ch)\n        while (index != -1) {\n            str = str.substring(0, index) + str.substring(index + 1)\n            index = str.indexOf(ch)\n        }\n        str",
    "        val index = s.indexOf(ch)\n        if (index == -1) return s\n        val index2 = s.lastIndexOf(ch)\n        if (index == index2) return s.substring(0, index) + s.substring(index + 1)\n        s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)",
    "        var result = s\n        var index = result.indexOf(ch)\n        if (index != -1) {\n            result = result.substring(0, index) + result.substring(index + 1)\n        }\n        index = result.lastIndexOf(ch)\n        if (index != -1) {\n            result = result.substring(0, index) + result.substring(index + 1)\n        }\n        result",
    "        val index = s.indexOf(ch)\n        if (index == -1) s\n        else s.substring(0, index) + s.substring(index + 1, s.length)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        var sb = new StringBuilder\n        var i = 0\n        while (i < s.length) {\n            if (s(i) != ch(0)) sb += s(i)\n            i += 1\n        }\n        sb.toString",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        var result = \"\"\n        var first = true\n        for (i <- 0 until s.length) {\n            if (s(i) != ch(0)) {\n                result += s(i)\n            } else if (first) {\n                first = false\n            } else {\n                result += s(i)\n            }\n        }\n        result",
    "        val i = s.indexOf(ch)\n        val j = s.lastIndexOf(ch)\n        if (i == -1) s\n        else if (i == j) s.substring(0, i) + s.substring(i + 1)\n        else s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        s.replaceFirst(ch, \"\").reverse.replaceFirst(ch, \"\").reverse",
    "        if (s.length == 0) return \"\"\n        if (s.charAt(0) == ch.charAt(0)) return removeOcc(s.substring(1), ch)\n        if (s.charAt(s.length - 1) == ch.charAt(0)) return removeOcc(s.substring(0, s.length - 1), ch)\n        s.charAt(0) + removeOcc(s.substring(1, s.length - 1), ch)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == last) {\n            s.substring(0, first) + s.substring(first + 1)\n        } else {\n            s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n        }",
    "        val i = s.indexOf(ch)\n        val j = s.lastIndexOf(ch)\n        if (i == -1) s\n        else if (i == j) s.substring(0, i) + s.substring(i + 1)\n        else s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) return s\n        if (first == last) return s.substring(0, first) + s.substring(first + 1)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        s.replaceFirst(ch, \"\").reverse.replaceFirst(ch, \"\").reverse",
    "        var sb = new StringBuilder\n        var i = 0\n        while (i < s.length) {\n            if (s(i) != ch(0)) sb.append(s(i))\n            i += 1\n        }\n        sb.toString",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) return s\n        if (first == last) return s.substring(0, first) + s.substring(first + 1)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == last) s.replace(ch, \"\")\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        val sb = new StringBuilder(s)\n        sb.deleteCharAt(last)\n        sb.deleteCharAt(first)\n        sb.toString",
    "        val index = s.indexOf(ch)\n        val index2 = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == index2) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)",
    "        val i = s.indexOf(ch)\n        val j = s.lastIndexOf(ch)\n        if (i == -1) return s\n        if (i == j) return s.substring(0, i) + s.substring(i + 1)\n        s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        val index = s.indexOf(ch)\n        if (index == -1) s\n        else s.substring(0, index) + s.substring(index + 1, s.length)",
    "        var sb = new StringBuilder\n        var i = 0\n        while (i < s.length) {\n            if (s(i) != ch(0)) sb.append(s(i))\n            i += 1\n        }\n        sb.toString",
    "        var sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (s(i) != ch(0)) sb.append(s(i))\n        }\n        sb.toString",
    "        val i = s.indexOf(ch)\n        val j = s.lastIndexOf(ch)\n        if (i == -1) s\n        else if (i == j) s.substring(0, i) + s.substring(i + 1)\n        else s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        if (s.length == 0) return \"\"\n        if (s.charAt(0) == ch.charAt(0)) return removeOcc(s.substring(1), ch)\n        if (s.charAt(s.length - 1) == ch.charAt(0)) return removeOcc(s.substring(0, s.length - 1), ch)\n        s.charAt(0) + removeOcc(s.substring(1, s.length - 1), ch)",
    "        val index = s.indexOf(ch)\n        val index2 = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == index2) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)",
    "        var sb = new StringBuilder(s)\n        var i = 0\n        while (i < sb.length) {\n            if (sb(i) == ch(0)) {\n                sb.deleteCharAt(i)\n                i -= 1\n            }\n            i += 1\n        }\n        sb.toString",
    "        s.replaceFirst(ch, \"\").reverse.replaceFirst(ch, \"\").reverse",
    "        var result = \"\"\n        var first = true\n        for (i <- 0 until s.length) {\n            if (s(i) != ch(0)) {\n                result += s(i)\n            } else {\n                if (first) {\n                    first = false\n                } else {\n                    result += s(i)\n                }\n            }\n        }\n        return result",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        var i = s.indexOf(ch)\n        var j = s.lastIndexOf(ch)\n        if (i == -1) return s\n        if (i == j) return s.substring(0, i) + s.substring(i + 1)\n        return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)",
    "        val index = s.indexOf(ch)\n        if (index == -1) s\n        else s.substring(0, index) + s.substring(index + 1, s.length)",
    "        val ind = s.indexOf(ch)\n        val ind2 = s.lastIndexOf(ch)\n        if (ind == -1) s\n        else if (ind == ind2) s.substring(0, ind) + s.substring(ind + 1)\n        else s.substring(0, ind) + s.substring(ind + 1, ind2) + s.substring(ind2 + 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        s.replaceFirst(ch, \"\").replaceFirst(ch, \"\")",
    "        var result = \"\"\n        var first = true\n        for (c <- s) {\n            if (c.toString != ch || first) {\n                result += c\n                first = false\n            }\n        }\n        result.dropRight(1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        val index = s.indexOf(ch)\n        val index2 = s.lastIndexOf(ch)\n        if (index == -1) return s\n        if (index == index2) return s.substring(0, index) + s.substring(index + 1)\n        s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)",
    "        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1 || lastIndex == -1) return s\n        val s1 = s.substring(0, index)\n        val s2 = s.substring(index + 1, lastIndex)\n        val s3 = s.substring(lastIndex + 1)\n        s1 + s2 + s3",
    "        val index = s.indexOf(ch)\n        if (index == -1) return s\n        val index2 = s.lastIndexOf(ch)\n        if (index == index2) return s.substring(0, index) + s.substring(index + 1)\n        s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)",
    "        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)",
    "        if (s.length == 0) return \"\"\n        if (s.length == 1) return if (s == ch) \"\" else s\n        if (s.head == ch) return removeOcc(s.tail, ch)\n        if (s.last == ch) return removeOcc(s.init, ch)\n        s.head + removeOcc(s.tail, ch)",
    "        var result = s.replaceFirst(ch, \"\")\n        result = result.reverse.replaceFirst(ch, \"\").reverse\n        return result",
    "        val index = s.indexOf(ch)\n        if (index == -1) s\n        else s.substring(0, index) + s.substring(index + 1, s.length)"
  ]
}