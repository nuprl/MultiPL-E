{
  "name": "mbpp_67_bell_number",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the number of ways to partition a set of Bell numbers.\n    def bellNumber(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(bellNumber((2l)) == (2l));\n    assert(bellNumber((10l)) == (115975l));\n    assert(bellNumber((56l)) == (6775685320645824322581483068371419745979053216268760300l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n        }\n        bell(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        var bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += bell(j) * bell(i - j - 1)\n            }\n            bell(i) = sum\n        }\n        bell(n.toInt)",
    "        var dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val cache = Array.fill(n.toInt + 1)(0L)\n        cache(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += cache(j) * cache(i - 1 - j)\n            }\n            cache(i) = sum\n        }\n        cache(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(i - 1)\n            for (j <- 1 to i) dp(i)(j) = dp(i - 1)(j - 1) + dp(i)(j - 1)\n        }\n        dp(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        var dp = new Array[Long](n.toInt + 1)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        val bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i) = 0\n            for (j <- 0 until i) {\n                bell(i) += bell(j) * bell(i - j - 1)\n            }\n        }\n        bell(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        def bellNumber(n : Long, m : Long) : Long = {\n            if (n == 0) 1\n            else if (m == 0) 0\n            else bellNumber(n, m - 1) + bellNumber(n - m, m)\n        }\n        bellNumber(n, n)",
    "        var dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        var bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += bell(j) * bell(i - 1 - j)\n            }\n            bell(i) = sum\n        }\n        bell(n.toInt)",
    "        if (n == 0) return 1\n        var bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i) = (i - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 1\n        var sum = 0L\n        for (i <- 0 to n - 1) {\n            sum += bellNumber(i) * bellNumber(n - i - 1)\n        }\n        return sum",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var s = 0L\n            for (j <- 0 to i - 1) {\n                s += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = s\n        }\n        dp(n.toInt)",
    "        var dp = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                dp(i)(j) = dp(i - 1)(j - 1) + dp(i)(j - 1)\n            }\n        }\n        dp(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i) = (0 to i - 1).map(k => bell(k) * bell(i - 1 - k)).sum\n        }\n        bell(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        var dp = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            dp(i)(0) = 1\n            dp(i)(i) = 1\n        }\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to i - 1) {\n                dp(i)(j) = dp(i - 1)(j - 1) + dp(i - 1)(j) * j\n            }\n        }\n        dp(n.toInt)(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        var bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += bell(j) * bell(i - j - 1)\n            }\n            bell(i) = sum\n        }\n        bell(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) sum += dp(j) * dp(i - 1 - j)\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i) = (i - 1 to 0 by -1).map(j => dp(j) * dp(i - 1 - j)).sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i) = (i - 1 to 0 by -1).map(j => dp(j) * dp(i - 1 - j)).sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) sum += dp(j) * dp(i - 1 - j)\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        var bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += bell(j) * bell(i - j - 1)\n            }\n            bell(i) = sum\n        }\n        bell(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        var dp = Array.ofDim[Long](n + 1, n + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n) {\n            dp(i)(0) = dp(i - 1)(i - 1)\n            for (j <- 1 to i) dp(i)(j) = dp(i)(j - 1) + dp(i - 1)(j - 1)\n        }\n        dp(n)(0)",
    "        val bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += bell(j) * bell(i - 1 - j)\n            }\n            bell(i) = sum\n        }\n        bell(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val b = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        b(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            b(i)(0) = b(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                b(i)(j) = b(i - 1)(j - 1) + b(i)(j - 1)\n            }\n        }\n        b(n.toInt)(0)",
    "        val bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += bell(j) * bell(i - 1 - j)\n            }\n            bell(i) = sum\n        }\n        bell(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) sum += dp(j) * dp(i - 1 - j)\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i) = dp(i - 1) * (n - i + 1) / i\n        }\n        dp(n.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                dp(i)(j) = dp(i - 1)(j - 1) + dp(i)(j - 1)\n            }\n        }\n        dp(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        var b = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        b(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            b(i)(0) = b(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                b(i)(j) = b(i - 1)(j - 1) + b(i)(j - 1)\n            }\n        }\n        b(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += bell(j) * bell(i - 1 - j)\n            }\n            bell(i) = sum\n        }\n        bell(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        var dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i) = (0 until i).map(k => bell(k) * bell(i - 1 - k)).sum\n        }\n        bell(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i) = dp(i - 1) * (i - 1) + dp(i - 1)\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i) = dp(i - 1) * i\n            for (j <- i - 1 to 1 by -1) {\n                dp(j) += dp(j - 1)\n            }\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += bell(j) * bell(i - 1 - j)\n            }\n            bell(i) = sum\n        }\n        bell(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i) = (0 until i).map(j => bell(j) * bell(i - j - 1)).sum\n        }\n        bell(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        val dp = Array.fill(n + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        def bellNumber(n : Long, m : Long) : Long = {\n            if (n == 0) 1\n            else if (m == 0) 0\n            else bellNumber(n - 1, m - 1) + bellNumber(n, m - 1)\n        }\n        bellNumber(n, n)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) sum += dp(j) * dp(i - 1 - j)\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i) = 0\n            for (j <- 0 until i) {\n                dp(i) += dp(j) * dp(i - j - 1)\n            }\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        var bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        if (n == 0) 1\n        else {\n            var sum = 0L\n            for (i <- 0 to n - 1) sum += bellNumber(i) * bellNumber(n - 1 - i)\n            sum\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += bell(j) * bell(i - 1 - j)\n            }\n            bell(i) = sum\n        }\n        bell(n.toInt)",
    "        val bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i) = (0 until i).map(k => bell(k) * bell(i - 1 - k)).sum\n        }\n        bell(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        var bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += bell(j) * bell(i - 1 - j)\n            }\n            bell(i) = sum\n        }\n        bell(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        var a = Array.fill(n.toInt + 1)(0L)\n        a(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += a(j) * a(i - 1 - j)\n            }\n            a(i) = sum\n        }\n        a(n.toInt)",
    "        var bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i) = (i - 1 to 0 by -1).map(j => dp(j) * dp(i - 1 - j)).sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        var bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += bell(j) * bell(i - j - 1)\n            }\n            bell(i) = sum\n        }\n        bell(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) sum += dp(j) * dp(i - 1 - j)\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 1\n        var result = 0L\n        for (k <- 0 to n.toInt) {\n            result += bellNumber(k) * bellNumber(n - k)\n        }\n        return result",
    "        if (n == 0) return 1\n        var sum = 0L\n        for (k <- 0 to n - 1) {\n            sum += bellNumber(k) * bellNumber(n - 1 - k)\n        }\n        return sum",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += bell(j) * bell(i - 1 - j)\n            }\n            bell(i) = sum\n        }\n        bell(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i) = (0L /: (0 to i - 1))((s, j) => s + bell(j) * bell(i - 1 - j))\n        }\n        bell(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i) = dp(i - 1) * (n - i + 1) / i\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                dp(i)(j) = dp(i - 1)(j - 1) + dp(i)(j - 1)\n            }\n        }\n        dp(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) sum += dp(j) * dp(i - 1 - j)\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += bell(j) * bell(i - 1 - j)\n            }\n            bell(i) = sum\n        }\n        bell(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 1\n        var result = 0L\n        for (i <- 0 to n - 1) {\n            result += bellNumber(i) * bellNumber(n - i - 1)\n        }\n        return result",
    "        val bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        var bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += bell(j) * bell(i - j - 1)\n            }\n            bell(i) = sum\n        }\n        bell(n.toInt)",
    "        val bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(i - 1)\n            for (j <- 1 to i) dp(i)(j) = dp(i - 1)(j - 1) + dp(i)(j - 1)\n        }\n        dp(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        var bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) sum += dp(j) * dp(i - 1 - j)\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        var bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - j - 1)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        var dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        dp(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(i - 1)\n            for (j <- 1 to i) dp(i)(j) = dp(i - 1)(j - 1) + dp(i)(j - 1)\n        }\n        dp(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += bell(j) * bell(i - j - 1)\n            }\n            bell(i) = sum\n        }\n        bell(n.toInt)",
    "        val cache = Array.fill(n.toInt + 1)(0L)\n        cache(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += cache(j) * cache(i - 1 - j)\n            }\n            cache(i) = sum\n        }\n        cache(n.toInt)",
    "        val bell = Array.fill(n.toInt + 1)(0L)\n        bell(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += bell(j) * bell(i - 1 - j)\n            }\n            bell(i) = sum\n        }\n        bell(n.toInt)",
    "        var dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        var dp = Array.fill(n + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n) {\n            var sum = 0L\n            for (j <- 0 until i) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n)",
    "        var dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) sum += dp(j) * dp(i - 1 - j)\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val bell = Array.ofDim[Long](n.toInt + 1, n.toInt + 1)\n        bell(0)(0) = 1\n        for (i <- 1 to n.toInt) {\n            bell(i)(0) = bell(i - 1)(i - 1)\n            for (j <- 1 to i) {\n                bell(i)(j) = bell(i - 1)(j - 1) + bell(i)(j - 1)\n            }\n        }\n        bell(n.toInt)(0)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            var sum = 0L\n            for (j <- 0 to i - 1) {\n                sum += dp(j) * dp(i - 1 - j)\n            }\n            dp(i) = sum\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n.toInt) {\n            dp(i) = (i - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)"
  ]
}