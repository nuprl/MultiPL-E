{
  "name": "mbpp_400_extract_freq",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        freq_map.values.foldLeft(0L)((a, b) => a + b * (b - 1) / 2)",
    "        val freq_map = HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (freq_map.contains(tuple)) {\n                freq_map(tuple) += 1\n            } else {\n                freq_map(tuple) = 1\n            }\n        }\n        freq_map.size",
    "        var freq = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.values.foldLeft(1L)((a, b) => a * b)",
    "        val test_list_set = test_list.toSet\n        test_list_set.size",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_list = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            var freq = 1\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) == test_list(j)) {\n                    freq += 1\n                }\n            }\n            freq_list += freq\n        }\n        var result = 1L\n        for (i <- 0 until freq_list.length) {\n            result *= (freq_list(i) + 1)\n        }\n        return result",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        val freq_list = freq.toList\n        val freq_list_sorted = freq_list.sortBy(_._1)\n        val freq_list_sorted_filtered = freq_list_sorted.filter(x => x._2 == 1)\n        freq_list_sorted_filtered.length",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var count = 0L\n        for ((k, v) <- freq_map) {\n            count += (v * (v - 1)) / 2\n        }\n        count",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        test_list.groupBy(identity).mapValues(_.size).values.sum",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq.keys) {\n            count += freq(i) * (freq(i) - 1) / 2\n        }\n        return count",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map) {\n            freq_list = i._2 :: freq_list\n        }\n        freq_list.sorted.reverse(0)",
    "        val unique_tuples = test_list.distinct\n        unique_tuples.length",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (freq_map(test_list(i)) > 0 && freq_map(test_list(j)) > 0) {\n                    result += 1\n                    freq_map(test_list(i)) -= 1\n                    freq_map(test_list(j)) -= 1\n                }\n            }\n        }\n        result",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        var freq = 0L\n        var set = Set[Long]()\n        for (i <- test_list) {\n            if (!set.contains(i)) {\n                freq += 1\n                set += i\n            }\n        }\n        return freq",
    "        var freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        freq.values.foldLeft(1L)((a, b) => a * b)",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var ans = 0L\n        for (i <- freq.values) {\n            ans += i * (i - 1) / 2\n        }\n        ans",
    "        val freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- freq.values) {\n            sum += i * (i - 1) / 2\n        }\n        return sum",
    "        var freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_list = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            var freq = 1\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) == test_list(j)) {\n                    freq += 1\n                }\n            }\n            freq_list += freq\n        }\n        var unique_freq = new ListBuffer[Long]()\n        for (i <- 0 until freq_list.length) {\n            var is_unique = true\n            for (j <- 0 until unique_freq.length) {\n                if (freq_list(i) == unique_freq(j)) {\n                    is_unique = false\n                }\n            }\n            if (is_unique) {\n                unique_freq += freq_list(i)\n            }\n        }\n        return unique_freq.length",
    "        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                val key = test_list(i) * test_list(j)\n                if (freq_map.contains(key)) freq_map(key) += 1\n                else freq_map(key) = 1\n            }\n        }\n        freq_map.values.sum",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                result += freq_map(key)\n                freq_map(key) = 0\n            }\n        }\n        result",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        test_list.groupBy(x => x).map(x => x._2.length).sum",
    "        var freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- freq_map.values) {\n            sum += i * (i - 1) / 2\n        }\n        return sum",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        test_map.size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                result += freq_map(key)\n                freq_map(key) = 0\n            }\n        }\n        result",
    "        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) freq_map(test_list(i)) += 1\n            else freq_map(test_list(i)) = 1\n        }\n        var freq_list = freq_map.values.toList\n        var freq_list_sorted = freq_list.sorted\n        var freq_list_sorted_rev = freq_list_sorted.reverse\n        var freq_list_sorted_rev_sum = freq_list_sorted_rev.sum\n        var freq_list_sorted_rev_sum_half = freq_list_sorted_rev_sum / 2\n        var freq_list_sorted_rev_sum_half_index = 0\n        var freq_list_sorted_rev_sum_half_sum = 0\n        for (i <- 0 until freq_list_sorted_rev.length) {\n            freq_list_sorted_rev_sum_half_sum += freq_list_sorted_rev(i)\n            if (freq_list_sorted_rev_sum_half_sum >= freq_list_sorted_rev_sum_half) {\n                freq_list_sorted_rev_sum_half_index = i\n                break\n            }\n        }\n        var freq_list_sorted_rev_sum_half_index_value = freq_list_sorted_rev(freq_list_sorted_rev_sum_half_index)\n        var freq_list_sorted_rev_sum_half_index_value_sum = freq_list_sorted_rev_sum_half_index_value * (freq_list_sorted_rev_sum_half_index + 1)\n        if (freq_list_sorted_rev_sum_half_index + 1 < freq_list_sorted_rev.length) {\n            freq_list_sorted_rev_sum_half_index_value_sum",
    "        val test_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map += (i -> 1)\n        }\n        var count = 0\n        for (i <- test_map.values) {\n            if (i > 1) count += 1\n        }\n        count",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                result += freq_map(key)\n                freq_map(key) = 0\n            }\n        }\n        result",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var sum = 0\n        for (i <- freq_map.values) {\n            sum += i * (i - 1) / 2\n        }\n        return sum",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i == 1) count += 1\n        }\n        count",
    "        val test_list_sorted = test_list.sorted\n        var count = 0\n        for (i <- 0 until test_list_sorted.length - 1) {\n            if (test_list_sorted(i) != test_list_sorted(i + 1)) count += 1\n        }\n        count + 1",
    "        var freq_map = Map[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var freq_list = List[Int]()\n        for (i <- freq_map.values) {\n            freq_list = freq_list :+ i\n        }\n        var freq_freq_map = Map[Int, Int]()\n        for (i <- freq_list) {\n            if (freq_freq_map.contains(i)) {\n                freq_freq_map(i) += 1\n            } else {\n                freq_freq_map(i) = 1\n            }\n        }\n        var freq_freq_list = List[Int]()\n        for (i <- freq_freq_map.values) {\n            freq_freq_list = freq_freq_list :+ i\n        }\n        var sum = 0L\n        for (i <- freq_freq_list) {\n            sum += (i * (i - 1)) / 2\n        }\n        return sum",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i > 1) {\n                count += 1\n            }\n        }\n        return count",
    "        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        var freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var result = 1L\n        for (i <- 0 until freq_list.length) {\n            result *= (freq_list(i) + 1)\n        }\n        result",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        val freq_list = freq_map.values.toList\n        val freq_set = freq_list.toSet\n        var result = 0L\n        for (i <- freq_set) {\n            result += (i * (i - 1)) / 2\n        }\n        return result",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        val freq_list = freq.values.toList\n        val freq_set = freq_list.toSet\n        freq_set.size",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq = 0L\n        var freq_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) + test_list(j) == 0) {\n                    freq_list = (test_list(i) * test_list(j)) :: freq_list\n                }\n            }\n        }\n        freq_list = freq_list.distinct\n        freq = freq_list.length\n        return freq",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_map : Map[Long, Int] = Map()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list : List[Int] = List()\n        for (i <- 0 until test_list.length) {\n            freq_list = freq_map(test_list(i)) :: freq_list\n        }\n        freq_list.distinct.length",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val test_set = test_list.toSet\n        val test_map = new HashMap[Long, Long]\n        for (x <- test_set) {\n            test_map(x) = test_list.count(_ == x)\n        }\n        test_map.values.toList.filter(_ > 1).map(x => x * (x - 1) / 2).sum",
    "        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_set = freq_list.toSet\n        var freq_set_list = freq_set.toList\n        var freq_set_list_sorted = freq_set_list.sorted\n        var freq_set_list_sorted_rev = freq_set_list_sorted.reverse\n        var freq_set_list_sorted_rev_map = new HashMap[Long, Long]()\n        for (i <- 0 until freq_set_list_sorted_rev.length) {\n            freq_set_list_sorted_rev_map(freq_set_list_sorted_rev(i)) = i\n        }\n        var freq_list_sorted = freq_list.sorted\n        var freq_list_sorted_rev = freq_list_sorted.reverse\n        var freq_list_sorted_rev_map = new HashMap[Long, Long]()\n        for (i <- 0 until freq_list_sorted_rev.length) {\n            freq_list_sorted_rev_map(freq_list_sorted_rev(i)) = i\n        }\n        var freq_list_sorted_rev_map_freq = new HashMap[Long, Long]()\n        for (i <- 0 until freq_list_sorted_rev.length) {\n            freq_list_sorted_rev_map_freq(freq_list_sorted_rev_map(freq_list_sorted_rev(i))) = freq_list_sorted_rev(i)\n        }\n        var freq_list_sorted_rev_map_freq_",
    "        val test_set = test_list.toSet\n        val test_map = new HashMap[Long, Long]\n        for (i <- test_set) {\n            test_map(i) = test_list.count(_ == i)\n        }\n        test_map.values.foldLeft(1L)((x, y) => x * (y + 1)) - 1",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map += (i -> 1)\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.toList\n        var freq_list_sorted = freq_list.sortWith(_._2 > _._2)\n        var freq_list_sorted_unique = freq_list_sorted.distinct\n        var freq_list_sorted_unique_count = freq_list_sorted_unique.length\n        return freq_list_sorted_unique_count",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        // Write your code here\n        val map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- map.values) {\n            count += i * (i - 1) / 2\n        }\n        count",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (!freq.contains(test_list(i))) {\n                freq += (test_list(i) -> 1)\n            } else {\n                freq(test_list(i)) += 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        test_list.groupBy(identity).mapValues(_.size).size",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        val freq_list = freq.toList\n        val freq_list_sorted = freq_list.sortBy(_._1)\n        val freq_list_sorted_filtered = freq_list_sorted.filter(_._2 == 1)\n        freq_list_sorted_filtered.length",
    "        test_list.map(x => (x, 1)).groupBy(_._1).map(x => (x._1, x._2.length)).size",
    "        var freq = 0L\n        var i = 0\n        while (i < test_list.length) {\n            var j = i + 1\n            while (j < test_list.length) {\n                var k = j + 1\n                while (k < test_list.length) {\n                    if (test_list(i) + test_list(j) + test_list(k) == 0) {\n                        freq += 1\n                    }\n                    k += 1\n                }\n                j += 1\n            }\n            i += 1\n        }\n        freq",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var total = 0L\n        for (i <- freq_map.values) {\n            total += i * (i - 1) / 2\n        }\n        return total",
    "        var freq = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i)))\n                freq(test_list(i)) += 1\n            else\n                freq(test_list(i)) = 1\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        test_list.groupBy(x => x).map(x => x._2.length).sum",
    "        var freq = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) freq(test_list(i)) += 1\n            else freq(test_list(i)) = 1\n        }\n        var count = 0\n        for (i <- 0 until test_list.length) {\n            if (freq(test_list(i)) == 1) count += 1\n        }\n        return count",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val unique_tuples = test_list.distinct\n        return unique_tuples.length",
    "        val freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        val freq_list = freq.toList\n        val freq_list_sorted = freq_list.sortWith(_._2 > _._2)\n        val max_freq = freq_list_sorted(0)._2\n        var count = 0\n        for (i <- freq_list_sorted) {\n            if (i._2 == max_freq) count += 1\n            else break\n        }\n        count",
    "        var freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.values.sum",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map) {\n            freq_list = i._2 :: freq_list\n        }\n        freq_list = freq_list.sorted\n        var result = 1L\n        for (i <- 0 until freq_list.length) {\n            result = (result * (freq_list(i) + 1)) % 1000000007\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map(key) > 1) {\n                result += freq_map(key)\n                freq_map(key) = 0\n            }\n        }\n        result",
    "        test_list.distinct.length",
    "        val map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- freq.values) {\n            sum += i * (i - 1) / 2\n        }\n        sum",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size",
    "        var freq = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        test_list.groupBy(identity).mapValues(_.size).size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result : Long = 0\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.values.toList.reduceLeft(_ * _)",
    "        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.values.foldLeft(1L)((a, b) => a * b)",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        var freq = 0L\n        var freq_list = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (!freq_list.contains(test_list(i))) {\n                freq_list = freq_list :+ test_list(i)\n                freq += 1\n            }\n        }\n        freq",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq.keys) {\n            count += freq(i) * (freq(i) - 1) / 2\n        }\n        return count",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sorted\n        var count = 0L\n        for (i <- 0 to freq_list.length - 1) {\n            if (freq_list(i) == 1) {\n                count += 1\n            } else {\n                count += (freq_list(i) * (freq_list(i) - 1)) / 2\n            }\n        }\n        return count",
    "        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = new ListBuffer[Long]()\n        for (i <- freq_map.keys) {\n            freq_list += freq_map(i)\n        }\n        return freq_list.toList.distinct.length",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i == 1) {\n                count += 1\n            }\n        }\n        return count",
    "        test_list.distinct.length",
    "        val freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        var result = 0\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Long]()\n        for (x <- test_list) {\n            if (freq_map.contains(x)) {\n                freq_map(x) += 1\n            } else {\n                freq_map(x) = 1\n            }\n        }\n        var result = 0L\n        for (x <- freq_map.values) {\n            result += x * (x - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                result += freq_map(key)\n                freq_map(key) = 0\n            }\n        }\n        result",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            val freq = freq_map(key)\n            result += freq * (freq - 1) / 2\n        }\n        result",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var total = 0L\n        for (i <- freq_map.values) {\n            total += i * (i - 1) / 2\n        }\n        return total",
    "        var freq = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var ans = 0L\n        for (i <- freq.values) {\n            ans += i * (i - 1) / 2\n        }\n        ans",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (test_map.contains(test_list(i))) {\n                test_map(test_list(i)) += 1\n            } else {\n                test_map(test_list(i)) = 1\n            }\n        }\n        var count = 0\n        for (i <- test_map.values) {\n            count += i * (i - 1) / 2\n        }\n        return count",
    "        val freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        var freq_map = Map[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var freq_list = List[Int]()\n        for (i <- freq_map.values) {\n            freq_list = i :: freq_list\n        }\n        freq_list = freq_list.sorted\n        var result = 1L\n        for (i <- freq_list) {\n            result *= i\n        }\n        return result",
    "        val freq_list = test_list.groupBy(identity).mapValues(_.size)\n        val freq_list_sorted = freq_list.toList.sortBy(_._1)\n        val freq_list_sorted_filtered = freq_list_sorted.filter(x => x._2 == 1)\n        val freq_list_sorted_filtered_map = freq_list_sorted_filtered.map(x => x._1)\n        freq_list_sorted_filtered_map.length",
    "        val test_freq = test_list.groupBy(identity).mapValues(_.size)\n        test_freq.size",
    "        var freq = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        return freq.size",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_list :+ freq_map(i)\n        }\n        freq_list = freq_list.sorted\n        var result = 1L\n        for (i <- 0 until freq_list.length) {\n            result *= (i + 1)\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) = freq_map(i) + 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i == 1) {\n                count += 1\n            }\n        }\n        return count",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            count += i * (i - 1) / 2\n        }\n        return count",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (!freq_map.contains(test_list(i))) {\n                freq_map += (test_list(i) -> 1)\n            } else {\n                freq_map(test_list(i)) += 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        return freq.values.foldLeft(0L)((a, b) => a + b * (b - 1) / 2)",
    "        var freq_map = Map[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq_map.values) {\n            count += i * (i - 1) / 2\n        }\n        return count",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sorted\n        var result = 0L\n        for (i <- 0 until freq_list.length) {\n            result += freq_list(i) * (freq_list(i) - 1) / 2\n        }\n        return result",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- freq_map.values) {\n            sum += i * (i - 1) / 2\n        }\n        return sum",
    "        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        val freq = test_list.groupBy(identity).mapValues(_.size).values.toList\n        freq.foldLeft(1L)((a, b) => a * b)",
    "        val freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        val freq_list = freq_map.values.toList\n        val freq_set = freq_list.toSet\n        freq_set.size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) freq(test_list(i)) += 1\n            else freq(test_list(i)) = 1\n        }\n        var count = 0L\n        for (i <- freq.values) {\n            count += i * (i - 1) / 2\n        }\n        return count",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq.values) {\n            count += i * (i - 1) / 2\n        }\n        return count",
    "        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_list_sorted = freq_list.sorted\n        var freq_list_sorted_rev = freq_list_sorted.reverse\n        var freq_list_sorted_rev_unique = freq_list_sorted_rev.distinct\n        var freq_list_sorted_rev_unique_sum = freq_list_sorted_rev_unique.sum\n        return freq_list_sorted_rev_unique_sum",
    "        val freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) freq(test_list(i)) += 1\n            else freq(test_list(i)) = 1\n        }\n        var result = 0L\n        for (i <- freq.values) result += i * (i - 1) / 2\n        return result",
    "        var freq_map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq_map.values) {\n            count += i * (i - 1) / 2\n        }\n        return count",
    "        val test_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        test_map.size",
    "        var freq = 0L\n        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (!freq_map.contains(tuple)) {\n                freq_map += (tuple -> 1)\n                freq += 1\n            }\n        }\n        freq",
    "        var freq = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var total = 0L\n        for (i <- freq.values) {\n            total += i * (i - 1) / 2\n        }\n        return total",
    "        test_list.groupBy(identity).mapValues(_.size).values.sum",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                val value = freq_map(key)\n                freq_map(key) = value + 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        result",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list.sorted.reverse.head",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_list :+ freq_map(i)\n        }\n        freq_list.sorted.reverse(0)",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) freq(test_list(i)) += 1\n            else freq(test_list(i)) = 1\n        }\n        var count = 0L\n        for (i <- freq.values) {\n            count += i * (i - 1) / 2\n        }\n        return count",
    "        var freq_list : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var temp_list : List[Long] = List()\n            for (j <- i until test_list.length) {\n                temp_list = temp_list :+ test_list(j)\n            }\n            freq_list = freq_list :+ temp_list.sum\n        }\n        return freq_list.distinct.length",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i == 1) {\n                count += 1\n            }\n        }\n        return count",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.keys) {\n            result += freq_map(i) * (freq_map(i) - 1) / 2\n        }\n        result",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sortWith(_ > _)\n        var result = 0L\n        for (i <- 0 until freq_list.length) {\n            result += freq_list(i) * (freq_list(i) - 1) / 2\n        }\n        return result",
    "        test_list.distinct.length",
    "        val map = Map[Long, Int]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        var sum = 0\n        for (i <- map.values) {\n            sum += i * (i - 1) / 2\n        }\n        return sum",
    "        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.values.foldLeft(0L)((a, b) => a + b * (b - 1) / 2)",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            count += i * (i - 1) / 2\n        }\n        count",
    "        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- freq_map.keys) {\n            sum += (freq_map(i) * (freq_map(i) - 1)) / 2\n        }\n        return sum",
    "        var freq = Map[Long, Int]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        return freq.size",
    "        var count = 0\n        var freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        for (i <- freq.values) {\n            if (i == 1) count += 1\n        }\n        return count",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            if (i > 1) {\n                result += i * (i - 1) / 2\n            }\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                if (freq_map(test_list(i)) > 0 && freq_map(test_list(j)) > 0) {\n                    result += 1\n                    freq_map(test_list(i)) -= 1\n                    freq_map(test_list(j)) -= 1\n                }\n            }\n        }\n        result",
    "        val freq = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        var freq_map = Map[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map += (i -> 1)\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i > 1) count += 1\n        }\n        return count",
    "        test_list.groupBy(identity).mapValues(_.size).size",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for ((key, value) <- freq_map) {\n            result += value * (value - 1) / 2\n        }\n        return result",
    "        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_list :+ freq_map(i)\n        }\n        var freq_set = Set[Long]()\n        for (i <- freq_list) {\n            freq_set = freq_set + i\n        }\n        freq_set.size",
    "        var freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_list_sorted = freq_list.sortWith(_ > _)\n        var freq_list_sorted_unique = freq_list_sorted.distinct\n        var freq_list_sorted_unique_sum = freq_list_sorted_unique.sum\n        return freq_list_sorted_unique_sum",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i > 1) count += i * (i - 1) / 2\n        }\n        return count",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var count = 0L\n        for ((key, value) <- freq_map) {\n            count += value * (value - 1) / 2\n        }\n        return count",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var result = 1L\n        for (i <- 0 until freq_list.length) {\n            result *= (freq_list(i) + 1)\n        }\n        result - 1",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val test_set = test_list.toSet\n        val test_map = new HashMap[Long, Long]\n        for (i <- test_set) {\n            test_map(i) = test_list.filter(_ == i).length\n        }\n        var result = 0L\n        for (i <- test_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = new ListBuffer[Int]()\n        for (i <- freq_map.keys) {\n            freq_list += freq_map(i)\n        }\n        var freq_list_sorted = freq_list.sorted\n        var freq_list_sorted_unique = freq_list_sorted.distinct\n        var freq_list_sorted_unique_length = freq_list_sorted_unique.length\n        var freq_list_sorted_unique_length_sum = freq_list_sorted_unique.sum\n        var freq_list_sorted_unique_length_sum_product = freq_list_sorted_unique_length * freq_list_sorted_unique_length_sum\n        return freq_list_sorted_unique_length_sum_product",
    "        var freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        return freq.size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        test_list.distinct.length",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sortWith(_ > _)\n        var result = 0L\n        for (i <- 0 until freq_list.length) {\n            result += freq_list(i) * (i + 1)\n        }\n        return result",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) freq_map(key) += 1\n            else freq_map(key) = 1\n        }\n        var result = 0\n        for ((key, value) <- freq_map) {\n            result += value * (value - 1) / 2\n        }\n        return result",
    "        val map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map.values.foldLeft(0L)((a, b) => a + b * (b - 1) / 2)",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) freq_map(key) += 1\n            else freq_map(key) = 1\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                result += freq_map(key)\n                freq_map(key) = 0\n            }\n        }\n        result",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (freq_map.contains(tuple)) freq_map(tuple) += 1\n            else freq_map(tuple) = 1\n        }\n        freq_map.size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                val value = freq_map(key)\n                freq_map(key) = value + 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += (i * (i - 1)) / 2\n        }\n        return result",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for ((k, v) <- freq_map) {\n            result += v * (v - 1) / 2\n        }\n        return result",
    "        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        test_map.size",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        freq_map.size",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_list :+ freq_map(i)\n        }\n        freq_list.sorted.reverse(0)",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sortWith(_ > _)\n        var result = 0L\n        for (i <- 0 until freq_list.length) {\n            result += freq_list(i) * (freq_list(i) - 1) / 2\n        }\n        return result",
    "        var freq_map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        freq_map.size",
    "        val freq = new HashMap[List[Long], Long]\n        for (i <- 0 until test_list.length - 1) {\n            val tuple = List(test_list(i), test_list(i + 1))\n            if (freq.contains(tuple)) freq(tuple) += 1\n            else freq(tuple) = 1\n        }\n        freq.size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) freq_map(key) += 1\n            else freq_map(key) = 1\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq : Long = 0\n        var freq_map : Map[Long, Long] = Map()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                val tuple : Long = test_list(i) * test_list(j)\n                if (!freq_map.contains(tuple)) {\n                    freq_map(tuple) = 1\n                    freq += 1\n                }\n            }\n        }\n        freq",
    "        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size",
    "        var freq_map = Map[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size",
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) freq_map(key) += 1\n            else freq_map(key) = 1\n        }\n        freq_map.values.foldLeft(0L)((a, b) => a + b)",
    "        var freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            freq_list += freq_map(test_list(i))\n        }\n        var freq_list_sorted = freq_list.sorted\n        var freq_list_sorted_set = freq_list_sorted.toSet\n        var freq_list_sorted_set_list = freq_list_sorted_set.toList\n        var freq_list_sorted_set_list_sorted = freq_list_sorted_set_list.sorted\n        var freq_list_sorted_set_list_sorted_rev = freq_list_sorted_set_list_sorted.reverse\n        var freq_list_sorted_set_list_sorted_rev_map = new HashMap[Long, Long]\n        for (i <- 0 until freq_list_sorted_set_list_sorted_rev.length) {\n            freq_list_sorted_set_list_sorted_rev_map(freq_list_sorted_set_list_sorted_rev(i)) = i\n        }\n        var freq_list_sorted_set_list_sorted_rev_map_list = new ListBuffer[Long]\n        for (i <- 0 until freq_list.length) {\n            freq_list_sorted_set_list_sorted_rev_map_list += freq_list_sorted_set_list_sorted_rev_map(freq_list(i))\n        }\n        var freq_list_sorted_set_list_sorted_rev_map_list_sorted = freq_list_sorted",
    "        val freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (freq.contains(tuple)) {\n                freq(tuple) += 1\n            } else {\n                freq(tuple) = 1\n            }\n        }\n        freq.size",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_list :+ freq_map(i)\n        }\n        var freq_map2 = Map[Long, Long]()\n        for (i <- 0 until freq_list.length) {\n            if (freq_map2.contains(freq_list(i))) {\n                freq_map2(freq_list(i)) += 1\n            } else {\n                freq_map2(freq_list(i)) = 1\n            }\n        }\n        var freq_list2 = List[Long]()\n        for (i <- freq_map2.keys) {\n            freq_list2 = freq_list2 :+ freq_map2(i)\n        }\n        var freq_map3 = Map[Long, Long]()\n        for (i <- 0 until freq_list2.length) {\n            if (freq_map3.contains(freq_list2(i))) {\n                freq_map3(freq_list2(i)) += 1\n            } else {\n                freq_map3(freq_list2(i)) = 1\n            }\n        }\n        var freq_list3 = List[Long]()\n        for (i <- freq_map3.keys) {\n            freq_list3 = freq_list3 :+ freq_map3(i)\n        }\n        var freq_map4 = Map[Long, Long]()\n        for (i <- 0 until freq_list3.length) {\n            if (freq_map4.contains(freq_list3(i))) {\n                freq_map4",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sorted\n        var result = 0L\n        for (i <- 0 until freq_list.length) {\n            result += freq_list(i) * (freq_list(i) - 1) / 2\n        }\n        return result"
  ]
}