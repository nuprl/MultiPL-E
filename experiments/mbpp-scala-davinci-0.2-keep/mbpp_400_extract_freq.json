{
  "name": "mbpp_400_extract_freq",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        freq_map.values.foldLeft(0L)((a, b) => a + b * (b - 1) / 2)",
    "        val freq_map = HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (freq_map.contains(tuple)) {\n                freq_map(tuple) += 1\n            } else {\n                freq_map(tuple) = 1\n            }\n        }\n        freq_map.size",
    "        var freq = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.values.foldLeft(1L)((a, b) => a * b)",
    "        val test_list_set = test_list.toSet\n        test_list_set.size",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        var freq_list = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            var freq = 1\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) == test_list(j)) {\n                    freq += 1\n                }\n            }\n            freq_list += freq\n        }\n        var result = 1L\n        for (i <- 0 until freq_list.length) {\n            result *= (freq_list(i) + 1)\n        }\n        return result",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        val freq_list = freq.toList\n        val freq_list_sorted = freq_list.sortBy(_._1)\n        val freq_list_sorted_filtered = freq_list_sorted.filter(x => x._2 == 1)\n        freq_list_sorted_filtered.length",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var count = 0L\n        for ((k, v) <- freq_map) {\n            count += (v * (v - 1)) / 2\n        }\n        count",
    "        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result",
    "        test_list.groupBy(identity).mapValues(_.size).values.sum",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq.keys) {\n            count += freq(i) * (freq(i) - 1) / 2\n        }\n        return count",
    "        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size",
    "        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map) {\n            freq_list = i._2 :: freq_list\n        }\n        freq_list.sorted.reverse(0)",
    "        val unique_tuples = test_list.distinct\n        unique_tuples.length",
    "        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (freq_map(test_list(i)) > 0 && freq_map(test_list(j)) > 0) {\n                    result += 1\n                    freq_map(test_list(i)) -= 1\n                    freq_map(test_list(j)) -= 1\n                }\n            }\n        }\n        result",
    "        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size",
    "        var freq = 0L\n        var set = Set[Long]()\n        for (i <- test_list) {\n            if (!set.contains(i)) {\n                freq += 1\n                set += i\n            }\n        }\n        return freq",
    "        var freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        freq.values.foldLeft(1L)((a, b) => a * b)",
    "        var freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var ans = 0L\n        for (i <- freq.values) {\n            ans += i * (i - 1) / 2\n        }\n        ans",
    "        val freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size"
  ]
}