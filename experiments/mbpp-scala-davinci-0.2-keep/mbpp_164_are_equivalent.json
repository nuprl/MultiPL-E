{
  "name": "mbpp_164_are_equivalent",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to determine if the sum of the divisors of two integers are the same.\n    def areEquivalent(num1 : Long, num2 : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(areEquivalent((36l), (57l)) == (false));\n    assert(areEquivalent((2l), (4l)) == (false));\n    assert(areEquivalent((23l), (47l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val divisors1 = (1L to sqrt(num1).toLong).filter(num1 % _ == 0).flatMap(x => List(x, num1 / x))\n        val divisors2 = (1L to sqrt(num2).toLong).filter(num2 % _ == 0).flatMap(x => List(x, num2 / x))\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        return sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        return sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        if (divisors1.sum == divisors2.sum) true else false",
    "        val sum1 = sumDivisors(num1)\n        val sum2 = sumDivisors(num2)\n        return sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.reduceLeft(_ + _)\n        val sum2 = divisors2.reduceLeft(_ + _)\n        sum1 == sum2",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        return sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        def divisors(num : Long) : List[Long] = {\n            def divisors(num : Long, divisor : Long, acc : List[Long]) : List[Long] = {\n                if (divisor > num / 2) acc\n                else if (num % divisor == 0) divisors(num, divisor + 1, divisor :: acc)\n                else divisors(num, divisor + 1, acc)\n            }\n            divisors(num, 1, Nil)\n        }\n        divisors(num1).sum == divisors(num2).sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val sum1 = sumDivisors(num1)\n        val sum2 = sumDivisors(num2)\n        return sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val sum1 = (1L to sqrt(num1).toLong).filter(num1 % _ == 0).map(x => if (x * x == num1) x else x + num1 / x).sum\n        val sum2 = (1L to sqrt(num2).toLong).filter(num2 % _ == 0).map(x => if (x * x == num2) x else x + num2 / x).sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        return sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val sum1 = sumDivisors(num1)\n        val sum2 = sumDivisors(num2)\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        return sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        if (divisors1.size == divisors2.size) {\n            val sum1 = divisors1.sum\n            val sum2 = divisors2.sum\n            return sum1 == sum2\n        }\n        return false",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        return sum1 == sum2",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        return divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        def sumOfDivisors(num : Long) : Long = {\n            val sqrt = sqrt(num).toLong\n            var sum = 1L\n            for (i <- 2L to sqrt) {\n                if (num % i == 0) {\n                    sum += i\n                    if (i != num / i) sum += num / i\n                }\n            }\n            sum\n        }\n        sumOfDivisors(num1) == sumOfDivisors(num2)",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        return sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.foldLeft(0L)(_ + _)\n        val sum2 = divisors2.foldLeft(0L)(_ + _)\n        return sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        if (divisors1.sum == divisors2.sum) true else false",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        return sum1 == sum2",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        def sumDivisors(num : Long) : Long = {\n            val sqrt = sqrt(num).toLong\n            var sum = 1L\n            for (i <- 2L to sqrt) {\n                if (num % i == 0) {\n                    sum += i\n                    if (i != num / i) sum += num / i\n                }\n            }\n            sum\n        }\n        sumDivisors(num1) == sumDivisors(num2)",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        return sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        return sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val sum1 = sumDivisors(num1)\n        val sum2 = sumDivisors(num2)\n        return sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        def sumOfDivisors(num : Long) : Long = {\n            var sum = 1L\n            for (i <- 2 to sqrt(num).toInt) {\n                if (num % i == 0) {\n                    sum += i\n                    if (i != num / i) sum += num / i\n                }\n            }\n            sum\n        }\n        sumOfDivisors(num1) == sumOfDivisors(num2)",
    "        val sum1 = (1L to (num1 / 2)).filter(num1 % _ == 0).sum\n        val sum2 = (1L to (num2 / 2)).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        return sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        def sumDivisors(num : Long) : Long = {\n            var sum = 1L\n            for (i <- 2L to sqrt(num).toLong) {\n                if (num % i == 0) {\n                    sum += i\n                    if (i != num / i) sum += num / i\n                }\n            }\n            sum\n        }\n        sumDivisors(num1) == sumDivisors(num2)",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        def sumDivisors(num : Long) : Long = {\n            var sum = 0L\n            for (i <- 1 to sqrt(num).toInt) {\n                if (num % i == 0) {\n                    if (i == sqrt(num).toInt) sum += i\n                    else sum += i + num / i\n                }\n            }\n            sum\n        }\n        sumDivisors(num1) == sumDivisors(num2)",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        return sum1 == sum2",
    "        val divisors1 = (1L to sqrt(num1).toLong).filter(num1 % _ == 0)\n        val divisors2 = (1L to sqrt(num2).toLong).filter(num2 % _ == 0)\n        val sum1 = divisors1.sum + divisors1.map(num1 / _).sum - num1\n        val sum2 = divisors2.sum + divisors2.map(num2 / _).sum - num2\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val sum1 = (1L to num1).filter(num1 % _ == 0).sum\n        val sum2 = (1L to num2).filter(num2 % _ == 0).sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = (1L to sqrt(num1).toLong).filter(num1 % _ == 0)\n        val divisors2 = (1L to sqrt(num2).toLong).filter(num2 % _ == 0)\n        val divisors1Sum = divisors1.sum + divisors1.map(num1 / _).sum\n        val divisors2Sum = divisors2.sum + divisors2.map(num2 / _).sum\n        divisors1Sum == divisors2Sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = (1L to num1).filter(num1 % _ == 0)\n        val divisors2 = (1L to num2).filter(num2 % _ == 0)\n        divisors1.sum == divisors2.sum"
  ]
}