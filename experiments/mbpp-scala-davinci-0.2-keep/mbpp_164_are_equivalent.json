{
  "name": "mbpp_164_are_equivalent",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to determine if the sum of the divisors of two integers are the same.\n    def areEquivalent(num1 : Long, num2 : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(areEquivalent((36l), (57l)) == (false));\n    assert(areEquivalent((2l), (4l)) == (false));\n    assert(areEquivalent((23l), (47l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val divisors1 = (1L to sqrt(num1).toLong).filter(num1 % _ == 0).flatMap(x => List(x, num1 / x))\n        val divisors2 = (1L to sqrt(num2).toLong).filter(num2 % _ == 0).flatMap(x => List(x, num2 / x))\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        return sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        return sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        if (divisors1.sum == divisors2.sum) true else false",
    "        val sum1 = sumDivisors(num1)\n        val sum2 = sumDivisors(num2)\n        return sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        divisors1.sum == divisors2.sum",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        val sum1 = divisors1.reduceLeft(_ + _)\n        val sum2 = divisors2.reduceLeft(_ + _)\n        sum1 == sum2",
    "        val divisors1 = getDivisors(num1)\n        val divisors2 = getDivisors(num2)\n        val sum1 = divisors1.sum\n        val sum2 = divisors2.sum\n        return sum1 == sum2",
    "        val divisors1 = divisors(num1)\n        val divisors2 = divisors(num2)\n        divisors1.sum == divisors2.sum"
  ]
}