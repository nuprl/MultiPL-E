{
  "name": "mbpp_577_last_Digit_Factorial",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to find the last digit in factorial of a given number.\n    def lastDigitFactorial(n : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(lastDigitFactorial((4l)) == (4l));\n    assert(lastDigitFactorial((21l)) == (0l));\n    assert(lastDigitFactorial((30l)) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result *= i\n            result %= 10\n        }\n        result",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial *= i\n        factorial % 10",
    "        val primes = ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 12",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 1L to n) result = (result * i) % 10\n        result",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result *= i\n            result %= 10\n        }\n        result",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        return factorial",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result *= i\n            result %= 10\n        }\n        result",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) factorial = (factorial * i) % 10\n        factorial",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial *= i\n            factorial %= 10\n        }\n        return factorial",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        val primes = ArrayBuffer[Long]()\n        val primeFactors = ArrayBuffer[Long]()\n        for (i <- 2 to n.toInt) {\n            if (primes.forall(i % _ != 0)) primes += i\n        }\n        var nn = n\n        for (prime <- primes) {\n            while (nn % prime == 0) {\n                primeFactors += prime\n                nn /= prime\n            }\n        }\n        var result = 1L\n        for (primeFactor <- primeFactors) {\n            var count = 0\n            var i = primeFactor\n            while (i <= n) {\n                count += n / i\n                i *= primeFactor\n            }\n            result = (result * (pow(primeFactor, count + 1) - 1) / (primeFactor - 1)) % 10\n        }\n        result",
    "        if (n == 0) 1\n        else {\n            var result = 1L\n            for (i <- 1L to n) {\n                result = (result * i) % 10\n            }\n            result\n        }",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        return factorial",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) factorial = (factorial * i) % 10\n        return factorial",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) factorial = (factorial * i) % 10\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial *= i\n        factorial % 10",
    "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial *= i\n            factorial %= 10\n        }\n        return factorial",
    "        var fact = 1L\n        for (i <- 2L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) factorial *= i\n        factorial % 10",
    "        val factorials = ArrayBuffer(1L)\n        for (i <- 1 to n.toInt) {\n            factorials += factorials(i - 1) * i\n        }\n        factorials.last % 10",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact *= i\n            fact %= 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) fact = (fact * i) % 10\n        fact",
    "        val p = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213,",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) fact = (fact * i) % 10\n        fact",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result *= i\n            result %= 10\n        }\n        result",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) fact = (fact * i) % 10\n        fact",
    "        val primes = ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)\n        var result = 1L\n        for (i <- 0 until primes.length) {\n            val p = primes(i)\n            var m = n\n            while (m > 0) {\n                result = (result * p) % 10\n                m /= p\n            }\n        }\n        result",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result *= i\n            result %= 10\n        }\n        result",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        return factorial",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) factorial = (factorial * i) % 10\n        factorial",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) factorial = (factorial * i) % 10\n        factorial",
    "        if (n == 0) 1\n        else {\n            var result = 1L\n            for (i <- 1 to n.toInt) {\n                result = (result * i) % 10\n            }\n            result\n        }",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial *= i\n            factorial %= 10\n        }\n        return factorial",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 1L to n) result = (result * i) % 10\n        result",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) factorial *= i\n        factorial % 10",
    "        if (n == 0) 1\n        else {\n            var result = 1L\n            for (i <- 1 to n.toInt) {\n                result = (result * i) % 10\n            }\n            result\n        }",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result *= i\n            result %= 10\n        }\n        result",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) fact = (fact * i) % 10\n        fact",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        if (n < 2) 1 else n * lastDigitFactorial(n - 1)",
    "        if (n < 2) 1\n        else {\n            var result = 1L\n            for (i <- 2 to n.toInt) {\n                result = (result * i) % 10\n            }\n            result\n        }",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial *= i\n        factorial % 10",
    "        var fact = 1L\n        for (i <- 2L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        val factorials = Array(1, 1, 2, 6, 4, 2, 2, 4, 2, 8)\n        if (n < 10) factorials(n.toInt)\n        else factorials(n.toInt % 10)",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) factorial *= i\n        factorial % 10",
    "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)\n        var factorial = 1L\n        var nn = n\n        while (nn > 1) {\n            factorial *= nn\n            nn -= 1\n        }\n        var result = 1L\n        for (p <- primes) {\n            var pp = p\n            while (factorial % pp == 0) {\n                result = (result * p) % 10\n               ",
    "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var result = 1L\n        for (i <- 2 to n.toInt) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) factorial *= i\n        factorial % 10",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result = (result * i) % 10\n        }\n        return result",
    "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)\n        val primeFactors = new HashMap[Long, Long]\n        for (prime <- primes) {\n            var n1 = n\n            while (n1 >= prime) {\n                primeFactors(prime) = primeFactors.getOrElse(prime, 0) + n1 / prime\n                n1 /= prime\n            }\n        }\n        var result = 1L\n",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 1L to n) result = (result * i) % 10\n        result",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        if (n == 0) 1\n        else {\n            var fact = 1L\n            for (i <- 1L to n) {\n                fact = (fact * i) % 10\n            }\n            fact\n        }",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) fact = (fact * i) % 10\n        fact",
    "        if (n < 2) 1\n        else {\n            var result = 1L\n            for (i <- 2L to n) {\n                result = (result * i) % 10\n            }\n            result\n        }",
    "        var result = 1L\n        for (i <- 1L to n) result = (result * i) % 10\n        result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result = (result * i) % 10\n        }\n        result",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) factorial *= i\n        factorial % 10",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 2 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var result = 1L\n        for (i <- 1L to n) result = (result * i) % 10\n        result",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var result = 1L\n        for (i <- 1L to n) result = (result * i) % 10\n        result",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var fact = 1L\n        for (i <- 2L to n) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var m = n\n        var result = 1L\n        while (m > 0) {\n            result = (result * (m % 10)) % 10\n            m /= 10\n        }\n        result",
    "        var a = 1L\n        for (i <- 2L to n) {\n            a = (a * i) % 10\n        }\n        a",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) fact = (fact * i) % 10\n        fact",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var factorial = 1L\n        for (i <- 2L to n) factorial = (factorial * i) % 10\n        return factorial",
    "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact *= i\n            fact %= 10\n        }\n        return fact",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) factorial *= i\n        factorial % 10",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var result = 1L\n        for (i <- 1L to n) result = (result * i) % 10\n        result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial *= i\n        factorial % 10",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        if (n < 2) 1\n        else {\n            var result = 1L\n            for (i <- 2L to n) {\n                result *= i\n                result %= 10\n            }\n            result\n        }",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        return fact",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var a = ArrayBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            a += i\n        }\n        var result = 1L\n        for (i <- a) {\n            result = (result * i) % 10\n        }\n        result",
    "        if (n == 0) 1\n        else n * lastDigitFactorial(n - 1)",
    "        if (n == 0) 1\n        else (1 to n.toInt).foldLeft(1L)((a, b) => (a * b) % 10)",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        val factorials = ArrayBuffer[Long](1)\n        for (i <- 1 to n.toInt) {\n            factorials += (factorials(i - 1) * i) % 10\n        }\n        factorials(n.toInt)",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        if (n == 0) 1\n        else {\n            var result = 1L\n            for (i <- 1 to n.toInt) {\n                result = (result * i) % 10\n            }\n            result\n        }",
    "        var result = 1L\n        for (i <- 1 to n.toInt) {\n            result *= i\n            result %= 10\n        }\n        result",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n            factorial %= 10\n        }\n        factorial",
    "        var fact = 1L\n        for (i <- 1 to n.toInt) fact = (fact * i) % 10\n        fact",
    "        val factorial = (1L to n).foldLeft(1L)((a, b) => a * b)\n        factorial % 10",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        factorial",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)\n        var result = 1L\n        for (i <- 0 until primes.length) {\n            val p = primes(i)\n            var count = 0\n            var m = n\n            while (m > 0) {\n                count += m / p\n                m /= p\n            }\n            result = (result * pow(p, count / 4).toLong) % 10\n",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var fact = 1L\n        for (i <- 1L to n) fact = (fact * i) % 10\n        fact",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var factorial = 1L\n        for (i <- 1L to n) {\n            factorial = (factorial * i) % 10\n        }\n        factorial",
    "        var fact = 1L\n        for (i <- 1L to n) {\n            fact *= i\n            fact %= 10\n        }\n        fact",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result *= i\n            result %= 10\n        }\n        result",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result : Long = 1\n        for (i <- 2 to n.toInt) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var fact = 1L\n        for (i <- 2L to n) {\n            fact = (fact * i) % 10\n        }\n        fact",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 1L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        var result = 1L\n        for (i <- 1L to n) result = (result * i) % 10\n        result",
    "        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)\n        var result = 1L\n        for (i <- 0 until primes.length) {\n            val p = primes(i)\n            var e = 0\n            var k = n\n            while (k >= p) {\n                e += k / p\n                k /= p\n            }\n            result = (result * pow(p, e).toLong) % 10\n        }",
    "        var fact = 1L\n        for (i <- 1L to n) fact = (fact * i) % 10\n        fact",
    "        var result = 1L\n        for (i <- 2L to n) {\n            result = (result * i) % 10\n        }\n        return result",
    "        if (n == 0) 1\n        else {\n            var result = 1L\n            for (i <- 1L to n) {\n                result *= i\n                result %= 10\n            }\n            result\n        }",
    "        var factorial = 1L\n        for (i <- 1 to n.toInt) {\n            factorial *= i\n        }\n        factorial % 10",
    "        val factorials = Array(1, 1, 2, 6, 4, 2, 2, 4, 2, 8)\n        if (n < 10) return factorials(n.toInt)\n        val lastDigit = n % 10\n        val lastTwoDigits = n % 100\n        if (lastTwoDigits == 0) return 6\n        if (lastTwoDigits == 5) return factorials(lastDigit.toInt)\n        if (lastTwoDigits == 10) return 2\n        if (lastTwoDigits == 15) return 2\n        if (lastTwoDigits == 20) return 4\n        if (lastTwoDigits == 25) return 6\n        if (lastTwoDigits == 30) return 8\n        if (lastTwoDigits == 40) return 4\n        if (lastTwoDigits == 50) return 2\n        if (lastTwoDigits == 60) return 6\n        if (lastTwoDigits == 70) return 4\n        if (lastTwoDigits == 80) return 2\n        if (lastTwoDigits == 90) return 8\n        if (lastDigit % 2 == 0) return 6\n        if (lastDigit % 5 == 0) return 0\n        factorials(lastDigit.toInt)",
    "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        factorial(n) % 10",
    "        var factorial = 1L\n        for (i <- 1L to n) factorial = (factorial * i) % 10\n        return factorial"
  ]
}