{
  "name": "mbpp_460_Extract",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to get the first element of each sublist.\n    def Extract(lst : List[List[Long]]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(Extract((List[List[Long]](List[Long](1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong, 5l.toLong), List[Long](6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 3l.toLong, 6l.toLong))));\n    assert(Extract((List[List[Long]](List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong)))).equals((List[Long](1l.toLong, 4l.toLong))));\n    assert(Extract((List[List[Long]](List[Long](9l.toLong, 8l.toLong, 1l.toLong), List[Long](1l.toLong, 2l.toLong)))).equals((List[Long](9l.toLong, 1l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        lst.map(x => x.head)",
    "        lst.map(x => x(0))",
    "        lst.map(x => x.head)",
    "        lst.map(x => x.head)",
    "        lst.map(x => x.head)",
    "        lst.map(x => x.head)",
    "        lst.map(x => x.head)",
    "        lst.map(x => x.head)",
    "        lst.map(x => x.head)",
    "        lst.map(x => x.head)",
    "        var result = List[Long]()\n        for (i <- 0 until lst.length) {\n            result = result :+ lst(i)(0)\n        }\n        return result",
    "        lst.map(x => x.head)",
    "        lst.map(x => x.head)",
    "        lst.map(x => x.head)",
    "        lst.map(x => x.head)",
    "        lst.map(x => x.head)",
    "        var result = List[Long]()\n        for (i <- 0 until lst.length) {\n            result = result :+ lst(i)(0)\n        }\n        return result",
    "        var result = List[Long]()\n        for (sublist <- lst) {\n            result = result :+ sublist.head\n        }\n        return result",
    "        lst.map(x => x.head)",
    "        lst.map(x => x.head)"
  ]
}