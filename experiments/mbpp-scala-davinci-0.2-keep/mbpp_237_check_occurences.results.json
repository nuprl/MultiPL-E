{
  "name": "mbpp_237_check_occurences",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result(i) = 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmposxstnay.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmposxstnay.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmposxstnay.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzxmnmvdl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzxmnmvdl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzxmnmvdl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) = occurences(i) + 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dcgg9_c.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dcgg9_c.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4dcgg9_c.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3hsgtr8j.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3hsgtr8j.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3hsgtr8j.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx2d5m1.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx2d5m1.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx2d5m1.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhms8xnt.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhms8xnt.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhms8xnt.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences += (i -> 1)\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp790n0sw5.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp790n0sw5.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp790n0sw5.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpodm20c0f.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpodm20c0f.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpodm20c0f.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx2d5m1.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx2d5m1.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx2d5m1.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhms8xnt.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhms8xnt.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhms8xnt.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences += (i -> 1)\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp790n0sw5.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp790n0sw5.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp790n0sw5.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbwn64a3.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbwn64a3.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbwn64a3.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) {\n                result(i) += 1\n            } else {\n                result(i) = 1\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiyh2wpta.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiyh2wpta.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiyh2wpta.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx2d5m1.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx2d5m1.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx2d5m1.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo0xajclr.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo0xajclr.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo0xajclr.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp70ushfuf.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp70ushfuf.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp70ushfuf.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            }\n            else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkq3tywel.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkq3tywel.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkq3tywel.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhms8xnt.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhms8xnt.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhms8xnt.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- 0 until test_list.length) {\n            if (occurences.contains(test_list(i))) {\n                occurences(test_list(i)) += 1\n            }\n            else {\n                occurences(test_list(i)) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptbek9xn0.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptbek9xn0.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptbek9xn0.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var dict = Map[Long,Long]()\n        for (i <- test_list) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5d1a1b04.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5d1a1b04.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5d1a1b04.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result(i) = 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmposxstnay.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmposxstnay.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmposxstnay.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result += (i -> 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o810azn.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o810azn.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o810azn.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) {\n                result(i) = result(i) + 1\n            } else {\n                result(i) = 1\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpged0udrf.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpged0udrf.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpged0udrf.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            }\n            else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkq3tywel.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkq3tywel.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkq3tywel.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73ojqtya.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73ojqtya.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73ojqtya.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3hsgtr8j.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3hsgtr8j.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3hsgtr8j.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzxmnmvdl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzxmnmvdl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzxmnmvdl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzxmnmvdl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzxmnmvdl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzxmnmvdl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6hxzbpm.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6hxzbpm.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6hxzbpm.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8xdy4gse.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8xdy4gse.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8xdy4gse.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) {\n                result(i) += 1\n            } else {\n                result(i) = 1\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiyh2wpta.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiyh2wpta.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiyh2wpta.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbwn64a3.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbwn64a3.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbwn64a3.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result(i) = 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmposxstnay.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmposxstnay.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmposxstnay.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3hsgtr8j.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3hsgtr8j.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3hsgtr8j.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) = occurences(i) + 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpli6ynyvk.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpli6ynyvk.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpli6ynyvk.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcrgzl3xh.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcrgzl3xh.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcrgzl3xh.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) {\n                result(i) += 1\n            }\n            else {\n                result(i) = 1\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxvzc00j.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxvzc00j.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxxvzc00j.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcrgzl3xh.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcrgzl3xh.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcrgzl3xh.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpodm20c0f.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpodm20c0f.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpodm20c0f.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3hsgtr8j.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3hsgtr8j.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3hsgtr8j.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo0xajclr.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo0xajclr.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo0xajclr.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbwn64a3.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbwn64a3.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbwn64a3.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences += (i -> 1)\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp790n0sw5.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp790n0sw5.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp790n0sw5.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppibybqvt.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppibybqvt.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppibybqvt.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbwn64a3.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbwn64a3.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbwn64a3.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfg2hcfo.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfg2hcfo.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbfg2hcfo.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo0xajclr.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo0xajclr.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo0xajclr.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3hsgtr8j.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3hsgtr8j.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3hsgtr8j.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzxmnmvdl.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzxmnmvdl.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzxmnmvdl.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result += (i -> 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o810azn.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o810azn.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o810azn.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx2d5m1.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx2d5m1.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_dx2d5m1.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result += (i -> 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o810azn.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o810azn.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o810azn.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            }\n            else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkq3tywel.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkq3tywel.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkq3tywel.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0bzldpbk.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0bzldpbk.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0bzldpbk.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val map = Map[Long,Long]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppibybqvt.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppibybqvt.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppibybqvt.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            }\n            else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkq3tywel.scala:18:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkq3tywel.scala:18:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkq3tywel.scala:18:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result += (i -> 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o810azn.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o810azn.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o810azn.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73ojqtya.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73ojqtya.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73ojqtya.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhms8xnt.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhms8xnt.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhms8xnt.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) {\n                result(i) += 1\n            } else {\n                result += (i -> 1)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4n2g125v.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4n2g125v.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4n2g125v.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences += (i -> 1)\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp790n0sw5.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp790n0sw5.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp790n0sw5.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]\n        for (tuple <- test_list) {\n            if (occurences.contains(tuple)) {\n                occurences(tuple) += 1\n            } else {\n                occurences(tuple) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123365,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ha56r40.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ha56r40.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3ha56r40.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences : Map[Long,Long] = Map()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhms8xnt.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhms8xnt.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmhms8xnt.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp384t6jnx.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp384t6jnx.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp384t6jnx.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp99he9ec_.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73ojqtya.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73ojqtya.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73ojqtya.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences += (i -> 1)\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp790n0sw5.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp790n0sw5.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp790n0sw5.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var result = Map[Long,Long]()\n        for (i <- test_list) {\n            if (result.contains(i)) result(i) += 1\n            else result += (i -> 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123366,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o810azn.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o810azn.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o810azn.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpukrqp5jd.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val dict = Map[Long,Long]()\n        for (i <- test_list) {\n            if (dict.contains(i)) {\n                dict(i) += 1\n            } else {\n                dict(i) = 1\n            }\n        }\n        return dict\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn6819l7m.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn6819l7m.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpn6819l7m.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        val occurences = new HashMap[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo0xajclr.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo0xajclr.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo0xajclr.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666123367,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpguyrc929.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf6w0u5p9.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences(i) = 1\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510285,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg360vuco.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) occurences(i) += 1\n            else occurences += (i -> 1)\n        }\n        return occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbwn64a3.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbwn64a3.scala:14:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwbwn64a3.scala:14:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    def checkOccurences(test_list : List[Long]) : Map[Long,Long] = {\n        var occurences = Map[Long,Long]()\n        for (i <- test_list) {\n            if (occurences.contains(i)) {\n                occurences(i) += 1\n            } else {\n                occurences(i) = 1\n            }\n        }\n        occurences\n    }\n    def main(args: Array[String]) = {\n    assert(checkOccurences((List[Long]((3l, 1l), (1l, 3l), (2l, 5l), (5l, 2l), (6l, 3l)))).equals((Map[Long,Long]((1l, 3l) -> 2l, (2l, 5l) -> 2l, (3l, 6l) -> 1l))));\n    assert(checkOccurences((List[Long]((4l, 2l), (2l, 4l), (3l, 6l), (6l, 3l), (7l, 4l)))).equals((Map[Long,Long]((2l, 4l) -> 2l, (3l, 6l) -> 2l, (4l, 7l) -> 1l))));\n    assert(checkOccurences((List[Long]((13l, 2l), (11l, 23l), (12l, 25l), (25l, 12l), (16l, 23l)))).equals((Map[Long,Long]((2l, 13l) -> 1l, (11l, 23l) -> 1l, (12l, 25l) -> 2l, (16l, 23l) -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665510286,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                       Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                 Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz1o0lveg.scala:17:59 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(checkOccurences((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m1l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m6l\u001b[0m, \u001b[31m3l\u001b[0m)))).equals((Map[\u001b[35mLong\u001b[0m,\u001b[35mLong\u001b[0m]((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m5l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m3l\u001b[0m, \u001b[31m6l\u001b[0m) -> \u001b[31m1l",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}