{
  "name": "mbpp_398_sum_of_digits",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to compute the sum of digits of each number of a given list.\n    def sumOfDigits(nums : Any) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumOfDigits((Any(10l.toLong, 2l.toLong, 56l.toLong))) == (14l));\n    assert(sumOfDigits((Any(List[Any](10l, 20l, 4l, 5l, \"b\", 70l, \"a\")))) == (19l));\n    assert(sumOfDigits((Any(10l.toLong, 20l.toLong, -4l.toLong, 5l.toLong, -70l.toLong))) == (19l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case x : Int => sum += x\n            case x : List[Int] => sum += x.sum\n            case x : Array[Int] => sum += x.sum\n            case x : Array[Long] => sum += x.sum\n            case x : Array[Double] => sum += x.sum.toLong\n            case x : Array[Float] => sum += x.sum.toLong\n            case x : Array[BigInt] => sum += x.sum.toLong\n            case x : Array[BigDecimal] => sum += x.sum.toLong\n            case _ =>\n        }\n        sum",
    "        nums match {\n            case nums : Int => nums.toString.map(_.asDigit).sum\n            case nums : List[Int] => nums.map(sumOfDigits(_)).sum\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Byte] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Short] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Boolean] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Any] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[Big",
    "        var sum = 0L\n        nums match {\n            case x : Int => sum = x.toString.map(_.asDigit).sum\n            case x : List[Int] => sum = x.map(_.toString.map(_.asDigit).sum).sum\n            case _ => sum = 0\n        }\n        sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : List[Int] => x.map(sumOfDigits(_)).sum\n            case x : List[List[Int]] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until nums.toString.length) {\n            sum += nums.toString.charAt(i).toString.toLong\n        }\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case n : Int => n.toString.map(_.asDigit).sum\n            case n : Long => n.toString.map(_.asDigit).sum\n            case n : BigInt => n.toString.map(_.asDigit).sum\n            case n : List[Any] => n.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- 0 to nums.toString.length - 1) {\n            sum += nums.toString.charAt(i).asDigit\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : BigInt => num.toString.map(_.asDigit).sum\n            case nums : List[Any] => nums.map(sumOfDigits).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Byte] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Short] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInteger] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case num",
    "        var sum = 0L\n        nums match {\n            case num : Int => sum = num.toString.map(_.asDigit).sum\n            case num : Long => sum = num.toString.map(_.asDigit).sum\n            case num : BigInt => sum = num.toString.map(_.asDigit).sum\n            case num : BigDecimal => sum = num.toString.map(_.asDigit).sum\n            case num : List[Int] => sum = num.map(_.toString.map(_.asDigit).sum).sum\n            case num : List[Long] => sum = num.map(_.toString.map(_.asDigit).sum).sum\n            case num : List[BigInt] => sum = num.map(_.toString.map(_.asDigit).sum).sum\n            case num : List[BigDecimal] => sum = num.map(_.toString.map(_.asDigit).sum).sum\n            case _ => sum = 0\n        }\n        sum",
    "        var sum : Long = 0\n        nums match {\n            case num : Int => {\n                var n = num\n                while (n > 0) {\n                    sum += n % 10\n                    n /= 10\n                }\n            }\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n > 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n        }\n        return sum",
    "        val list = nums.asInstanceOf[List[Int]]\n        list.map(x => x.toString.map(_.asDigit).sum).sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Byte] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Short] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Boolean] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Unit] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Any] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[AnyRef] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Nothing] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Null",
    "        var sum = 0L\n        for (i <- 0 to nums.toString.length - 1) {\n            sum += nums.toString.charAt(i).asDigit\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : BigInt => num.toString.map(_.asDigit).sum\n            case nums : List[Int] => nums.map(sumOfDigits(_)).sum\n            case nums : List[Long] => nums.map(sumOfDigits(_)).sum\n            case nums : List[BigInt] => nums.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Any] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        var sum = 0L\n        for (num <- numsList) {\n            var n = num\n            while (n > 0) {\n                sum += n % 10\n                n /= 10\n            }\n        }\n        return sum",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : BigInt => num.toString.map(_.asDigit).sum\n            case num : BigDecimal => num.toString.map(_.asDigit).sum\n            case num : String => num.map(_.asDigit).sum\n            case num : List[Int] => num.map(sumOfDigits(_)).sum\n            case num : List[Long] => num.map(sumOfDigits(_)).sum\n            case num : List[BigInt] => num.map(sumOfDigits(_)).sum\n            case num : List[BigDecimal] => num.map(sumOfDigits(_)).sum\n            case num : List[String] => num.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n        }",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : BigInt => num.toString.map(_.asDigit).sum\n            case nums : List[Any] => nums.map(sumOfDigits).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        val numsList = nums.asInstanceOf[List[Long]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Int] => x.map(sumOfDigits(_)).sum\n            case x : List[Long] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n > 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n > 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n > 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        return sum",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n > 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n > 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n > 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- nums.toString) sum += (i.asDigit)\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.toString.toLong\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        var sum : Long = 0\n        nums match {\n            case num : Int => sum = num.toString.map(_.asDigit).sum\n            case num : Long => sum = num.toString.map(_.asDigit).sum\n            case num : String => sum = num.toString.map(_.asDigit).sum\n            case num : Double => sum = num.toString.map(_.asDigit).sum\n            case num : Float => sum = num.toString.map(_.asDigit).sum\n            case num : BigInt => sum = num.toString.map(_.asDigit).sum\n            case num : BigDecimal => sum = num.toString.map(_.asDigit).sum\n            case num : List[Any] => sum = num.map(sumOfDigits(_)).sum\n            case num : Array[Any] => sum = num.map(sumOfDigits(_)).sum\n            case num : Set[Any] => sum = num.map(sumOfDigits(_)).sum\n            case num : Map[Any, Any] => sum = num.map(sumOfDigits(_)).sum\n            case _ => sum = 0\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n        }\n        sum",
    "        nums match {\n            case x :: xs => x.toString.map(_.asDigit).sum + sumOfDigits(xs)\n            case Nil => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits).sum\n            case _ => 0\n        }",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n        }\n        sum",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n > 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n > 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n > 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(sumOfDigits(_)).sum\n            case nums : Int => nums.toString.map(_.asDigit).sum\n            case _ => 0\n        }",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        var sum = 0L\n        nums match {\n            case num : Int => sum += num\n            case num : Long => sum += num\n            case num : Double => sum += num.toLong\n            case num : BigInt => sum += num.toLong\n            case num : BigDecimal => sum += num.toLong\n            case num : List[Any] => num.foreach(sum += sumOfDigits(_))\n            case num : Array[Any] => num.foreach(sum += sumOfDigits(_))\n            case num : Set[Any] => num.foreach(sum += sumOfDigits(_))\n            case num : Map[Any, Any] => num.foreach(sum += sumOfDigits(_._2))\n            case _ => println(\"Invalid input\")\n        }\n        sum",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : BigInt => num.toString.map(_.asDigit).sum\n            case num : BigDecimal => num.toString.map(_.asDigit).sum\n            case num : String => num.map(_.asDigit).sum\n            case nums : List[Any] => nums.map(sumOfDigits).sum\n            case nums : Array[Any] => nums.map(sumOfDigits).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        return sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        var sum : Long = 0\n        for (i <- nums.toString) sum += i.toString.toLong\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Byte] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Short] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        val list = nums.asInstanceOf[List[Int]]\n        var sum = 0\n        for (i <- list) {\n            var num = i\n            while (num > 0) {\n                sum += num % 10\n                num /= 10\n            }\n        }\n        sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        var sum = 0L\n        for (num <- numsList) {\n            var numStr = num.toString\n            for (i <- 0 until numStr.length) {\n                sum += numStr(i).toString.toInt\n            }\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Short] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Byte] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Boolean] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Unit] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Any] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n        }",
    "        var sum = 0L\n        nums match {\n            case x : Int => sum = x.toString.map(_.asDigit).sum\n            case x : Long => sum = x.toString.map(_.asDigit).sum\n            case x : Array[Int] => x.foreach(y => sum += y.toString.map(_.asDigit).sum)\n            case x : Array[Long] => x.foreach(y => sum += y.toString.map(_.asDigit).sum)\n            case x : List[Int] => x.foreach(y => sum += y.toString.map(_.asDigit).sum)\n            case x : List[Long] => x.foreach(y => sum += y.toString.map(_.asDigit).sum)\n            case _ => println(\"Invalid input\")\n        }\n        sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        var num = nums.toString\n        for (i <- 0 until num.length) {\n            sum += num(i).asDigit\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toString.toLong\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n        }",
    "        val numsList = nums match {\n            case x: List[Int] => x\n            case x: List[Long] => x\n            case x: List[Double] => x\n            case x: List[Float] => x\n            case x: List[BigInt] => x\n            case x: List[BigDecimal] => x\n            case x: List[String] => x.map(_.toInt)\n            case _ => throw new Exception(\"Invalid input\")\n        }\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case num : Int => {\n                var n = num\n                while (n != 0) {\n                    sum += n % 10\n                    n /= 10\n                }\n            }\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n != 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n                return -1\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Any] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : Array[Any] =>",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        return sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(x => x.asDigit).sum).sum\n            case _ => 0\n        }",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Int] => x.map(sumOfDigits).sum\n            case x : List[Long] => x.map(sumOfDigits).sum\n            case x : Array[Int] => x.map(sumOfDigits).sum\n            case x : Array[Long] => x.map(sumOfDigits).sum\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case x : Int => sum = x.toString.map(_.asDigit).sum\n            case x : List[Int] => sum = x.map(_.toString.map(_.asDigit).sum).sum\n            case x : Array[Int] => sum = x.map(_.toString.map(_.asDigit).sum).sum\n            case x : Set[Int] => sum = x.map(_.toString.map(_.asDigit).sum).sum\n            case x : Map[Int, Int] => sum = x.map(_._1.toString.map(_.asDigit).sum).sum\n            case _ => println(\"Invalid input\")\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Byte] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Short] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : List[Int] => x.map(sumOfDigits(_)).sum\n            case x : Array[Int] => x.map(sumOfDigits(_)).sum\n            case x : Set[Int] => x.map(sumOfDigits(_)).sum\n            case x : HashSet[Int] => x.map(sumOfDigits(_)).sum\n            case x : Map[Int, Int] => x.map(sumOfDigits(_)).sum\n            case x : HashMap[Int, Int] => x.map(sumOfDigits(_)).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Long] => x.map(sumOfDigits(_)).sum\n            case x : Array[Long] => x.map(sumOfDigits(_)).sum\n            case x : Set[Long] => x.map(sumOfDigits(_)).sum\n            case x : HashSet[Long] => x.map(sumOfDigits(_)).sum\n            case x : Map[Long, Long] => x.map(sumOfDigits(_)).sum\n            case x : HashMap[Long, Long] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Int] => x.map(_.toString.map(_.asDigit).sum).sum\n            case x : List[Long] => x.map(_.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        var sum : Long = 0\n        nums match {\n            case num : Int => sum = num.toString.map(x => x.asDigit).sum\n            case num : Long => sum = num.toString.map(x => x.asDigit).sum\n            case num : Double => sum = num.toString.map(x => x.asDigit).sum\n            case num : Float => sum = num.toString.map(x => x.asDigit).sum\n            case num : BigInt => sum = num.toString.map(x => x.asDigit).sum\n            case num : BigDecimal => sum = num.toString.map(x => x.asDigit).sum\n            case nums : List[Int] => sum = nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Long] => sum = nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => sum = nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => sum = nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigInt] => sum = nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => sum = nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case _ => sum = 0\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInteger] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Short] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Byte] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Double] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Float] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[String] => {\n                for (num <- nums) {\n                    sum += num.map(_.asDigit).sum\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var num = nums.toString.toList\n        for (i <- num) {\n            sum += i.toString.toInt\n        }\n        return sum",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Vector[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Set[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Map[Int, Int] => nums.map(x => x._1.toString.map(_.asDigit).sum + x._2.toString.map(_.asDigit).sum).sum\n            case nums : Int => nums.toString.map(_.asDigit).sum\n            case nums : Long => nums.toString.map(_.asDigit).sum\n            case nums : Double => nums.toString.map(_.asDigit).sum\n            case nums : Float => nums.toString.map(_.asDigit).sum\n            case nums : String => nums.map(_.asDigit).sum\n            case _ => 0\n        }",
    "        val nums2 = nums.asInstanceOf[List[Int]]\n        nums2.map(x => x.toString.map(_.asDigit).sum).sum",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.toString.toLong\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Int] => x.map(sumOfDigits(_)).sum\n            case x : List[Long] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        nums match {\n            case n : Int => n.toString.map(_.asDigit).sum\n            case n : Long => n.toString.map(_.asDigit).sum\n            case n : BigInt => n.toString.map(_.asDigit).sum\n            case n : BigDecimal => n.toString.map(_.asDigit).sum\n            case n : List[Any] => n.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case num : Int => {\n                var temp = num\n                while (temp > 0) {\n                    sum += temp % 10\n                    temp /= 10\n                }\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(x => x.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        nums match {\n            case num : Int => sum = num.toString.map(_.asDigit).sum\n            case num : Long => sum = num.toString.map(_.asDigit).sum\n            case num : Double => sum = num.toString.map(_.asDigit).sum\n            case num : String => sum = num.toString.map(_.asDigit).sum\n            case num : List[Any] => sum = num.map(sumOfDigits).sum\n            case _ => sum = 0\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Any] => x.map(sumOfDigits).sum\n            case _ => 0\n        }",
    "        nums match {\n            case x : Int => x.toString.map(_.asDigit).sum\n            case x : Long => x.toString.map(_.asDigit).sum\n            case x : List[Int] => x.map(sumOfDigits(_)).sum\n            case x : List[Long] => x.map(sumOfDigits(_)).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n > 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n > 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n > 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        val numsList = nums.asInstanceOf[List[Long]]\n        numsList.map(x => x.toString.map(x => x.asDigit).sum).sum",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n != 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n != 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    var n = num\n                    while (n != 0) {\n                        sum += n % 10\n                        n /= 10\n                    }\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum : Long = 0\n        nums match {\n            case nums : List[Any] => {\n                for (num <- nums) {\n                    num match {\n                        case num : Int => sum += num\n                        case num : Long => sum += num\n                        case num : String => sum += num.toLong\n                        case _ => sum += 0\n                    }\n                }\n            }\n            case nums : Array[Any] => {\n                for (num <- nums) {\n                    num match {\n                        case num : Int => sum += num\n                        case num : Long => sum += num\n                        case num : String => sum += num.toLong\n                        case _ => sum += 0\n                    }\n                }\n            }\n            case _ => sum += 0\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(x => x.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(x => x.asDigit).sum).sum\n            case _ => 0\n        }",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        val numbers = nums.asInstanceOf[List[Int]]\n        var sum = 0\n        for (i <- numbers) {\n            var number = i\n            while (number > 0) {\n                sum += number % 10\n                number /= 10\n            }\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        val lst = nums.asInstanceOf[List[Int]]\n        lst.map(x => x.toString.map(x => x.asDigit).sum).sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.asDigit).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.asDigit).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        var num = nums.toString\n        for (i <- 0 until num.length) {\n            sum += num(i).asDigit\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        var sum = 0L\n        for (num <- numsList) {\n            var temp = num\n            while (temp > 0) {\n                sum += temp % 10\n                temp /= 10\n            }\n        }\n        return sum",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[BigDecimal] => {\n                for (num <- nums) {\n                    sum += num.toString.map(_.asDigit).sum\n                }\n            }\n            case nums : List[String] => {\n                for (num <- nums) {\n                    sum += num.map(_.asDigit).sum\n                }\n            }\n            case _ => {\n                println(\"Invalid input\")\n            }\n        }\n        sum",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(num => num.toString.map(_.asDigit).sum).sum",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Byte] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Short] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        sum",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : Double => num.toString.map(_.asDigit).sum\n            case num : Float => num.toString.map(_.asDigit).sum\n            case num : BigInt => num.toString.map(_.asDigit).sum\n            case num : BigDecimal => num.toString.map(_.asDigit).sum\n            case num : String => num.map(_.asDigit).sum\n            case nums : List[Int] => nums.map(sumOfDigits).sum\n            case nums : List[Long] => nums.map(sumOfDigits).sum\n            case nums : List[Double] => nums.map(sumOfDigits).sum\n            case nums : List[Float] => nums.map(sumOfDigits).sum\n            case nums : List[BigInt] => nums.map(sumOfDigits).sum\n            case nums : List[BigDecimal] => nums.map(sumOfDigits).sum\n            case nums : List[String] => nums.map(sumOfDigits).sum\n            case _ => throw new Exception(\"Invalid input\")\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : Array[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case num : Int => sum = num.toString.map(_.asDigit).sum\n            case num : Long => sum = num.toString.map(_.asDigit).sum\n            case num : BigInt => sum = num.toString.map(_.asDigit).sum\n            case num : List[Int] => sum = num.map(_.toString.map(_.asDigit).sum).sum\n            case num : List[Long] => sum = num.map(_.toString.map(_.asDigit).sum).sum\n            case num : List[BigInt] => sum = num.map(_.toString.map(_.asDigit).sum).sum\n            case _ => sum = 0\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => throw new Exception(\"Unsupported type\")\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        return sum",
    "        var sum = 0L\n        nums match {\n            case x : Int => sum = x.toString.map(_.asDigit).sum\n            case x : Long => sum = x.toString.map(_.asDigit).sum\n            case x : List[Int] => sum = x.map(_.toString.map(_.asDigit).sum).sum\n            case x : List[Long] => sum = x.map(_.toString.map(_.asDigit).sum).sum\n            case x : Array[Int] => sum = x.map(_.toString.map(_.asDigit).sum).sum\n            case x : Array[Long] => sum = x.map(_.toString.map(_.asDigit).sum).sum\n            case _ => sum = 0\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        return sum",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        val sumOfDigitsList = numsList.map(x => x.toString.map(_.asDigit).sum)\n        sumOfDigitsList.sum",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        var sum = 0\n        for (num <- numsList) {\n            var n = num\n            while (n > 0) {\n                sum += n % 10\n                n /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(y => y.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(y => y.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(y => y.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(y => y.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(y => y.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(y => y.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(y => y.asDigit).sum).sum\n            case nums : List[Short] => nums.map(x => x.toString.map(y => y.asDigit).sum).sum\n            case nums : List[Byte] => nums.map(x => x.toString.map(y => y.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(y => y.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(y => y.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(y => y.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(y => y.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(y => y.asDigit).sum).",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Short] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Byte] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Boolean] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Any] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[Big",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(y => y.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(y => y.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(y => y.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toInt - 48\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Array[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Set[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Vector[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Seq[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Int => nums.toString.map(_.asDigit).sum\n            case nums : Long => nums.toString.map(_.asDigit).sum\n            case nums : Double => nums.toString.map(_.asDigit).sum\n            case nums : Float => nums.toString.map(_.asDigit).sum\n            case nums : String => nums.map(_.asDigit).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        val numsList = nums.asInstanceOf[List[Long]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        var sum = 0L\n        for (i <- 0 until nums.toString.length) {\n            sum += nums.toString.charAt(i).toString.toInt\n        }\n        sum",
    "        var sum = 0L\n        var num = nums.toString\n        for (i <- 0 until num.length) {\n            sum += num(i).asDigit\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- nums.toString) {\n            sum += i.asDigit\n        }\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Char] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDec",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        nums match {\n            case num : Int => num.toString.map(_.asDigit).sum\n            case num : Long => num.toString.map(_.asDigit).sum\n            case num : BigInt => num.toString.map(_.asDigit).sum\n            case num : BigDecimal => num.toString.map(_.asDigit).sum\n            case num : List[Any] => num.map(sumOfDigits).sum\n            case _ => 0\n        }",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        val numsList = nums.asInstanceOf[List[Int]]\n        numsList.map(x => x.toString.map(_.asDigit).sum).sum",
    "        var sum = 0L\n        for (i <- nums.toString) {\n            sum += i.toString.toInt\n        }\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigInt] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[BigDecimal] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Double] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Float] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[String] => nums.map(x => x.map(_.asDigit).sum).sum\n            case nums : List[Any] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : Int => nums.toString.map(_.asDigit).sum\n            case nums : Long => nums.toString.map(_.asDigit).sum\n            case nums : BigInt => nums.toString.map(_.asDigit).sum\n            case nums : BigDecimal => nums.toString.map(_.asDigit).sum\n            case nums : Double => nums.toString.map(_.asDigit).sum\n            case nums : Float => nums.toString.map(_.asDigit).sum\n            case nums : String => nums.map(_.asDigit).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n        }\n        return sum",
    "        nums match {\n            case nums : List[Int] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case nums : List[Long] => nums.map(x => x.toString.map(_.asDigit).sum).sum\n            case _ => 0\n        }",
    "        var sum = 0L\n        nums match {\n            case nums : List[Int] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[Long] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n            case nums : List[BigInt] => {\n                for (num <- nums) {\n                    var temp = num\n                    while (temp > 0) {\n                        sum += temp % 10\n                        temp /= 10\n                    }\n                }\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- nums.toString) sum += i.asDigit\n        sum"
  ]
}