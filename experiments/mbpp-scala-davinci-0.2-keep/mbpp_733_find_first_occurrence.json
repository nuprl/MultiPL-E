{
  "name": "mbpp_733_find_first_occurrence",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted array.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var left = 0L\n        var right = A.length - 1\n        var result = -1L\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid.toInt) == x) {\n                result = mid\n                right = mid - 1\n            } else if (A(mid.toInt) < x) {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n        result",
    "        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, high)\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)",
    "        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) < x) findFirstOccurrence(A, x, m + 1, r)\n                else findFirstOccurrence(A, x, l, m - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)",
    "        var l = 0;\n        var r = A.length - 1;\n        while (l <= r) {\n            val m = (l + r) / 2;\n            if (A(m) < x) l = m + 1;\n            else if (A(m) > x) r = m - 1;\n            else {\n                if (m == 0 || A(m - 1) != x) return m;\n                else r = m - 1;\n            }\n        }\n        -1;",
    "        var l = 0; var r = A.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (A(m) == x) {\n                if (m == 0 || A(m - 1) != x) return m\n                else r = m - 1\n            }\n            else if (A(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1",
    "        def findFirstOccurrence(l : Long, r : Long) : Long = {\n            if (l == r) {\n                if (A(l.toInt) == x) l else -1\n            }\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) >= x) findFirstOccurrence(l, m)\n                else findFirstOccurrence(m + 1, r)\n            }\n        }\n        findFirstOccurrence(0, A.length - 1)",
    "        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)",
    "        var low = 0; var high = A.length - 1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) == x && (mid == 0 || A(mid - 1) != x)) return mid\n            else if (A(mid) >= x) high = mid - 1\n            else low = mid + 1\n        }\n        -1",
    "        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)",
    "        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) == x) {\n                result = mid\n                high = mid - 1\n            }\n            else if (A(mid) > x) high = mid - 1\n            else low = mid + 1\n        }\n        result",
    "        def findFirstOccurrence(A : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, start, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, start, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, end)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)",
    "        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)",
    "        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)",
    "        var left = 0\n        var right = A.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid) == x) {\n                result = mid\n                right = mid - 1\n            } else if (A(mid) > x) right = mid - 1\n            else left = mid + 1\n        }\n        result",
    "        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (A(mid.toInt) == x) {\n                if (mid == 0 || A(mid.toInt - 1) != x) return mid\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n            else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n            else findFirstOccurrence(A, x, mid + 1, high)\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)",
    "        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x && (mid == 0 || A(mid.toInt - 1) < x)) mid\n                else if (A(mid.toInt) >= x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)",
    "        var (l, r) = (0L, A.length - 1)\n        while (l < r) {\n            val m = (l + r) / 2\n            if (A(m.toInt) < x) l = m + 1\n            else r = m\n        }\n        if (A(l.toInt) == x) l else -1",
    "        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) == x) {\n                result = mid\n                high = mid - 1\n            }\n            else if (A(mid) > x) high = mid - 1\n            else low = mid + 1\n        }\n        result",
    "        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) < x) findFirstOccurrence(A, x, m + 1, r)\n                else findFirstOccurrence(A, x, l, m - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)",
    "        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) >= x) {\n                result = mid\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n        result"
  ]
}