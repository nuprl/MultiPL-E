{
  "name": "mbpp_569_sort_sublists",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x, y) => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list2 => list2.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_.length < _.length))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5gyqtuzn.scala:9)\n\tat Problem.main(tmp5gyqtuzn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x, y) => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x, y) => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x, y) => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list2 => list2.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list => list.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list2 => list2.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list2 => list2.sortWith((s1, s2) => s1 < s2))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list2 => list2.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list2 => list2.sortWith((s, t) => s.compareTo(t) < 0))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list2 => list2.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortBy(y => y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x,y) => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list2 => list2.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list => list.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x, y) => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x, y) => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x, y) => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list2 => list2.sortWith((x, y) => x.compareTo(y) < 0))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1666122942,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x, y) => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((a, b) => a < b))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list2 => list2.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((a, b) => a < b))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x, y) => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((a, b) => a < b))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((a, b) => a < b))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x, y) => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x, y) => x.compareTo(y) < 0))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list => list.sortWith((s, t) => s.compareTo(t) < 0))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1666122937,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list2 => list2.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list2 => list2.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x, y) => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x, y) => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list => list.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x, y) => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list2 => list2.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x, y) => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x, y) => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith((x, y) => x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sortWith(_ < _))\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(x => x.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510370,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort each sublist of strings in a given list of lists.\n    def sortSublists(list1 : List[List[String]]) : List[List[String]] = {\n        list1.map(list2 => list2.sorted)\n    }\n    def main(args: Array[String]) = {\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"white\", \"black\", \"orange\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\", \"white\"), List[String](\"black\", \"orange\", \"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((List[List[String]](List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))));\n    assert(sortSublists((List[List[String]](List[String](\"a\", \"b\"), List[String](\"d\", \"c\"), List[String](\"g\", \"h\"), List[String](\"f\", \"e\")))).equals((List[List[String]](List[String](\"a\", \"b\"), List[String](\"c\", \"d\"), List[String](\"g\", \"h\"), List[String](\"e\", \"f\")))));\n    }\n\n}\n",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}