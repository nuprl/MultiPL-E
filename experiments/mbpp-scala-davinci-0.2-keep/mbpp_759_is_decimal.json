{
  "name": "mbpp_759_is_decimal",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a given string is a decimal number with a precision of 2.\n    def isDecimal(num : String) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isDecimal((\"123.11\")) == (true));\n    assert(isDecimal((\"e666.86\")) == (false));\n    assert(isDecimal((\"3.124587\")) == (false));\n    assert(isDecimal((\"1.11\")) == (true));\n    assert(isDecimal((\"1.1.11\")) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val decimal = parts(1)\n                if (decimal.length == 2) {\n                    return true\n                }\n            }\n        }\n        return false",
    "        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[0-9]*\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val regex = \"\"\"(\\d+)(\\.\\d{1,2})?\"\"\".r\n        num match {\n            case regex(_, _) => true\n            case _ => false\n        }",
    "        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (intPart, decimalPart) = (parts(0), parts(1))\n                if (intPart.length > 0 && decimalPart.length == 2) {\n                    if (intPart.forall(c => c.isDigit) && decimalPart.forall(c => c.isDigit)) {\n                        return true\n                    }\n                }\n            }\n        }\n        return false",
    "        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                if (parts(1).length == 2) {\n                    try {\n                        parts(0).toInt\n                        parts(1).toInt\n                        true\n                    } catch {\n                        case e : Exception => false\n                    }\n                } else false\n            } else false\n        } else false",
    "        if (num.length == 0) return false\n        if (num.length == 1 && num(0) == '.') return false\n        if (num.length == 2 && num(0) == '.') return false\n        if (num.length == 2 && num(1) == '.') return false\n        if (num.length == 3 && num(0) == '.' && num(2) == '.') return false\n        if (num.length == 3 && num(1) == '.' && num(2) == '.') return false\n        if (num.length == 3 && num(0) == '.' && num(1) == '.') return false\n        if (num.length == 3 && num(0) == '0' && num(1) == '.') return false\n        if (num.length == 3 && num(0) == '0' && num(1) == '0' && num(2) == '.') return false\n        if (num.length == 3 && num(0) == '0' && num(1) == '0' && num(2) == '0') return false\n        if (num.length == 4 && num(0) == '0' && num(1) == '.' && num(3) == '.') return false\n        if (num.length == 4 && num(0) == '0' && num(1) == '.' && num(2) == '.') return false\n        if (num.length == 4 && num(0) == '0' && num(1) == '.' && num(2) == '0' && num(3) == '.') return false\n        if (num.length == 4 && num(0) == '0' && num(1) == '.' && num(2) == '0' && num(3) == '0') return false\n        if (num.length == 4 && num(0) == '0' && num(1) == '0' && num(2) == '.' && num(3) == '.') return false\n        if (num.length == 4 && num(0) == '0' && num(1) == '0' && num(2) == '.' && num(3",
    "        if (num.contains(\".\")) {\n            val parts = num.split(\"\\\\.\")\n            if (parts.length == 2) {\n                val (left, right) = (parts(0), parts(1))\n                if (left.length > 0 && right.length == 2) {\n                    return true\n                }\n            }\n        }\n        false",
    "        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        if (num.length == 0) return false\n        if (num.length == 1) return num(0).isDigit\n        if (num(0) == '-') {\n            if (num.length == 2) return num(1).isDigit\n            if (num.length == 3) return num(1).isDigit && num(2) == '.'\n            if (num.length == 4) return num(1).isDigit && num(2) == '.' && num(3).isDigit\n            if (num.length == 5) return num(1).isDigit && num(2) == '.' && num(3).isDigit && num(4).isDigit\n            return false\n        }\n        if (num.length == 1) return num(0).isDigit\n        if (num.length == 2) return num(0).isDigit && num(1) == '.'\n        if (num.length == 3) return num(0).isDigit && num(1) == '.' && num(2).isDigit\n        if (num.length == 4) return num(0).isDigit && num(1) == '.' && num(2).isDigit && num(3).isDigit\n        return false",
    "        val pattern = \"^[0-9]+\\\\.[0-9]{2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        val pattern = \"^[0-9]*\\\\.?[0-9]{0,2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        if (num.length == 0) return false\n        if (num.length == 1) return num(0) >= '0' && num(0) <= '9'\n        if (num(0) == '0') return false\n        var i = 0\n        while (i < num.length && num(i) >= '0' && num(i) <= '9') i += 1\n        if (i == num.length) return true\n        if (num(i) != '.') return false\n        i += 1\n        if (i == num.length) return false\n        if (num(i) < '0' || num(i) > '9') return false\n        i += 1\n        if (i == num.length) return true\n        if (num(i) < '0' || num(i) > '9') return false\n        i += 1\n        if (i == num.length) return true\n        return false",
    "        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(s) => true\n            case None => false\n        }",
    "        if (num.length == 0) return false\n        val nums = num.split(\"\\\\.\")\n        if (nums.length > 2) return false\n        if (nums.length == 2 && nums(1).length > 2) return false\n        try {\n            num.toDouble\n            true\n        } catch {\n            case e : Exception => false\n        }",
    "        val pattern = \"^[0-9]+\\\\.[0-9]{1,2}$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(x) => true\n            case None => false\n        }",
    "        val pattern = \"^[0-9]+(\\\\.[0-9]{1,2})?$\".r\n        pattern.findFirstIn(num) match {\n            case Some(_) => true\n            case None => false\n        }",
    "        if (num.length == 0) return false\n        val parts = num.split(\"\\\\.\")\n        if (parts.length > 2) return false\n        if (parts.length == 2) {\n            if (parts(1).length > 2) return false\n            if (parts(1).length == 2 && parts(1)(0) == '0') return false\n        }\n        for (i <- 0 until parts(0).length) {\n            if (!(parts(0)(i) >= '0' && parts(0)(i) <= '9')) return false\n        }\n        if (parts.length == 2) {\n            for (i <- 0 until parts(1).length) {\n                if (!(parts(1)(i) >= '0' && parts(1)(i) <= '9')) return false\n            }\n        }\n        return true"
  ]
}