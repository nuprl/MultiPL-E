{
  "name": "mbpp_753_min_k",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        if (K > test_list.length) throw new Exception(\"K is greater than length of list\")\n        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.getOrElse(0))\n        sorted.slice(0, K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.getOrElse(0))\n        sorted.take(K.toInt)",
    "        if (K > test_list.length) return test_list\n        val min_list = new ListBuffer[Either[String, Long]]\n        for (i <- 0 until K.toInt) {\n            var min_value = Long.MaxValue\n            var min_index = -1\n            for (j <- i until test_list.length) {\n                if (test_list(j).right.get < min_value) {\n                    min_value = test_list(j).right.get\n                    min_index = j\n                }\n            }\n            min_list += test_list(min_index)\n            val temp = test_list(i)\n            test_list(i) = test_list(min_index)\n            test_list(min_index) = temp\n        }\n        return min_list.toList",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith(_.right.get < _.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x.right.get)\n        sorted.slice(0, K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        if (K < 0) throw new IllegalArgumentException\n        if (K == 0) return List()\n        var min_list = new ListBuffer[Either[String, Long]]\n        var min_list_size = 0\n        for (i <- 0 until test_list.length) {\n            if (min_list_size < K) {\n                min_list += test_list(i)\n                min_list_size += 1\n            } else {\n                var max_index = 0\n                var max_value = min_list(0)\n                for (j <- 1 until min_list_size) {\n                    if (min_list(j) > max_value) {\n                        max_index = j\n                        max_value = min_list(j)\n                    }\n                }\n                if (test_list(i) < max_value) {\n                    min_list(max_index) = test_list(i)\n                }\n            }\n        }\n        return min_list.toList",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)"
  ]
}