{
  "name": "mbpp_753_min_k",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    def minK(test_list : List[Either[String, Long]], K : Long) : List[Either[String, Long]] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(minK((List[Either[String, Long]]((\"Manjeet\", 10l), (\"Akshat\", 4l), (\"Akash\", 2l), (\"Nikhil\", 8l))), (2l)).equals((List[Either[String, Long]]((\"Akash\", 2l), (\"Akshat\", 4l)))));\n    assert(minK((List[Either[String, Long]]((\"Sanjeev\", 11l), (\"Angat\", 5l), (\"Akash\", 3l), (\"Nepin\", 9l))), (3l)).equals((List[Either[String, Long]]((\"Akash\", 3l), (\"Angat\", 5l), (\"Nepin\", 9l)))));\n    assert(minK((List[Either[String, Long]]((\"tanmay\", 14l), (\"Amer\", 11l), (\"Ayesha\", 9l), (\"SKD\", 16l))), (1l)).equals((List[Either[String, Long]]((\"Ayesha\", 9l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        if (K > test_list.length) throw new Exception(\"K is greater than length of list\")\n        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.getOrElse(0))\n        sorted.slice(0, K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.getOrElse(0))\n        sorted.take(K.toInt)",
    "        if (K > test_list.length) return test_list\n        val min_list = new ListBuffer[Either[String, Long]]\n        for (i <- 0 until K.toInt) {\n            var min_value = Long.MaxValue\n            var min_index = -1\n            for (j <- i until test_list.length) {\n                if (test_list(j).right.get < min_value) {\n                    min_value = test_list(j).right.get\n                    min_index = j\n                }\n            }\n            min_list += test_list(min_index)\n            val temp = test_list(i)\n            test_list(i) = test_list(min_index)\n            test_list(min_index) = temp\n        }\n        return min_list.toList",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith(_.right.get < _.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x.right.get)\n        sorted.slice(0, K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        if (K < 0) throw new IllegalArgumentException\n        if (K == 0) return List()\n        var min_list = new ListBuffer[Either[String, Long]]\n        var min_list_size = 0\n        for (i <- 0 until test_list.length) {\n            if (min_list_size < K) {\n                min_list += test_list(i)\n                min_list_size += 1\n            } else {\n                var max_index = 0\n                var max_value = min_list(0)\n                for (j <- 1 until min_list_size) {\n                    if (min_list(j) > max_value) {\n                        max_index = j\n                        max_value = min_list(j)\n                    }\n                }\n                if (test_list(i) < max_value) {\n                    min_list(max_index) = test_list(i)\n                }\n            }\n        }\n        return min_list.toList",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val min_heap = new PriorityQueue[Either[String, Long]]()(Ordering.by((_ : Either[String, Long]).right.get))\n        for (i <- test_list) {\n            if (min_heap.size < K) min_heap.enqueue(i)\n            else {\n                if (min_heap.head.right.get > i.right.get) {\n                    min_heap.dequeue\n                    min_heap.enqueue(i)\n                }\n            }\n        }\n        min_heap.toList",
    "        val sorted = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        var min_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            min_list += test_list(i)\n        }\n        for (i <- K.toInt until test_list.length) {\n            val max_val = min_list.maxBy(x => x.right.getOrElse(0))\n            if (test_list(i).right.getOrElse(0) < max_val.right.getOrElse(0)) {\n                min_list -= max_val\n                min_list += test_list(i)\n            }\n        }\n        min_list.toList",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        test_list.sortWith((a, b) => a.right.get < b.right.get).take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.slice(0, K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(n) => n\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val minHeap = new MinHeap[Either[String, Long]](K.toInt)\n        for (i <- test_list) {\n            if (minHeap.size < K) {\n                minHeap.add(i)\n            } else {\n                if (i.isRight && minHeap.peek.isRight && i.right.get < minHeap.peek.right.get) {\n                    minHeap.pop\n                    minHeap.add(i)\n                }\n            }\n        }\n        minHeap.toList",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s.length\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.getOrElse(Long.MaxValue))\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.slice(0, K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(x) => x\n            case Right(x) => x\n        })\n        val result = sorted.take(K.toInt)\n        result",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted.take(K.toInt)",
    "        test_list.sortWith((x, y) => x.right.get < y.right.get).take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.slice(0, K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.slice(0, K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(_.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.take(K.toInt)",
    "        test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        }).take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s.length\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.slice(0, K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted.take(K.toInt)",
    "        if (test_list.length < K) throw new IllegalArgumentException(\"K must be less than or equal to the length of the list\")\n        val minHeap = new MinHeap(K)\n        for (elem <- test_list) {\n            if (minHeap.size < K) {\n                minHeap.insert(elem)\n            } else {\n                if (elem.right.get > minHeap.peek.right.get) {\n                    minHeap.extractMin\n                    minHeap.insert(elem)\n                }\n            }\n        }\n        minHeap.heap",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        var min_list = new ListBuffer[Either[String, Long]]()\n        var max_list = new ListBuffer[Either[String, Long]]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i).isLeft) {\n                if (min_list.length < K) {\n                    min_list += test_list(i)\n                } else {\n                    max_list += test_list(i)\n                }\n            } else {\n                if (max_list.length < K) {\n                    max_list += test_list(i)\n                } else {\n                    min_list += test_list(i)\n                }\n            }\n        }\n        min_list.toList",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        test_list.sortWith((x, y) => x.right.get < y.right.get).take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => {\n            if (a.isLeft && b.isLeft) {\n                a.left.get.length < b.left.get.length\n            } else if (a.isLeft) {\n                true\n            } else if (b.isLeft) {\n                false\n            } else {\n                a.right.get < b.right.get\n            }\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s.toLong\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.slice(0, K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted_list.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.take(K.toInt)",
    "        test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        }).take(K.toInt)",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        val sorted_list = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted_list.take(K.toInt)",
    "        test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        }).take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((x, y) => x.right.getOrElse(0) < y.right.getOrElse(0))\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted_list = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted_list.slice(0, K.toInt)",
    "        if (K < 0) throw new IllegalArgumentException(\"K must be non-negative\")\n        if (K == 0) return List()\n        if (test_list.length < K) throw new IllegalArgumentException(\"K must be less than or equal to the length of the list\")\n        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(x) => Long.MaxValue\n            case Right(x) => x\n        })\n        sorted.slice(0, K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.getOrElse(Long.MaxValue))\n        sorted.slice(0, K.toInt)",
    "        var result : List[Either[String, Long]] = List()\n        var min : Long = Long.MaxValue\n        var min_index : Long = -1\n        for (i <- 0 until K) {\n            for (j <- i until test_list.length) {\n                if (test_list(j).isRight && test_list(j).right.get < min) {\n                    min = test_list(j).right.get\n                    min_index = j\n                }\n            }\n            result = result :+ test_list(min_index)\n            min = Long.MaxValue\n            min_index = -1\n        }\n        return result",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => Long.MaxValue\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        if (K < 0) throw new IllegalArgumentException(\"K must be non-negative\")\n        if (K == 0) return List()\n        var min_list = ListBuffer[Either[String, Long]]()\n        for (i <- 0 until K) {\n            var min_index = -1\n            var min_value = Long.MaxValue\n            for (j <- 0 until test_list.length) {\n                if (test_list(j).isRight && test_list(j).right.get < min_value && !min_list.contains(test_list(j))) {\n                    min_index = j\n                    min_value = test_list(j).right.get\n                }\n            }\n            if (min_index == -1) return min_list.toList\n            min_list += test_list(min_index)\n        }\n        min_list.toList",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s.length\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        var min_list = List[Either[String, Long]]()\n        var max_list = List[Either[String, Long]]()\n        for (i <- 0 until K.toInt) {\n            min_list = min_list :+ test_list(i)\n        }\n        for (i <- K.toInt until test_list.length) {\n            var max_value = min_list.maxBy(_.right.get)\n            if (test_list(i).right.get < max_value.right.get) {\n                min_list = min_list.filter(_ != max_value)\n                min_list = min_list :+ test_list(i)\n            }\n        }\n        min_list",
    "        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.take(K.toInt)",
    "        test_list.sortBy(_.right.get).take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((x, y) => x.right.get < y.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(n) => n\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.getOrElse(0))\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x match {\n            case Left(s) => s\n            case Right(l) => l\n        })\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(_.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortWith((a, b) => a.right.get < b.right.get)\n        sorted.take(K.toInt)",
    "        val sorted = test_list.sortBy(x => x.right.getOrElse(0))\n        sorted.take(K.toInt)"
  ]
}