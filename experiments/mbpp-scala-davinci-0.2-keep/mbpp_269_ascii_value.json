{
  "name": "mbpp_269_ascii_value",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the ascii value of a character.\n    def asciiValue(k : String) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(asciiValue((\"A\")) == (65l));\n    assert(asciiValue((\"R\")) == (82l));\n    assert(asciiValue((\"S\")) == (83l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var sum : Long = 0\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        return sum",
    "        k.map(x => x.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        var sum : Long = 0\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        return sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(x => x.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        var sum : Long = 0\n        for (i <- k) {\n            sum += i.toInt\n        }\n        sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        var sum : Long = 0\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        return sum",
    "        k.foldLeft(0L)((a, b) => a + b.toInt)",
    "        var sum : Long = 0\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        return sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        var sum : Long = 0\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        var sum : Long = 0\n        for (c <- k) {\n            sum += c.toInt\n        }\n        return sum",
    "        var sum : Long = 0\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        return sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        var sum = 0L\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        var sum : Long = 0\n        for (i <- 0 until k.length) {\n            sum += k(i).toLong\n        }\n        return sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        var sum : Long = 0\n        for (c <- k) {\n            sum += c.toInt\n        }\n        return sum",
    "        k.map(_.toLong).sum",
    "        var sum : Long = 0\n        for (c <- k) {\n            sum += c.toInt\n        }\n        return sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        var sum : Long = 0\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        return sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(x => x.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        var sum : Long = 0\n        for (c <- k) {\n            sum += c.toInt\n        }\n        sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        var sum : Long = 0\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        return sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.toList.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        var sum : Long = 0\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        return sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toInt).sum",
    "        var sum = 0L\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        val s = k.toList\n        s.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        var sum : Long = 0\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        return sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        var sum : Long = 0\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        return sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.toList.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        var sum = 0L\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        var sum = 0L\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        return sum",
    "        k.map(_.toInt).sum",
    "        k.map(x => x.toLong).sum",
    "        var sum : Long = 0\n        for (i <- k) {\n            sum += i.toInt\n        }\n        sum",
    "        k.map(_.toLong).sum",
    "        var sum : Long = 0\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        sum",
    "        k.foldLeft(0L)((a, b) => a + b.toInt)",
    "        k.map(_.toLong).sum",
    "        var sum : Long = 0\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        sum",
    "        k.map(_.toLong).sum",
    "        return k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(x => x.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toLong).sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toInt).sum",
    "        var sum = 0L\n        for (i <- 0 until k.length) {\n            sum += k.charAt(i).toInt\n        }\n        sum",
    "        k.map(_.toInt).sum",
    "        if (k.length == 1) k.charAt(0).toLong\n        else 0",
    "        var sum : Long = 0\n        for (i <- 0 until k.length) {\n            sum += k(i).toInt\n        }\n        return sum",
    "        k.map(_.toInt).sum",
    "        k.map(_.toLong).sum"
  ]
}