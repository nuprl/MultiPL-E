{
  "name": "mbpp_740_tuple_to_dict",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var test_dict = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map",
    "        val tup = test_tup.toString.toList.map(_.asDigit.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict(tup(i)) = tup(i + 1)\n        }\n        dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_num = test_tup\n        while (test_num > 0) {\n            test_list = (test_num % 10) :: test_list\n            test_num /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        return test_dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_final = List[Long]()\n        var test_list_final = List[Long]()\n        var test_list_final_rev = List[Long]()\n        var test_list_final_rev_final = List[Long]()\n        var test_list_final_final = List[Long]()\n        var test_list_final_final_rev = List[Long]()\n        var test_list_final_final_rev_final = List[Long]()\n        var test_list_final_final_final = List[Long]()\n        var test_list_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_rev_final = List[Long]()\n        var test_list_final_final_final_final = List[Long]()\n        var test_list_final_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_final_rev_final = List[Long]()\n        var test_list_final_final_final_final_final = List[Long]()\n        var test_list_final_final_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_final_final_rev_final = List[Long]()\n        var test_list_final_final_final_final_final_final = List[Long]()\n        var test_list_final_final_final_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_final_final_final_rev_final = List[Long]()\n        var test_list_final_final_final_final_final_final_final = List[Long]()\n        var test_list_final_final_final_final_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_final_final_final_final_rev_final",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        test_tup_list_pairs_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1)))\n        val test_tup_list_pairs_map_dict = test_tup_list_pairs_map.toMap\n        test_tup_list_pairs_map_dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return test_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i).toString.toLong -> test_list(i + 1).toString.toLong)\n        }\n        return test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_dict = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_rev = List[Long]()\n        var test_list_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong - 48) -> (test_tup.toString.charAt(i + 1).toLong - 48)\n            i += 1\n        }\n        return test_dict",
    "        val result = Map[Long,Long]()\n        val tup = test_tup.toString.map(_.asDigit).toList\n        for (i <- 0 until tup.length - 1) {\n            result(tup(i)) = tup(i + 1)\n        }\n        result",
    "        val tup = test_tup.toString.toList.map(x => x.toString.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_str = test_tup.toString\n        for (i <- 0 until test_str.length) test_list = test_list :+ test_str(i).toString.toLong\n        for (i <- 0 until test_list.length - 1) test_dict += (test_list(i) -> test_list(i + 1))\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_2 = List[Long]()\n        var test_list_rev_3 = List[Long]()\n        var test_list_rev_4 = List[Long]()\n        var test_list_rev_5 = List[Long]()\n        var test_list_rev_6 = List[Long]()\n        var test_list_rev_7 = List[Long]()\n        var test_list_rev_8 = List[Long]()\n        var test_list_rev_9 = List[Long]()\n        var test_list_rev_10 = List[Long]()\n        var test_list_rev_11 = List[Long]()\n        var test_list_rev_12 = List[Long]()\n        var test_list_rev_13 = List[Long]()\n        var test_list_rev_14 = List[Long]()\n        var test_list_rev_15 = List[Long]()\n        var test_list_rev_16 = List[Long]()\n        var test_list_rev_17 = List[Long]()\n        var test_list_rev_18 = List[Long]()\n        var test_list_rev_19 = List[Long]()\n        var test_list_rev_20 = List[Long]()\n        var test_list_rev_21 = List[Long]()\n        var test_list_rev_22 = List[Long]()\n        var test_list_rev_23 = List[Long]()\n        var test_list_rev_24 = List[Long]()\n        var test_list_rev_25 = List[Long]()\n        var test_list_rev_26 = List[Long]()\n        var test_list_rev_27 = List[Long]()\n        var test_list_rev_28 = List[Long]()\n        var test_list_rev_29 = List[Long]()\n        var test_list_rev_30 = List[Long]()\n        var test_list_rev",
    "        val test_tup_arr = test_tup.toString.toCharArray.map(_.asDigit.toLong)\n        val test_tup_arr_pairs = test_tup_arr.sliding(2).toList\n        val test_tup_dict = test_tup_arr_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_dict",
    "        var dict = Map[Long,Long]()\n        var tup = test_tup\n        var i = 0\n        while (tup > 0) {\n            if (i % 2 == 0) {\n                dict += (tup % 10 -> 0)\n            } else {\n                dict(tup % 10) = dict(tup % 10) + 1\n            }\n            tup /= 10\n            i += 1\n        }\n        dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_dict",
    "        var result = Map[Long,Long]()\n        var tup = test_tup\n        var i = 0\n        while (tup > 0) {\n            var key = tup % 10\n            tup /= 10\n            var value = tup % 10\n            tup /= 10\n            result += (key -> value)\n        }\n        return result",
    "        val test_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_list_pairs = test_list.sliding(2,2).toList\n        val test_list_pairs_map = test_list_pairs.map(x => (x(0),x(1)))\n        val test_list_pairs_map_dict = test_list_pairs_map.toMap\n        return test_list_pairs_map_dict",
    "        var dict = Map[Long,Long]()\n        var test_tup_str = test_tup.toString\n        for (i <- 0 until test_tup_str.length - 1) {\n            dict += (test_tup_str(i).asDigit.toLong -> test_tup_str(i + 1).asDigit.toLong)\n        }\n        dict",
    "        var dict = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        for (i <- 0 until test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x.head,x.last)).toMap\n        return test_tup_list_pairs_map",
    "        val tup = test_tup.toString.toList.map(_.asDigit.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_tup_list.length) {\n            if (i % 2 == 0) {\n                test_list = test_tup_list(i) :: test_list\n            } else {\n                test_list = test_list :+ test_tup_list(i)\n                test_dict += (test_list(0) -> test_list(1))\n                test_list = List[Long]()\n            }\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        test_dict",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict",
    "        val tup = test_tup.toString.split(\"\").map(_.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict(tup(i)) = tup(i + 1)\n        }\n        dict",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict",
    "        val tup = test_tup.toString.toList.map(_.toString.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x.head, x.last)).toMap\n        test_tup_list_pairs_dict",
    "        var test_dict = Map[Long,Long]()\n        for (i <- 0 until test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        test_dict",
    "        val tup = test_tup.toString.split(\"\").map(_.toLong).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i).asDigit.toLong -> test_list(i + 1).asDigit.toLong)\n        }\n        return test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_list_pairs_dict",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_dict = Map[Long,Long]()\n        for (i <- 0 until test_tup_list_pairs.length) {\n            test_tup_dict += (test_tup_list_pairs(i)(0) -> test_tup_list_pairs(i)(1))\n        }\n        test_tup_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        var test_tup_dict = Map[Long,Long]()\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_tup_dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        test_tup_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while (temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while (temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_list_pairs_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_final = List[Long]()\n        var test_tup_list = test_tup.toString.toList\n        for (i <- 0 to test_tup_list.length - 1) {\n            test_list = test_list :+ test_tup_list(i).asDigit.toLong\n        }\n        test_list_rev = test_list.reverse\n        for (i <- 0 to test_list_rev.length - 1) {\n            if (i % 2 == 0) {\n                test_list_final = test_list_final :+ test_list_rev(i)\n            }\n        }\n        test_list_final = test_list_final.reverse\n        for (i <- 0 to test_list_final.length - 1) {\n            if (i % 2 == 0) {\n                test_dict += (test_list_final(i) -> test_list_final(i + 1))\n            }\n        }\n        return test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var dict = Map[Long,Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = test_tup.toString.toList\n        for (i <- 0 to test_tup_list.length - 1) {\n            test_list = test_list :+ test_tup_list(i).toString.toLong\n        }\n        for (i <- 0 to test_list.length - 2 by 2) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict",
    "        val tup = test_tup.toString.toList.map(_.toString.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        return dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var i = 0\n        while (i < test_tup) {\n            test_list = test_list :+ i\n            i += 1\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        return test_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        return test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_temp = List[Long]()\n        var test_list_rev_temp_rev = List[Long]()\n        var test_list_rev_temp_rev_temp = List[Long]()\n        var test_list_rev_temp_rev_temp_rev = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp_rev = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp_rev_temp = List[Long]()\n        var test_list_rev_temp_rev_temp_rev_temp_rev_temp",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toLong - 48) -> (test_tup.toString.charAt(i + 1).toLong - 48)\n            i += 1\n        }\n        dict",
    "        val test_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_list_pairs = test_list.sliding(2,2).toList\n        val test_list_pairs_map = test_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_list_pairs_map",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i).asDigit.toLong -> test_list(i + 1).asDigit.toLong)\n        }\n        test_dict",
    "        var dict = Map[Long,Long]()\n        var list = List[Long]()\n        var n = test_tup\n        while (n > 0) {\n            list = (n % 10) :: list\n            n /= 10\n        }\n        for (i <- 0 until list.length - 1) {\n            dict += (list(i) -> list(i + 1))\n        }\n        dict",
    "        var result = Map[Long,Long]()\n        var temp = test_tup\n        var i = 0\n        while (temp > 0) {\n            result += (i -> (temp % 10))\n            temp /= 10\n            i += 1\n        }\n        result",
    "        val test_list = test_tup.toString.map(_.asDigit).toList\n        val test_list_pairs = test_list.grouped(2).toList\n        val test_list_pairs_map = test_list_pairs.map(x => (x(0).toLong, x(1).toLong)).toMap\n        return test_list_pairs_map",
    "        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        return test_dict",
    "        val test_tup_list = test_tup.toString.map(_.asDigit).toList\n        val test_tup_list_pairs = test_tup_list.grouped(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0).toLong, x(1).toLong)).toMap\n        return test_tup_list_pairs_map",
    "        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i).toString.toLong -> test_list(i + 1).toString.toLong)\n        }\n        return test_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        return test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_num = test_tup\n        while (test_num > 0) {\n            test_list = (test_num % 10) :: test_list\n            test_num /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict",
    "        var test_map = Map[Long,Long]()\n        var i = 1\n        while (i < test_tup.toString.length) {\n            test_map += (test_tup.toString.charAt(i-1).asDigit.toLong -> test_tup.toString.charAt(i).asDigit.toLong)\n            i += 2\n        }\n        test_map",
    "        var test_dict = Map[Long,Long]()\n        for (i <- 0 until test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = test_tup.toString.toList.map(x => x.asDigit.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        return test_dict",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = List[Long]()\n        var test_tup_list_rev = List[Long]()\n        var test_tup_list_rev_temp = List[Long]()\n        var test_tup_list_rev_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_tup_list_rev_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp = List[Long]()\n        var test_t",
    "        var result = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            result += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return result",
    "        val tup = test_tup.toString.split(\"\").map(_.toLong).toList\n        var dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        var result = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            result += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        result",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var i = 0\n        while (test_tup > 0) {\n            test_list = (test_tup % 10) :: test_list\n            test_tup /= 10\n        }\n        while (i < test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n            i += 1\n        }\n        return test_dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        test_tup_list_pairs_dict",
    "        val tup = test_tup.toString.split(\"\").map(_.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += tup(i) -> tup(i + 1)\n        }\n        dict",
    "        val test_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_list_pairs = test_list.sliding(2,1).toList\n        val test_list_pairs_dict = test_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_list_pairs_dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while (temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        test_tup_list_pairs_map",
    "        val test_tup_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x.head,x.last)).toMap\n        return test_tup_list_pairs_dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.zip(test_tup_list.tail)\n        val test_tup_dict = test_tup_list_pairs.toMap\n        return test_tup_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list2 = List[Long]()\n        var test_list3 = List[Long]()\n        var test_list4 = List[Long]()\n        var test_list5 = List[Long]()\n        var test_list6 = List[Long]()\n        var test_list7 = List[Long]()\n        var test_list8 = List[Long]()\n        var test_list9 = List[Long]()\n        var test_list10 = List[Long]()\n        var test_list11 = List[Long]()\n        var test_list12 = List[Long]()\n        var test_list13 = List[Long]()\n        var test_list14 = List[Long]()\n        var test_list15 = List[Long]()\n        var test_list16 = List[Long]()\n        var test_list17 = List[Long]()\n        var test_list18 = List[Long]()\n        var test_list19 = List[Long]()\n        var test_list20 = List[Long]()\n        var test_list21 = List[Long]()\n        var test_list22 = List[Long]()\n        var test_list23 = List[Long]()\n        var test_list24 = List[Long]()\n        var test_list25 = List[Long]()\n        var test_list26 = List[Long]()\n        var test_list27 = List[Long]()\n        var test_list28 = List[Long]()\n        var test_list29 = List[Long]()\n        var test_list30 = List[Long]()\n        var test_list31 = List[Long]()\n        var test_list32 = List[Long]()\n        var test_list33 = List[Long]()\n        var test_list34 = List[Long]()\n        var test_list35 = List[Long]()\n        var test_list36 = List[Long]()\n        var test_list37 = List[Long]()\n        var test_list38 = List[Long]()\n        var test_",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while (temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict",
    "        val map = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        map",
    "        val tup = test_tup.toString.map(_.asDigit).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        return dict",
    "        val tup = test_tup.toString.toList.map(_.toString.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict(tup(i)) = tup(i + 1)\n        }\n        dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_2 = List[Long]()\n        var test_list_3 = List[Long]()\n        var test_list_4 = List[Long]()\n        var test_list_5 = List[Long]()\n        var test_list_6 = List[Long]()\n        var test_list_7 = List[Long]()\n        var test_list_8 = List[Long]()\n        var test_list_9 = List[Long]()\n        var test_list_10 = List[Long]()\n        var test_list_11 = List[Long]()\n        var test_list_12 = List[Long]()\n        var test_list_13 = List[Long]()\n        var test_list_14 = List[Long]()\n        var test_list_15 = List[Long]()\n        var test_list_16 = List[Long]()\n        var test_list_17 = List[Long]()\n        var test_list_18 = List[Long]()\n        var test_list_19 = List[Long]()\n        var test_list_20 = List[Long]()\n        var test_list_21 = List[Long]()\n        var test_list_22 = List[Long]()\n        var test_list_23 = List[Long]()\n        var test_list_24 = List[Long]()\n        var test_list_25 = List[Long]()\n        var test_list_26 = List[Long]()\n        var test_list_27 = List[Long]()\n        var test_list_28 = List[Long]()\n        var test_list_29 = List[Long]()\n        var test_list_30 = List[Long]()\n        var test_list_31 = List[Long]()\n        var test_list_32 = List[Long]()\n        var test_list_33 = List[Long]()\n        var test_list_34 = List[Long]()\n        var test_list_35 = List[Long]()\n        var test_list_36 = List",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        test_tup_list_pairs_map",
    "        val tup = test_tup.toString.toList.map(_.toString.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toLong - 48 -> test_tup.toString.charAt(i + 1).toLong - 48)\n            i += 1\n        }\n        dict",
    "        var test_list = List[Long]()\n        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup) {\n            test_list = test_list :+ i\n            i += 1\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        return test_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_rev = List[Long]()\n        var test_list_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev",
    "        val tup = test_tup.toString.split(\"\").map(_.toLong).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict(tup(i)) = tup(i + 1)\n        }\n        dict",
    "        val tup = test_tup.toString.split(\"\").map(_.toLong)\n        var dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        var dict = Map[Long,Long]()\n        var tup = test_tup\n        while(tup > 0) {\n            dict += (tup % 10 -> (tup / 10) % 10)\n            tup /= 100\n        }\n        dict",
    "        var dict = Map[Long,Long]()\n        var temp = test_tup\n        var i = 0\n        while (temp > 0) {\n            var rem = temp % 10\n            temp = temp / 10\n            if (i % 2 == 0) {\n                dict += (rem -> 0)\n            } else {\n                dict(rem) = dict(rem) + 1\n            }\n            i += 1\n        }\n        return dict",
    "        val test_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_list_pairs = test_list.grouped(2).toList\n        val test_list_pairs_map = test_list_pairs.map(x => (x(0), x(1))).toMap\n        test_list_pairs_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x.head, x.last)).toMap\n        return test_tup_list_pairs_dict",
    "        val tup = test_tup.toString.map(_.asDigit).toList\n        val tup_pairs = tup.grouped(2).toList\n        val tup_dict = tup_pairs.map(x => (x(0).toLong, x(1).toLong)).toMap\n        return tup_dict",
    "        val test_list = test_tup.toString.toList.map(_.toString.toLong)\n        var dict = Map[Long,Long]()\n        for (i <- 0 until test_list.length - 1) {\n            dict += (test_list(i) -> test_list(i + 1))\n        }\n        dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString().length - 1) {\n            test_dict += (test_tup.toString()(i).asDigit.toLong -> test_tup.toString()(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        test_tup_list_pairs_map",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while (temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_dict",
    "        var dict = Map[Long,Long]()\n        var tup = test_tup\n        var i = 0\n        while(tup > 0) {\n            var digit = tup % 10\n            tup = tup / 10\n            if(i % 2 == 0) {\n                dict += (digit -> dict.getOrElse(digit, 0))\n            } else {\n                dict += (digit -> (dict.getOrElse(digit, 0) + 1))\n            }\n            i += 1\n        }\n        return dict",
    "        val test_tup_list = test_tup.toString.split(\"\").map(_.toLong).toList\n        val test_tup_list_pairs = test_tup_list.zip(test_tup_list.tail)\n        val test_tup_dict = test_tup_list_pairs.toMap\n        test_tup_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        test_tup_list_pairs_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var i = 0\n        while (test_tup > 0) {\n            test_list = (test_tup % 10) :: test_list\n            test_tup /= 10\n        }\n        while (i < test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n            i += 1\n        }\n        return test_map",
    "        val test_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_list_pairs = test_list.sliding(2,1).toList\n        val test_list_pairs_dict = test_list_pairs.map(x => (x(0),x(1))).toMap\n        test_list_pairs_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 to test_list.length - 2) {\n            test_dict += (test_list(i).toString.toLong -> test_list(i + 1).toString.toLong)\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        return test_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 to test_list.length - 2) {\n            test_dict += (test_list(i).toString.toLong -> test_list(i + 1).toString.toLong)\n        }\n        return test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(x => x.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_dict",
    "        var test_dict = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        for (i <- 0 until test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict",
    "        val test_tup_list = test_tup.toString.map(_.asDigit).toList\n        val test_tup_list_pairs = test_tup_list.grouped(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0).toLong, x(1).toLong)).toMap\n        return test_tup_list_pairs_map",
    "        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i).asDigit.toLong -> test_list(i + 1).asDigit.toLong)\n        }\n        test_dict",
    "        val tup = test_tup.toString.split(\"\").map(_.toLong).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return test_dict",
    "        val test_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_list_pairs = test_list.sliding(2).toList\n        val test_dict = test_list_pairs.map(x => (x(0), x(1))).toMap\n        test_dict",
    "        val tup = test_tup.toString.map(_.asDigit.toLong).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x.head,x.last)).toMap\n        test_tup_list_pairs_map",
    "        var dict = Map[Long,Long]()\n        var tup = test_tup\n        var i = 0\n        while (tup > 0) {\n            var digit = tup % 10\n            if (i % 2 == 0) {\n                dict += (digit -> 0)\n            } else {\n                dict(digit) = dict(digit) + 1\n            }\n            tup /= 10\n            i += 1\n        }\n        dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i).toString.toLong -> test_list(i + 1).toString.toLong)\n        }\n        test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_dict",
    "        var dict = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n        }\n        dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x.head, x.last))\n        val test_tup_list_pairs_map_dict = test_tup_list_pairs_map.toMap\n        return test_tup_list_pairs_map_dict",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict",
    "        val test_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        val test_list_pairs = test_list.sliding(2,2).toList\n        val test_list_pairs_map = test_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_list_pairs_map",
    "        val test_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_list_pairs = test_list.sliding(2,2).toList\n        val test_list_pairs_map = test_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_list_pairs_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.zip(test_tup_list.tail)\n        test_tup_list_pairs.toMap",
    "        val tup = test_tup.toString.toList.map(x => x.toString.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_list_pairs_map",
    "        val test_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_list_len = test_list.length\n        val test_dict = Map[Long,Long]()\n        for (i <- 0 until test_list_len - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.zip(test_tup_list.tail)\n        val test_tup_dict = test_tup_list_pairs.toMap\n        return test_tup_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i).toString.toLong -> test_list(i + 1).toString.toLong)\n        }\n        return test_dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        return test_dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return test_dict",
    "        val tup = test_tup.toString.map(_.asDigit).toList\n        val dict = new HashMap[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict.put(tup(i), tup(i + 1))\n        }\n        dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,1).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_2 = List[Long]()\n        var test_list_rev_3 = List[Long]()\n        var test_list_rev_4 = List[Long]()\n        var test_list_rev_5 = List[Long]()\n        var test_list_rev_6 = List[Long]()\n        var test_list_rev_7 = List[Long]()\n        var test_list_rev_8 = List[Long]()\n        var test_list_rev_9 = List[Long]()\n        var test_list_rev_10 = List[Long]()\n        var test_list_rev_11 = List[Long]()\n        var test_list_rev_12 = List[Long]()\n        var test_list_rev_13 = List[Long]()\n        var test_list_rev_14 = List[Long]()\n        var test_list_rev_15 = List[Long]()\n        var test_list_rev_16 = List[Long]()\n        var test_list_rev_17 = List[Long]()\n        var test_list_rev_18 = List[Long]()\n        var test_list_rev_19 = List[Long]()\n        var test_list_rev_20 = List[Long]()\n        var test_list_rev_21 = List[Long]()\n        var test_list_rev_22 = List[Long]()\n        var test_list_rev_23 = List[Long]()\n        var test_list_rev_24 = List[Long]()\n        var test_list_rev_25 = List[Long]()\n        var test_list_rev_26 = List[Long]()\n        var test_list_rev_27 = List[Long]()\n        var test_list_rev_28 = List[Long]()\n        var test_list_rev_29 = List[Long]()\n        var test_list_rev_30 = List[Long]()\n        var test_list_rev",
    "        val tup = test_tup.toString.split(\"\").map(_.toLong)\n        val res = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            res(tup(i)) = tup(i + 1)\n        }\n        res",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        return test_dict",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_rev = List[Long]()\n        var test_list_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while(temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for(i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        return test_dict",
    "        val tup = test_tup.toString.map(_.asDigit).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        val test_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_list_pairs = test_list.sliding(2,1).toList\n        val test_list_pairs_map = test_list_pairs.map(x => (x(0),x(1)))\n        test_list_pairs_map.toMap",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_string = test_tup.toString\n        for (i <- 0 until test_string.length) {\n            test_list = test_list :+ test_string(i).asDigit.toLong\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        return test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_dict = Map[Long,Long]()\n        for (i <- 0 until test_tup_list_pairs.length) {\n            test_tup_dict += (test_tup_list_pairs(i)(0) -> test_tup_list_pairs(i)(1))\n        }\n        test_tup_dict",
    "        var dict = Map[Long,Long]()\n        var tup = test_tup\n        var i = 0\n        while (tup > 0) {\n            var digit = tup % 10\n            if (i % 2 == 0) {\n                dict += (digit -> 0)\n            } else {\n                dict(digit) += 1\n            }\n            tup /= 10\n            i += 1\n        }\n        dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_str = \"\"\n        var test_list_rev_str_list = List[String]()\n        var test_list_rev_str_list_rev = List[String]()\n        var test_list_rev_str_list_rev_str = \"\"\n        var test_list_rev_str_list_rev_str_list = List[String]()\n        var test_list_rev_str_list_rev_str_list_rev = List[String]()\n        var test_list_rev_str_list_rev_str_list_rev_str = \"\"\n        var test_list_rev_str_list_rev_str_list_rev_str_list = List[String]()\n        var test_list_rev_str_list_rev_str_list_rev_str_list_rev = List[String]()\n        var test_list_rev_str_list_rev_str_list_rev_str_list_rev_str = \"\"\n        var test_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list = List[String]()\n        var test_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list_rev = List[String]()\n        var test_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list_rev_str = \"\"\n        var test_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list = List[String]()\n        var test_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list_rev = List[String]()\n        var test_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list_rev_str_list_rev_str = \"\"",
    "        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i).asDigit.toLong -> test_list(i + 1).asDigit.toLong)\n        }\n        return test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.grouped(2).map(_.toList).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_list_pairs_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.zip(test_tup_list.tail)\n        val test_tup_dict = test_tup_list_pairs.toMap\n        return test_tup_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_temp = List[Long]()\n        var test_list_temp_2 = List[Long]()\n        var test_list_temp_3 = List[Long]()\n        var test_list_temp_4 = List[Long]()\n        var test_list_temp_5 = List[Long]()\n        var test_list_temp_6 = List[Long]()\n        var test_list_temp_7 = List[Long]()\n        var test_list_temp_8 = List[Long]()\n        var test_list_temp_9 = List[Long]()\n        var test_list_temp_10 = List[Long]()\n        var test_list_temp_11 = List[Long]()\n        var test_list_temp_12 = List[Long]()\n        var test_list_temp_13 = List[Long]()\n        var test_list_temp_14 = List[Long]()\n        var test_list_temp_15 = List[Long]()\n        var test_list_temp_16 = List[Long]()\n        var test_list_temp_17 = List[Long]()\n        var test_list_temp_18 = List[Long]()\n        var test_list_temp_19 = List[Long]()\n        var test_list_temp_20 = List[Long]()\n        var test_list_temp_21 = List[Long]()\n        var test_list_temp_22 = List[Long]()\n        var test_list_temp_23 = List[Long]()\n        var test_list_temp_24 = List[Long]()\n        var test_list_temp_25 = List[Long]()\n        var test_list_temp_26 = List[Long]()\n        var test_list_temp_27 = List[Long]()\n        var test_list_temp_28 = List[Long]()\n        var test_list_temp_29 = List[Long]()\n        var test_list_temp_30 = List[Long]()\n        var test_list_temp",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        test_dict",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_tup_list.length) {\n            test_list = test_list :+ test_tup_list(i)\n            if (i % 2 == 1) {\n                test_map += (test_list(0) -> test_list(1))\n                test_list = List[Long]()\n            }\n        }\n        return test_map",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_size = 0\n        while (test_tup > 0) {\n            test_list = (test_tup % 10) :: test_list\n            test_tup /= 10\n            test_list_size += 1\n        }\n        for (i <- 0 until test_list_size - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_2 = List[Long]()\n        var test_list_rev_3 = List[Long]()\n        var test_list_rev_4 = List[Long]()\n        var test_list_rev_5 = List[Long]()\n        var test_list_rev_6 = List[Long]()\n        var test_list_rev_7 = List[Long]()\n        var test_list_rev_8 = List[Long]()\n        var test_list_rev_9 = List[Long]()\n        var test_list_rev_10 = List[Long]()\n        var test_list_rev_11 = List[Long]()\n        var test_list_rev_12 = List[Long]()\n        var test_list_rev_13 = List[Long]()\n        var test_list_rev_14 = List[Long]()\n        var test_list_rev_15 = List[Long]()\n        var test_list_rev_16 = List[Long]()\n        var test_list_rev_17 = List[Long]()\n        var test_list_rev_18 = List[Long]()\n        var test_list_rev_19 = List[Long]()\n        var test_list_rev_20 = List[Long]()\n        var test_list_rev_21 = List[Long]()\n        var test_list_rev_22 = List[Long]()\n        var test_list_rev_23 = List[Long]()\n        var test_list_rev_24 = List[Long]()\n        var test_list_rev_25 = List[Long]()\n        var test_list_rev_26 = List[Long]()\n        var test_list_rev_27 = List[Long]()\n        var test_list_rev_28 = List[Long]()\n        var test_list_rev_29 = List[Long]()\n        var test_list_rev_30 = List[Long]()\n        var test_list_rev",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict",
    "        val test_tup_list = test_tup.toString.map(_.asDigit).toList\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x.head.toLong, x.last.toLong)).toMap\n        test_tup_list_pairs_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_dict = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_dict",
    "        var test_dict = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            test_dict += (test_tup.toString.substring(i, i + 1).toLong -> test_tup.toString.substring(i + 1, i + 2).toLong)\n        }\n        return test_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        return test_dict",
    "        val tup = test_tup.toString.toList.map(x => x.asDigit.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toLong - 48) -> (test_tup.toString.charAt(i + 1).toLong - 48)\n            i += 1\n        }\n        dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        return test_dict",
    "        val map = Map[Long,Long]()\n        val tup = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until tup.length - 1) {\n            map += (tup(i) -> tup(i + 1))\n        }\n        map",
    "        var test_dict = Map[Long,Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        test_dict",
    "        val tup = test_tup.toString.map(_.asDigit).toList\n        val dict = new HashMap[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        val tup = test_tup.toString.split(\"\").map(_.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        val tup = test_tup.toString.split(\"\").map(_.toLong).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.zip(test_tup_list.tail)\n        val test_tup_dict = test_tup_list_pairs.toMap\n        test_tup_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        var dict = Map[Long,Long]()\n        for (i <- 0 to test_tup_list.length - 2) {\n            dict += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        return test_dict"
  ]
}