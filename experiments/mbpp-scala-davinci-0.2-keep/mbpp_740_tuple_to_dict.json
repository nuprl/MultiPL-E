{
  "name": "mbpp_740_tuple_to_dict",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var test_dict = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map",
    "        val tup = test_tup.toString.toList.map(_.asDigit.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict(tup(i)) = tup(i + 1)\n        }\n        dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_num = test_tup\n        while (test_num > 0) {\n            test_list = (test_num % 10) :: test_list\n            test_num /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        return test_dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_final = List[Long]()\n        var test_list_final = List[Long]()\n        var test_list_final_rev = List[Long]()\n        var test_list_final_rev_final = List[Long]()\n        var test_list_final_final = List[Long]()\n        var test_list_final_final_rev = List[Long]()\n        var test_list_final_final_rev_final = List[Long]()\n        var test_list_final_final_final = List[Long]()\n        var test_list_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_rev_final = List[Long]()\n        var test_list_final_final_final_final = List[Long]()\n        var test_list_final_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_final_rev_final = List[Long]()\n        var test_list_final_final_final_final_final = List[Long]()\n        var test_list_final_final_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_final_final_rev_final = List[Long]()\n        var test_list_final_final_final_final_final_final = List[Long]()\n        var test_list_final_final_final_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_final_final_final_rev_final = List[Long]()\n        var test_list_final_final_final_final_final_final_final = List[Long]()\n        var test_list_final_final_final_final_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_final_final_final_final_rev_final",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        test_tup_list_pairs_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1)))\n        val test_tup_list_pairs_map_dict = test_tup_list_pairs_map.toMap\n        test_tup_list_pairs_map_dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return test_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i).toString.toLong -> test_list(i + 1).toString.toLong)\n        }\n        return test_dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_dict = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_rev = List[Long]()\n        var test_list_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong - 48) -> (test_tup.toString.charAt(i + 1).toLong - 48)\n            i += 1\n        }\n        return test_dict",
    "        val result = Map[Long,Long]()\n        val tup = test_tup.toString.map(_.asDigit).toList\n        for (i <- 0 until tup.length - 1) {\n            result(tup(i)) = tup(i + 1)\n        }\n        result",
    "        val tup = test_tup.toString.toList.map(x => x.toString.toLong)\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_str = test_tup.toString\n        for (i <- 0 until test_str.length) test_list = test_list :+ test_str(i).toString.toLong\n        for (i <- 0 until test_list.length - 1) test_dict += (test_list(i) -> test_list(i + 1))\n        test_dict",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_2 = List[Long]()\n        var test_list_rev_3 = List[Long]()\n        var test_list_rev_4 = List[Long]()\n        var test_list_rev_5 = List[Long]()\n        var test_list_rev_6 = List[Long]()\n        var test_list_rev_7 = List[Long]()\n        var test_list_rev_8 = List[Long]()\n        var test_list_rev_9 = List[Long]()\n        var test_list_rev_10 = List[Long]()\n        var test_list_rev_11 = List[Long]()\n        var test_list_rev_12 = List[Long]()\n        var test_list_rev_13 = List[Long]()\n        var test_list_rev_14 = List[Long]()\n        var test_list_rev_15 = List[Long]()\n        var test_list_rev_16 = List[Long]()\n        var test_list_rev_17 = List[Long]()\n        var test_list_rev_18 = List[Long]()\n        var test_list_rev_19 = List[Long]()\n        var test_list_rev_20 = List[Long]()\n        var test_list_rev_21 = List[Long]()\n        var test_list_rev_22 = List[Long]()\n        var test_list_rev_23 = List[Long]()\n        var test_list_rev_24 = List[Long]()\n        var test_list_rev_25 = List[Long]()\n        var test_list_rev_26 = List[Long]()\n        var test_list_rev_27 = List[Long]()\n        var test_list_rev_28 = List[Long]()\n        var test_list_rev_29 = List[Long]()\n        var test_list_rev_30 = List[Long]()\n        var test_list_rev"
  ]
}