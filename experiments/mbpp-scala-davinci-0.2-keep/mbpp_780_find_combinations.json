{
  "name": "mbpp_780_find_combinations",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    def findCombinations(test_list : List[Long]) : List[Long] = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findCombinations((List[Long]((2l, 4l), (6l, 7l), (5l, 1l), (6l, 10l)))).equals((List[Long]((8l, 11l), (7l, 5l), (8l, 14l), (11l, 8l), (12l, 17l), (11l, 11l)))));\n    assert(findCombinations((List[Long]((3l, 5l), (7l, 8l), (6l, 2l), (7l, 11l)))).equals((List[Long]((10l, 13l), (9l, 7l), (10l, 16l), (13l, 10l), (14l, 19l), (13l, 13l)))));\n    assert(findCombinations((List[Long]((4l, 6l), (8l, 9l), (7l, 3l), (8l, 12l)))).equals((List[Long]((12l, 15l), (11l, 9l), (12l, 18l), (15l, 12l), (16l, 21l), (15l, 15l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        return result",
    "        val result = new ListBuffer[Long]\n        val set = new HashSet[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                val sum = test_list(i) + test_list(j)\n                if (!set.contains(sum)) {\n                    set += sum\n                    result += sum\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val test_list_set = test_list.toSet\n        for (i <- test_list.indices) {\n            for (j <- i + 1 until test_list.length) {\n                val sum = test_list(i) + test_list(j)\n                if (test_list_set.contains(sum)) result += sum\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until n - 1) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_size_half = test_list_sorted_set_size / 2\n        val test_list_sorted_set_size_half_plus_1 = test_list_sorted_set_size_half + 1\n        val test_list_sorted_set_size_half_minus_1 = test_list_sorted_set_size_half - 1\n        val test_list_sorted_set_size_half_plus_1_list = (0 until test_list_sorted_set_size_half_plus_1).toList\n        val test_list_sorted_set_size_half_minus_1_list = (0 until test_list_sorted_set_size_half_minus_1).toList\n        val test_list_sorted_set_size_half_plus_1_list_combinations = test_list_sorted_set_size_half_plus_1_list.combinations(2).toList\n        val test_list_sorted_set_size_half_minus_1_list_combinations = test_list_sorted_set_size_half_minus_1_list.combinations(2).toList\n        val test_list_sorted_set_size_half_plus_1_list_combinations_sum = test_list_sorted_set_size_half_plus_1_list_combinations.map(x => x.sum)\n        val test_list_sorted_set_size_half_minus_1_list_combinations_sum = test_list_sorted_set_size_half_minus_1_list_combinations.map(x => x.sum)\n        val test_list_sorted_set_size_half_plus_1_list_combinations_sum_set = test_list_sorted_set_size_half_plus_1_list_combinations_",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_sum = test_list_sorted_set_list.sum\n        val test_list_sorted_set_list_sum_half = test_list_sorted_set_list_sum / 2\n        val test_list_sorted_set_list_sum_half_ceil = ceil(test_list_sorted_set_list_sum_half).toLong\n        val test_list_sorted_set_list_sum_half_floor = floor(test_list_sorted_set_list_sum_half).toLong\n        val test_list_sorted_set_list_sum_half_ceil_index = test_list_sorted_set_list.indexOf(test_list_sorted_set_list_sum_half_ceil)\n        val test_list_sorted_set_list_sum_half_floor_index = test_list_sorted_set_list.indexOf(test_list_sorted_set_list_sum_half_floor)\n        val test_list_sorted_set_list_sum_half_ceil_index_plus_one = test_list_sorted_set_list_sum_half_ceil_index + 1\n        val test_list_sorted_set_list_sum_half_floor_index_plus_one = test_list_sorted_set_list_sum_half_floor_index + 1\n        val test_list_sorted_set_list_sum_half_ceil_index_plus_one_half = test_list_sorted_set_list_sum_half_ceil_index_plus_one / 2\n       ",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_size_half = test_list_sorted_set_list_size / 2\n        val test_list_sorted_set_list_size_half_ceil = ceil(test_list_sorted_set_list_size / 2.0).toInt\n        val test_list_sorted_set_list_size_half_floor = floor(test_list_sorted_set_list_size / 2.0).toInt\n        val test_list_sorted_set_list_size_half_ceil_half = test_list_sorted_set_list_size_half_ceil / 2\n        val test_list_sorted_set_list_size_half_floor_half = test_list_sorted_set_list_size_half_floor / 2\n        val test_list_sorted_set_list_size_half_ceil_half_ceil = ceil(test_list_sorted_set_list_size_half_ceil / 2.0).toInt\n        val test_list_sorted_set_list_size_half_floor_half_floor = floor(test_list_sorted_set_list_size_half_floor / 2.0).toInt\n        val test_list_sorted_set_list_size_half_ceil_half_ceil_half = test_list_sorted_set_list_size_half_ceil_half_ceil / 2\n        val test_list_sorted_set_list_size_half_floor_half_floor_half = test_list_sorted_set_list_size_half_floor_half_floor",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += (test_list(i) + test_list(j))\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val test_list_size = test_list.size\n        for (i <- 0 until test_list_size) {\n            for (j <- i + 1 until test_list_size) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (test_list(i) + test_list(j) + test_list(k) == 0) {\n                        result += test_list(i)\n                        result += test_list(j)\n                        result += test_list(k)\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                val sum = test_list(i) + test_list(j)\n                result += sum\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.size) {\n            for (j <- i + 1 until test_list.size) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        result",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val combinations = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length - 1) {\n            for (j <- i + 1 until test_list.length) {\n                combinations += test_list(i) + test_list(j)\n            }\n        }\n        combinations.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_set = test_list.toSet\n        val test_list_set_size = test_list_set.size\n        val test_list_set_max = test_list_set.max\n        val test_list_set_min = test_list_set.min\n        val test_list_set_sum = test_list_set.sum\n        val test_list_set_sum_half = test_list_set_sum / 2\n        val test_list_set_sum_half_ceil = ceil(test_list_set_sum_half).toLong\n        val test_list_set_sum_half_floor = floor(test_list_set_sum_half).toLong\n        val test_list_set_sum_half_ceil_diff = test_list_set_sum_half_ceil - test_list_set_sum_half\n        val test_list_set_sum_half_floor_diff = test_list_set_sum_half - test_list_set_sum_half_floor\n        val test_list_set_sum_half_ceil_diff_abs = abs(test_list_set_sum_half_ceil_diff)\n        val test_list_set_sum_half_floor_diff_abs = abs(test_list_set_sum_half_floor_diff)\n        val test_list_set_sum_half_ceil_diff_abs_half = test_list_set_sum_half_ceil_diff_abs / 2\n        val test_list_set_sum_half_floor_diff_abs_half = test_list_set_sum_half_floor_diff_abs / 2\n        val test_list_set_sum_half_ceil_diff_abs_half_ceil = ceil(test_list_set_sum_half_ceil_diff_abs_half).toLong\n        val test_list_set_sum_half_floor_diff_abs_half_ceil = ceil(test_list_set_sum_half_floor_diff_abs_half).toLong\n        val test_list_set_sum_half_ceil_diff_abs",
    "        val result = new ListBuffer[Long]\n        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        for (i <- 0 until test_list_sorted.length) {\n            for (j <- i + 1 until test_list_sorted.length) {\n                val sum = test_list_sorted(i) + test_list_sorted(j)\n                if (test_list_sorted_set.contains(sum)) result += sum\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        val m = test_list.map(_.toInt).sum\n        val dp = Array.ofDim[Boolean](n + 1, m + 1)\n        for (i <- 0 to n) dp(i)(0) = true\n        for (i <- 1 to n) {\n            for (j <- 1 to m) {\n                if (test_list(i - 1) <= j) dp(i)(j) = dp(i - 1)(j - test_list(i - 1).toInt) || dp(i - 1)(j)\n                else dp(i)(j) = dp(i - 1)(j)\n            }\n        }\n        for (j <- 1 to m) if (dp(n)(j)) result += j\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_max = test_list_sorted_set.max\n        val test_list_sorted_set_min = test_list_sorted_set.min\n        val test_list_sorted_set_max_index = test_list_sorted.indexOf(test_list_sorted_set_max)\n        val test_list_sorted_set_min_index = test_list_sorted.indexOf(test_list_sorted_set_min)\n        val test_list_sorted_set_max_index_next = test_list_sorted_set_max_index + 1\n        val test_list_sorted_set_min_index_next = test_list_sorted_set_min_index + 1\n        val test_list_sorted_set_max_index_next_next = test_list_sorted_set_max_index_next + 1\n        val test_list_sorted_set_min_index_next_next = test_list_sorted_set_min_index_next + 1\n        val test_list_sorted_set_max_index_next_next_next = test_list_sorted_set_max_index_next_next + 1\n        val test_list_sorted_set_min_index_next_next_next = test_list_sorted_set_min_index_next_next + 1\n        val test_list_sorted_set_max_index_next_next_next_next = test_list_sorted_set_max_index_next_next_next + 1\n        val test_list_sorted_set_min_index_next_next_next_next = test_list_sorted_set_min_index_next_next_next + 1\n        val test_list_sorted_set_max_index_next_next_next_next_next",
    "        val result = ListBuffer[Long]()\n        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        for (i <- 0 until test_list_sorted.length) {\n            for (j <- i + 1 until test_list_sorted.length) {\n                val sum = test_list_sorted(i) + test_list_sorted(j)\n                if (test_list_sorted_set.contains(sum)) result += sum\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_size_half = test_list_sorted_set_list_size / 2\n        val test_list_sorted_set_list_size_half_ceil = ceil(test_list_sorted_set_list_size_half).toInt\n        val test_list_sorted_set_list_size_half_floor = floor(test_list_sorted_set_list_size_half).toInt\n        val test_list_sorted_set_list_size_half_ceil_list = test_list_sorted_set_list.slice(0, test_list_sorted_set_list_size_half_ceil)\n        val test_list_sorted_set_list_size_half_floor_list = test_list_sorted_set_list.slice(test_list_sorted_set_list_size_half_floor, test_list_sorted_set_list_size)\n        val test_list_sorted_set_list_size_half_ceil_list_size = test_list_sorted_set_list_size_half_ceil_list.size\n        val test_list_sorted_set_list_size_half_floor_list_size = test_list_sorted_set_list_size_half_floor_list.size\n        val test_list_sorted_set_list_size_half_ceil_list_size_half = test_list_sorted_set_list_size_half_ceil_list_size / 2\n        val test_list_sorted_set_list_size_half_ceil_list_size_",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (test_list(i) + test_list(j) + test_list(k) == 0) {\n                        result += test_list(i) * test_list(j) * test_list(k)\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.size\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (test_list(i) + test_list(j) + test_list(k) == 0) {\n                        result += test_list(i)\n                        result += test_list(j)\n                        result += test_list(k)\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val test_list_length = test_list.length\n        for (i <- 0 until test_list_length - 1) {\n            for (j <- i + 1 until test_list_length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (test_list(i) + test_list(j) + test_list(k) == 0) {\n                        result += test_list(i) * test_list(j) * test_list(k)\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val sum_list = new ListBuffer[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                sum_list += test_list(i) + test_list(j)\n            }\n        }\n        sum_list.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i) = test_list(i)\n        }\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                dp(i)(j) = dp(i)(j - 1) + test_list(j)\n            }\n        }\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                result += dp(i)(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.size) {\n            for (j <- i + 1 until test_list.size) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val sorted_list = test_list.sorted\n        val n = sorted_list.length\n        for (i <- 0 until n) {\n            val sum = sorted_list(i)\n            val temp = sorted_list.drop(i + 1)\n            val temp_result = findCombinations(temp, sum)\n            result ++= temp_result\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until (1 << n)) {\n            var sum = 0L\n            for (j <- 0 until n) {\n                if ((i & (1 << j)) > 0) {\n                    sum += test_list(j)\n                }\n            }\n            result += sum\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        val m = test_list.map(x => x.toInt).max\n        val dp = Array.ofDim[Boolean](n + 1, m + 1)\n        for (i <- 0 to n) dp(i)(0) = true\n        for (i <- 1 to n) {\n            for (j <- 1 to m) {\n                if (test_list(i - 1) <= j) dp(i)(j) = dp(i - 1)(j) || dp(i - 1)(j - test_list(i - 1).toInt)\n                else dp(i)(j) = dp(i - 1)(j)\n            }\n        }\n        for (j <- 1 to m) {\n            if (dp(n)(j)) result += j\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length - 1) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_size_half = test_list_sorted_set_list_size / 2\n        val test_list_sorted_set_list_size_half_floor = floor(test_list_sorted_set_list_size_half).toInt\n        val test_list_sorted_set_list_size_half_ceil = ceil(test_list_sorted_set_list_size_half).toInt\n        val test_list_sorted_set_list_size_half_floor_list = test_list_sorted_set_list.take(test_list_sorted_set_list_size_half_floor)\n        val test_list_sorted_set_list_size_half_ceil_list = test_list_sorted_set_list.takeRight(test_list_sorted_set_list_size_half_ceil)\n        val test_list_sorted_set_list_size_half_floor_list_size = test_list_sorted_set_list_size_half_floor_list.size\n        val test_list_sorted_set_list_size_half_ceil_list_size = test_list_sorted_set_list_size_half_ceil_list.size\n        val test_list_sorted_set_list_size_half_floor_list_size_half = test_list_sorted_set_list_size_half_floor_list_size / 2\n        val test_list_sorted_set_list_size_half_ceil_list_size_half = test_list_sorted_set_list_size_half_ceil_list_size / 2\n        val test_list_sorted_set_list_size",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (test_list(i) + test_list(j) + test_list(k) == 0) {\n                        result += test_list(i)\n                        result += test_list(j)\n                        result += test_list(k)\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = ListBuffer[Long]()\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        return result",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_array = test_list_sorted_set.toArray\n        val test_list_sorted_set_array_size = test_list_sorted_set_array.size\n        val test_list_sorted_set_array_combinations = test_list_sorted_set_array.combinations(2)\n        val test_list_sorted_set_array_combinations_list = test_list_sorted_set_array_combinations.toList\n        val test_list_sorted_set_array_combinations_list_size = test_list_sorted_set_array_combinations_list.size\n        val test_list_sorted_set_array_combinations_list_sum = test_list_sorted_set_array_combinations_list.map(x => x.sum)\n        val test_list_sorted_set_array_combinations_list_sum_set = test_list_sorted_set_array_combinations_list_sum.toSet\n        val test_list_sorted_set_array_combinations_list_sum_set_size = test_list_sorted_set_array_combinations_list_sum_set.size\n        val test_list_sorted_set_array_combinations_list_sum_set_array = test_list_sorted_set_array_combinations_list_sum_set.toArray\n        val test_list_sorted_set_array_combinations_list_sum_set_array_size = test_list_sorted_set_array_combinations_list_sum_set_array.size\n        val test_list_sorted_set_array_combinations_list_sum_set_array_combinations = test_list_sorted_set_array_combinations_list_sum_set_array.combinations(2)\n        val test_list",
    "        val map = new HashMap[Long, List[Long]]()\n        for (i <- test_list) {\n            if (map.contains(i)) {\n                map(i) = i :: map(i)\n            } else {\n                map(i) = List(i)\n            }\n        }\n        val result = new ListBuffer[Long]()\n        for (i <- test_list) {\n            for (j <- test_list) {\n                if (i != j) {\n                    val sum = i + j\n                    if (map.contains(sum)) {\n                        val list = map(sum)\n                        for (k <- list) {\n                            if (k != i && k != j) {\n                                result += sum\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        val m = (1 << n) - 1\n        for (i <- 0 to m) {\n            var sum = 0L\n            for (j <- 0 to n - 1) {\n                if ((i & (1 << j)) > 0) {\n                    sum += test_list(j)\n                }\n            }\n            result += sum\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        result",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = ListBuffer[Long]()\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_length = test_list_sorted_set_list.length\n        val test_list_sorted_set_list_combinations = test_list_sorted_set_list.combinations(2).toList\n        val test_list_sorted_set_list_combinations_length = test_list_sorted_set_list_combinations.length\n        val test_list_sorted_set_list_combinations_sum = test_list_sorted_set_list_combinations.map(x => x.sum)\n        val test_list_sorted_set_list_combinations_sum_set = test_list_sorted_set_list_combinations_sum.toSet\n        val test_list_sorted_set_list_combinations_sum_set_list = test_list_sorted_set_list_combinations_sum_set.toList\n        test_list_sorted_set_list_combinations_sum_set_list",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (test_list(i) + test_list(j) + test_list(k) == 0) {\n                        result += test_list(i)\n                        result += test_list(j)\n                        result += test_list(k)\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val map = new HashMap[Long, List[Long]]\n        for (i <- 0 until test_list.length) {\n            val current = test_list(i)\n            val currentList = List(current)\n            for (j <- i + 1 until test_list.length) {\n                val next = test_list(j)\n                val nextList = List(next)\n                val sum = current + next\n                if (map.contains(sum)) {\n                    val list = map(sum)\n                    val newList = list ::: currentList ::: nextList\n                    map(sum) = newList\n                } else {\n                    map(sum) = currentList ::: nextList\n                }\n            }\n        }\n        for (i <- 0 until test_list.length) {\n            val current = test_list(i)\n            for (j <- i + 1 until test_list.length) {\n                val next = test_list(j)\n                val sum = current + next\n                if (map.contains(sum)) {\n                    val list = map(sum)\n                    val newList = list ::: List(current, next)\n                    map(sum) = newList\n                } else {\n                    map(sum) = List(current, next)\n                }\n            }\n        }\n        for (i <- 0 until test_list.length) {\n            val current = test_list(i)\n            for (j <- i + 1 until test_list.length) {\n                val next = test_list(j)\n                val sum = current + next\n                if (map.contains(sum)) {\n                    val list = map(sum)\n                    val newList = list ::: List(current, next)\n                    map(sum) = newList\n                } else {\n                    map(sum) = List(current, next)\n                }\n            }\n        }\n        for (i <- 0 until test_list.length) {\n            val current = test_list(i)\n            for (j <- i + 1 until test_list.length) {\n                val next = test_list(j)\n                val sum = current + next\n               ",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = ListBuffer[Long]()\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (test_list(i) + test_list(j) + test_list(k) == 0) {\n                        result += test_list(i) * test_list(j) * test_list(k)\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        val length = test_list.length\n        for (i <- 0 until length) {\n            for (j <- i + 1 until length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        return result",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_size_half = test_list_sorted_set_list_size / 2\n        val test_list_sorted_set_list_size_half_plus_1 = test_list_sorted_set_list_size_half + 1\n        val test_list_sorted_set_list_size_half_minus_1 = test_list_sorted_set_list_size_half - 1\n        val test_list_sorted_set_list_size_half_minus_2 = test_list_sorted_set_list_size_half - 2\n        val test_list_sorted_set_list_size_half_minus_3 = test_list_sorted_set_list_size_half - 3\n        val test_list_sorted_set_list_size_half_minus_4 = test_list_sorted_set_list_size_half - 4\n        val test_list_sorted_set_list_size_half_minus_5 = test_list_sorted_set_list_size_half - 5\n        val test_list_sorted_set_list_size_half_minus_6 = test_list_sorted_set_list_size_half - 6\n        val test_list_sorted_set_list_size_half_minus_7 = test_list_sorted_set_list_size_half - 7\n        val test_list_sorted_set_list_size_half_minus_8 = test_list_sorted_set_list_size_half - 8\n        val test_list_sorted_set_list_size_half_minus_9 = test_",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(0) = 1\n        for (i <- 1 to n) {\n            for (j <- 1 to n) {\n                dp(i)(j) = dp(i - 1)(j)\n                if (j >= test_list(i - 1)) dp(i)(j) += dp(i - 1)(j - test_list(i - 1))\n            }\n        }\n        dp(n).toList",
    "        val result = new ListBuffer[Long]()\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (test_list(i) + test_list(j) + test_list(k) == 0) {\n                        result += test_list(i)\n                        result += test_list(j)\n                        result += test_list(k)\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        val n = test_list.length\n        val max_sum = test_list.sum\n        val dp = Array.ofDim[Boolean](n + 1, max_sum + 1)\n        for (i <- 0 to n) {\n            dp(i)(0) = true\n        }\n        for (i <- 1 to n) {\n            for (j <- 1 to max_sum) {\n                if (j < test_list(i - 1)) {\n                    dp(i)(j) = dp(i - 1)(j)\n                }\n                else {\n                    dp(i)(j) = dp(i - 1)(j) || dp(i - 1)(j - test_list(i - 1))\n                }\n            }\n        }\n        for (i <- 1 to max_sum) {\n            if (dp(n)(i)) result += i\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        val n = test_list.length\n        for (i <- 0 until n - 1) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n - 1) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        return result",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        for (i <- 0 until test_list_sorted.length - 1) {\n            val first = test_list_sorted(i)\n            val second = test_list_sorted(i + 1)\n            if (test_list_sorted_set.contains(first + second)) {\n                result += first + second\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        val m = n / 2\n        for (i <- 0 until m) {\n            for (j <- i + 1 until n) {\n                if (test_list(i) + test_list(j) == 0) {\n                    result += test_list(i)\n                    result += test_list(j)\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        val test_list_sorted = test_list.sorted\n        for (i <- 0 until test_list_sorted.length) {\n            for (j <- i + 1 until test_list_sorted.length) {\n                val sum = test_list_sorted(i) + test_list_sorted(j)\n                if (test_list_sorted.contains(sum)) {\n                    result += sum\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_size_half = test_list_sorted_set_list_size / 2\n        val test_list_sorted_set_list_size_half_plus_one = test_list_sorted_set_list_size_half + 1\n        val test_list_sorted_set_list_size_half_minus_one = test_list_sorted_set_list_size_half - 1\n        val test_list_sorted_set_list_size_half_minus_one_plus_one = test_list_sorted_set_list_size_half_minus_one + 1\n        val test_list_sorted_set_list_size_half_minus_one_plus_one_half = test_list_sorted_set_list_size_half_minus_one_plus_one / 2\n        val test_list_sorted_set_list_size_half_minus_one_plus_one_half_plus_one = test_list_sorted_set_list_size_half_minus_one_plus_one_half + 1\n        val test_list_sorted_set_list_size_half_minus_one_plus_one_half_minus_one = test_list_sorted_set_list_size_half_minus_one_plus_one_half - 1\n        val test_list_sorted_set_list_size_half_minus_one_plus_one_half_minus_one_plus_one = test_list_sorted_set_list_size_half_minus_one_plus_one_half_minus_one + 1\n        val test_list_sorted_",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = (test_list(i) + test_list(j)) :: result\n            }\n        }\n        result",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_combinations = test_list_sorted_set_list.combinations(2).toList\n        val test_list_sorted_set_list_combinations_size = test_list_sorted_set_list_combinations.size\n        val test_list_sorted_set_list_combinations_sum = test_list_sorted_set_list_combinations.map(x => x.sum)\n        val test_list_sorted_set_list_combinations_sum_size = test_list_sorted_set_list_combinations_sum.size\n        val test_list_sorted_set_list_combinations_sum_set = test_list_sorted_set_list_combinations_sum.toSet\n        val test_list_sorted_set_list_combinations_sum_set_size = test_list_sorted_set_list_combinations_sum_set.size\n        val test_list_sorted_set_list_combinations_sum_set_list = test_list_sorted_set_list_combinations_sum_set.toList\n        val test_list_sorted_set_list_combinations_sum_set_list_size = test_list_sorted_set_list_combinations_sum_set_list.size\n        val test_list_sorted_set_list_combinations_sum_set_list_sorted = test_list_sorted_set_list_combinations_sum_set_list.sorted\n        val test_list_sorted_set_list_combinations_sum_set_list_sorted_size = test_list_",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_size_half = test_list_sorted_set_list_size / 2\n        val test_list_sorted_set_list_size_half_ceil = ceil(test_list_sorted_set_list_size_half).toInt\n        val test_list_sorted_set_list_size_half_floor = floor(test_list_sorted_set_list_size_half).toInt\n        val test_list_sorted_set_list_size_half_ceil_list = test_list_sorted_set_list.slice(0, test_list_sorted_set_list_size_half_ceil)\n        val test_list_sorted_set_list_size_half_floor_list = test_list_sorted_set_list.slice(test_list_sorted_set_list_size_half_floor, test_list_sorted_set_list_size)\n        val test_list_sorted_set_list_size_half_ceil_list_size = test_list_sorted_set_list_size_half_ceil_list.size\n        val test_list_sorted_set_list_size_half_floor_list_size = test_list_sorted_set_list_size_half_floor_list.size\n        val test_list_sorted_set_list_size_half_ceil_list_size_half = test_list_sorted_set_list_size_half_ceil_list_size / 2\n        val test_list_sorted_set_list_size_half_ceil_list_size_",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_sum = test_list_sorted_set_list.sum\n        val test_list_sorted_set_list_sum_half = test_list_sorted_set_list_sum / 2\n        val test_list_sorted_set_list_sum_half_ceil = ceil(test_list_sorted_set_list_sum_half).toLong\n        val test_list_sorted_set_list_sum_half_floor = floor(test_list_sorted_set_list_sum_half).toLong\n        val test_list_sorted_set_list_sum_half_ceil_index = test_list_sorted_set_list.indexOf(test_list_sorted_set_list_sum_half_ceil)\n        val test_list_sorted_set_list_sum_half_floor_index = test_list_sorted_set_list.indexOf(test_list_sorted_set_list_sum_half_floor)\n        val test_list_sorted_set_list_sum_half_ceil_index_plus_one = test_list_sorted_set_list_sum_half_ceil_index + 1\n        val test_list_sorted_set_list_sum_half_floor_index_plus_one = test_list_sorted_set_list_sum_half_floor_index + 1\n        val test_list_sorted_set_list_sum_half_ceil_index_plus_one_half = test_list_sorted_set_list_sum_half_ceil_index_plus_one / 2\n       ",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        return result",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (test_list(i) + test_list(j) + test_list(k) == 0) {\n                        result += test_list(i)\n                        result += test_list(j)\n                        result += test_list(k)\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until n) {\n            val current = test_list(i)\n            for (j <- i + 1 until n) {\n                val next = test_list(j)\n                result += current + next\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            val cur = test_list(i)\n            for (j <- 0 until test_list.length) {\n                if (i != j) {\n                    val cur2 = test_list(j)\n                    val sum = cur + cur2\n                    if (map.contains(sum)) {\n                        map(sum) += 1\n                    } else {\n                        map(sum) = 1\n                    }\n                }\n            }\n        }\n        for (i <- map.keys) {\n            if (map(i) > 1) {\n                result += i\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until (1 << n)) {\n            var sum = 0\n            for (j <- 0 until n) {\n                if ((i & (1 << j)) > 0) {\n                    sum += test_list(j)\n                }\n            }\n            result += sum\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = ListBuffer[Long]()\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (test_list(i) + test_list(j) + test_list(k) == 0) result += List(test_list(i), test_list(j), test_list(k)).sorted.mkString(\"\").toLong\n                }\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_combinations = test_list_sorted_set_list.combinations(test_list_sorted_set_list_size - 1)\n        val test_list_sorted_set_list_combinations_list = test_list_sorted_set_list_combinations.toList\n        val test_list_sorted_set_list_combinations_list_size = test_list_sorted_set_list_combinations_list.size\n        val test_list_sorted_set_list_combinations_list_sum = test_list_sorted_set_list_combinations_list.map(x => x.sum)\n        val test_list_sorted_set_list_combinations_list_sum_set = test_list_sorted_set_list_combinations_list_sum.toSet\n        val test_list_sorted_set_list_combinations_list_sum_set_list = test_list_sorted_set_list_combinations_list_sum_set.toList\n        val test_list_sorted_set_list_combinations_list_sum_set_list_size = test_list_sorted_set_list_combinations_list_sum_set_list.size\n        val test_list_sorted_set_list_combinations_list_sum_set_list_sorted = test_list_sorted_set_list_combinations_list_sum_set_list.sorted\n        val test_list_sorted_set_list_combinations_list_sum_set_list_sorted_size = test_list_sorted_set_list_comb",
    "        val result = ListBuffer[Long]()\n        val test_list_sorted = test_list.sorted\n        val test_list_sorted_length = test_list_sorted.length\n        for (i <- 0 until test_list_sorted_length) {\n            val current = test_list_sorted(i)\n            val current_sum = current._1 + current._2\n            for (j <- i + 1 until test_list_sorted_length) {\n                val next = test_list_sorted(j)\n                val next_sum = next._1 + next._2\n                if (current_sum == next_sum) {\n                    result += current_sum\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    val sum = test_list(i) + test_list(j) + test_list(k)\n                    result += sum\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until (1 << n)) {\n            var sum = 0L\n            for (j <- 0 until n) {\n                if ((i & (1 << j)) > 0) {\n                    sum += test_list(j)\n                }\n            }\n            result += sum\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        val n = test_list.length\n        val m = pow(2, n).toInt\n        for (i <- 0 until m) {\n            var sum = 0L\n            for (j <- 0 until n) {\n                if ((i & (1 << j)) > 0) {\n                    sum += test_list(j)\n                }\n            }\n            result += sum\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        val n = test_list.length\n        val max_sum = test_list.sum\n        for (i <- 1 to n) {\n            val comb = test_list.combinations(i)\n            for (c <- comb) {\n                result += c.sum\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- test_list.indices) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                val sum = test_list(i) + test_list(j)\n                if (!result.contains(sum)) result += sum\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_combinations = test_list_sorted_set_list.combinations(2).toList\n        val test_list_sorted_set_list_combinations_size = test_list_sorted_set_list_combinations.size\n        val test_list_sorted_set_list_combinations_sum = test_list_sorted_set_list_combinations.map(x => x(0) + x(1))\n        val test_list_sorted_set_list_combinations_sum_size = test_list_sorted_set_list_combinations_sum.size\n        val test_list_sorted_set_list_combinations_sum_set = test_list_sorted_set_list_combinations_sum.toSet\n        val test_list_sorted_set_list_combinations_sum_set_size = test_list_sorted_set_list_combinations_sum_set.size\n        val test_list_sorted_set_list_combinations_sum_set_list = test_list_sorted_set_list_combinations_sum_set.toList\n        val test_list_sorted_set_list_combinations_sum_set_list_size = test_list_sorted_set_list_combinations_sum_set_list.size\n        val test_list_sorted_set_list_combinations_sum_set_list_sorted = test_list_sorted_set_list_combinations_sum_set_list.sorted\n        val test_list_sorted_set_list_combinations_sum_set_list_sorted_size",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList"
  ]
}