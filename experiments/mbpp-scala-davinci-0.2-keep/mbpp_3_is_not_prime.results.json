{
  "name": "mbpp_3_is_not_prime",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        for (i <- 2L to sqrt(n).toLong) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = math.sqrt(n).toInt\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1s4a5htu.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1s4a5htu.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2L to sqrt(n).toLong) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1s4a5htu.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        var i = 2\n        while (i <= sqrt(n).toInt) {\n            if (n % i == 0) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2L to sqrt(n).toLong) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n)\n        for (i <- 3 to sqrt.toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124006,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpoy1ddjuo.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n)\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        val sqrtN = sqrt(n).toLong\n        for (i <- 2L to sqrtN) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpeov2alpl.scala:8:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmprp2zghys.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        var i = 2L\n        while (i * i <= n) {\n            if (n % i == 0) return true\n            i += 1\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_wk_z5nm.scala:10:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m3\u001b[0m to sqrt by \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (sqrt : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpanfzfow0.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1s4a5htu.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpecnfnsb_.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpecnfnsb_.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmphtb97w71.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 2L to sqrt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpvf0p_n_p.scala:7:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpecnfnsb_.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpecnfnsb_.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmphtb97w71.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1s4a5htu.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpecnfnsb_.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2L to sqrt(n).toLong) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        val root = sqrt(n).toLong\n        for (i <- 2L to root) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1s4a5htu.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toInt\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124012,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp86ygbgms.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toInt\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpecnfnsb_.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        for (i <- 2 to sqrt(n).toInt) if (n % i == 0) return true\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toInt\n        for (i <- 3 to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpanfzfow0.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpanfzfow0.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1s4a5htu.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) if (n % i == 0) return true\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 2 to sqrt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124012,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpyxbtcim2.scala:7:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpecnfnsb_.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtn = sqrt(n).toLong\n        for (i <- 3L to sqrtn by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2L to sqrt(n).toLong) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        val sqrt = sqrt(n).toLong\n        for (i <- 2L to sqrt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp74uwa9h3.scala:8:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpanfzfow0.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 2L to sqrt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1xdm4r8y.scala:7:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toInt\n        for (i <- 3 to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2L to sqrt(n).toLong) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124015,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        for (i <- 2L to sqrt(n).toLong) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1s4a5htu.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpwy9__lsf.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpanfzfow0.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpecnfnsb_.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1s4a5htu.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        val sqrt = sqrt(n).toLong\n        for (i <- 2 to sqrt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124014,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpcdv56t0i.scala:8:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509719,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp1s4a5htu.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3 to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124015,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj0sl1ups.scala:9:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m3\u001b[0m to sqrtN by \u001b[31m2\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (sqrtN : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpecnfnsb_.scala:9:19 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36msqrt\u001b[0m = sqrt(n).toLong\n\u001b[31m\u001b[31m  |\u001b[0m                   ^\u001b[0m\n\u001b[31m  |\u001b[0m                   Recursive \u001b[33mvalue\u001b[0m \u001b[35msqrt\u001b[0m needs type\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a python function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false\n    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
      "timestamp": 1665509721,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}