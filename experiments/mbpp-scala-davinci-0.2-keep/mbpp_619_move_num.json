{
  "name": "mbpp_619_move_num",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to move all the numbers to the end of the given string.\n    def moveNum(test_str : String) : String = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(moveNum((\"I1love143you55three3000thousand\")).equals((\"Iloveyouthreethousand1143553000\")));\n    assert(moveNum((\"Avengers124Assemble\")).equals((\"AvengersAssemble124\")));\n    assert(moveNum((\"Its11our12path13to14see15things16do17things\")).equals((\"Itsourpathtoseethingsdothings11121314151617\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val num_str = new StringBuilder\n        val char_str = new StringBuilder\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str.append(test_str(i))\n            else char_str.append(test_str(i))\n        }\n        return char_str.toString + num_str.toString",
    "        var num_str = \"\"\n        var alpha_str = \"\"\n        for (i <- 0 to test_str.length - 1) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else alpha_str += test_str(i)\n        }\n        return alpha_str + num_str",
    "        val nums = \"0123456789\"\n        val sb = new StringBuilder\n        for (c <- test_str) {\n            if (nums.contains(c)) sb.append(c)\n        }\n        for (c <- test_str) {\n            if (!nums.contains(c)) sb.append(c)\n        }\n        return sb.toString",
    "        var str = test_str\n        var num = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num",
    "        var num_str = \"\"\n        var alpha_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) {\n                num_str += test_str(i)\n            } else {\n                alpha_str += test_str(i)\n            }\n        }\n        return alpha_str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val nums = test_str.filter(x => x.isDigit)\n        val chars = test_str.filter(x => !x.isDigit)\n        chars + nums",
    "        var str_arr = test_str.split(\" \")\n        var num_arr = new ArrayBuffer[String]()\n        var str_arr_new = new ArrayBuffer[String]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).matches(\"[0-9]+\")) {\n                num_arr += str_arr(i)\n            } else {\n                str_arr_new += str_arr(i)\n            }\n        }\n        str_arr_new ++= num_arr\n        return str_arr_new.mkString(\" \")",
    "        var str = test_str\n        var num = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num",
    "        val num_list = ListBuffer[Char]()\n        val char_list = ListBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) num_list += c\n            else char_list += c\n        }\n        (char_list ++ num_list).mkString",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = ArrayBuffer[Char]()\n        var str_arr_new = ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) {\n                num_arr += str_arr(i)\n            } else {\n                str_arr_new += str_arr(i)\n            }\n        }\n        str_arr_new.mkString + num_arr.mkString",
    "        val nums = new ArrayBuffer[Char]\n        val chars = new ArrayBuffer[Char]\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        chars.mkString + nums.mkString",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1, str.length)\n            } else {\n                i += 1\n            }\n        }\n        str + num_str",
    "        val str_arr = test_str.toCharArray\n        val num_arr = new ArrayBuffer[Char]\n        val char_arr = new ArrayBuffer[Char]\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).isDigit) num_arr += str_arr(i)\n            else char_arr += str_arr(i)\n        }\n        char_arr.mkString + num_arr.mkString",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            } else {\n                i += 1\n            }\n        }\n        str + num_str",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var i = 0\n        var j = str_arr.length - 1\n        while (i < j) {\n            while (i < j && !nums.contains(str_arr(i))) {\n                i += 1\n            }\n            while (i < j && nums.contains(str_arr(j))) {\n                j -= 1\n            }\n            if (i < j) {\n                val temp = str_arr(i)\n                str_arr(i) = str_arr(j)\n                str_arr(j) = temp\n            }\n        }\n        str_arr.mkString",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(!_.isDigit)\n        char_str + num_str",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) {\n                num_str += test_str(i)\n            } else {\n                char_str += test_str(i)\n            }\n        }\n        char_str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(!_.isDigit)\n        return chars + nums",
    "        val num_str = test_str.filter(_.isDigit)\n        val alpha_str = test_str.filter(_.isLetter)\n        alpha_str + num_str",
    "        var nums = new StringBuilder\n        var chars = new StringBuilder\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) nums += test_str(i)\n            else chars += test_str(i)\n        }\n        return chars.toString + nums.toString",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (c <- test_str) {\n            if (c.isDigit) num_str += c\n            else char_str += c\n        }\n        return char_str + num_str",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) {\n                num_str += test_str(i)\n            } else {\n                char_str += test_str(i)\n            }\n        }\n        return char_str + num_str",
    "        val nums = \"0123456789\"\n        var str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (nums.contains(test_str(i))) str += test_str(i)\n        }\n        for (i <- 0 until test_str.length) {\n            if (!nums.contains(test_str(i))) str += test_str(i)\n        }\n        return str",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        chars + nums",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toArray\n        val num_arr = str_arr.filter(x => nums.contains(x))\n        val str_arr_new = str_arr.filter(x => !nums.contains(x))\n        str_arr_new.mkString + num_arr.mkString",
    "        val num_str = \"0123456789\"\n        val num_arr = new ArrayBuffer[Char]()\n        val char_arr = new ArrayBuffer[Char]()\n        for (i <- 0 until test_str.length) {\n            if (num_str.contains(test_str(i))) num_arr += test_str(i)\n            else char_arr += test_str(i)\n        }\n        return char_arr.mkString(\"\") + num_arr.mkString(\"\")",
    "        var str = test_str\n        var num = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num",
    "        var str = test_str\n        var str_arr = str.toCharArray\n        var num_arr = ArrayBuffer[Char]()\n        var char_arr = ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).isDigit) {\n                num_arr += str_arr(i)\n            } else {\n                char_arr += str_arr(i)\n            }\n        }\n        str = char_arr.mkString + num_arr.mkString\n        return str",
    "        val str_arr = test_str.toCharArray\n        val str_arr_len = str_arr.length\n        val num_arr = new ArrayBuffer[Char]()\n        val char_arr = new ArrayBuffer[Char]()\n        for (i <- 0 until str_arr_len) {\n            if (str_arr(i).isDigit) {\n                num_arr += str_arr(i)\n            } else {\n                char_arr += str_arr(i)\n            }\n        }\n        char_arr ++= num_arr\n        char_arr.mkString",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        val num_str = test_str.filter(x => x.isDigit)\n        val char_str = test_str.filter(x => !x.isDigit)\n        return char_str + num_str",
    "        var str = test_str\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                str = str.substring(0, i) + str.substring(i + 1) + str(i)\n            } else {\n                i += 1\n            }\n        }\n        return str",
    "        val nums = ListBuffer[Char]()\n        val chars = ListBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        (chars ++ nums).mkString",
    "        var str_arr = test_str.split(\"\")\n        var num_arr = ArrayBuffer[String]()\n        var str_arr_new = ArrayBuffer[String]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).matches(\"[0-9]\")) {\n                num_arr += str_arr(i)\n            } else {\n                str_arr_new += str_arr(i)\n            }\n        }\n        str_arr_new ++= num_arr\n        str_arr_new.mkString(\"\")",
    "        var str = test_str\n        var nums = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                nums += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + nums",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else char_str += test_str(i)\n        }\n        return char_str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val alpha_str = test_str.filter(c => c.isLetter)\n        alpha_str + num_str",
    "        val nums = ArrayBuffer[Char]()\n        val chars = ArrayBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        chars.mkString + nums.mkString",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else char_str += test_str(i)\n        }\n        return char_str + num_str",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) {\n                num_str += test_str(i)\n            } else {\n                char_str += test_str(i)\n            }\n        }\n        return char_str + num_str",
    "        val nums = ListBuffer[Char]()\n        val chars = ListBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        chars.mkString + nums.mkString",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = new ArrayBuffer[Char]\n        var str_arr_new = new ArrayBuffer[Char]\n        for (c <- str_arr) {\n            if (nums.contains(c)) num_arr += c\n            else str_arr_new += c\n        }\n        str_arr_new ++= num_arr\n        str_arr_new.mkString",
    "        var str = test_str\n        var nums = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                nums += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + nums",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = new ArrayBuffer[Char]()\n        var str_arr_new = new ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) num_arr += str_arr(i)\n            else str_arr_new += str_arr(i)\n        }\n        str_arr_new ++= num_arr\n        str_arr_new.mkString",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        var str = test_str\n        var nums = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                nums += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + nums",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        var nums = new ArrayBuffer[Char]()\n        var chars = new ArrayBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        return chars.mkString + nums.mkString",
    "        var str = test_str.toCharArray\n        var i = 0\n        var j = str.length - 1\n        while (i < j) {\n            if (str(i).isDigit) {\n                while (i < j && str(j).isDigit) j -= 1\n                if (i < j) {\n                    var temp = str(i)\n                    str(i) = str(j)\n                    str(j) = temp\n                }\n            }\n            i += 1\n        }\n        return str.mkString",
    "        val num_str = new StringBuilder\n        val char_str = new StringBuilder\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else char_str += test_str(i)\n        }\n        return char_str.toString + num_str.toString",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        var str_arr = test_str.split(\"\")\n        var num_arr = ArrayBuffer[String]()\n        var char_arr = ArrayBuffer[String]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).matches(\"[0-9]\")) {\n                num_arr += str_arr(i)\n            } else {\n                char_arr += str_arr(i)\n            }\n        }\n        return char_arr.mkString(\"\") + num_arr.mkString(\"\")",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        val str_arr_len = str_arr.length\n        var i = 0\n        var j = str_arr_len - 1\n        while (i < j) {\n            while (i < j && !nums.contains(str_arr(i))) i += 1\n            while (i < j && !nums.contains(str_arr(j))) j -= 1\n            if (i < j) {\n                val temp = str_arr(i)\n                str_arr(i) = str_arr(j)\n                str_arr(j) = temp\n            }\n        }\n        str_arr.mkString",
    "        var num_str = \"\"\n        var alpha_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else alpha_str += test_str(i)\n        }\n        return alpha_str + num_str",
    "        val str_arr = test_str.split(\"\")\n        val num_arr = ArrayBuffer[String]()\n        val char_arr = ArrayBuffer[String]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).matches(\"[0-9]\")) num_arr += str_arr(i)\n            else char_arr += str_arr(i)\n        }\n        char_arr.mkString + num_arr.mkString",
    "        var nums = new ListBuffer[Char]\n        var chars = new ListBuffer[Char]\n        for (c <- test_str) {\n            if (c >= '0' && c <= '9') nums += c\n            else chars += c\n        }\n        return chars.mkString + nums.mkString",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        val nums = new StringBuilder\n        val chars = new StringBuilder\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        chars.toString + nums.toString",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else char_str += test_str(i)\n        }\n        return char_str + num_str",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (c <- test_str) {\n            if (c.isDigit) num_str += c\n            else char_str += c\n        }\n        char_str + num_str",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        val str_arr = test_str.toArray\n        val num_arr = new ArrayBuffer[Char]()\n        val char_arr = new ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).isDigit) num_arr += str_arr(i)\n            else char_arr += str_arr(i)\n        }\n        char_arr ++= num_arr\n        return char_arr.mkString",
    "        val nums = \"0123456789\"\n        val str = test_str.toList\n        val (n, s) = str.partition(nums.contains(_))\n        s.mkString + n.mkString",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = ArrayBuffer[Char]()\n        var str_arr_new = ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) {\n                num_arr += str_arr(i)\n            } else {\n                str_arr_new += str_arr(i)\n            }\n        }\n        str_arr_new ++= num_arr\n        str_arr_new.mkString",
    "        var str_arr = test_str.toCharArray\n        var num_arr = new ArrayBuffer[Char]()\n        var char_arr = new ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).isDigit) num_arr += str_arr(i)\n            else char_arr += str_arr(i)\n        }\n        return char_arr.mkString + num_arr.mkString",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => c.isLetter)\n        char_str + num_str",
    "        val num_str = test_str.replaceAll(\"[^0-9]\", \"\")\n        val char_str = test_str.replaceAll(\"[0-9]\", \"\")\n        return char_str + num_str",
    "        var str = test_str\n        var nums = \"\"\n        var chars = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) nums += str(i)\n            else chars += str(i)\n        }\n        return chars + nums",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val nums = \"0123456789\"\n        val nums_list = nums.toList\n        val str_list = test_str.toList\n        val num_list = str_list.filter(nums_list.contains(_))\n        val str_list_2 = str_list.filter(!nums_list.contains(_))\n        val result = str_list_2.mkString(\"\") + num_list.mkString(\"\")\n        result",
    "        var str_arr = test_str.toCharArray\n        var num_arr = ArrayBuffer[Char]()\n        var char_arr = ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).isDigit) num_arr += str_arr(i)\n            else char_arr += str_arr(i)\n        }\n        return (char_arr ++ num_arr).mkString",
    "        var str = test_str\n        var num = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            else i += 1\n        }\n        str + num",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            else i += 1\n        }\n        str + num_str",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        val str_arr_len = str_arr.length\n        var i = 0\n        var j = str_arr_len - 1\n        while (i < j) {\n            while (i < j && !nums.contains(str_arr(i))) i += 1\n            while (i < j && nums.contains(str_arr(j))) j -= 1\n            if (i < j) {\n                val tmp = str_arr(i)\n                str_arr(i) = str_arr(j)\n                str_arr(j) = tmp\n            }\n        }\n        str_arr.mkString",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        var str = test_str\n        var num = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            } else i += 1\n        }\n        str + num",
    "        var str = test_str\n        var nums = List[Char]()\n        var chars = List[Char]()\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                nums = nums :+ str(i)\n            } else {\n                chars = chars :+ str(i)\n            }\n        }\n        str = chars.mkString + nums.mkString\n        return str",
    "        var num_str = \"\"\n        var alpha_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) {\n                num_str += test_str(i)\n            } else {\n                alpha_str += test_str(i)\n            }\n        }\n        return alpha_str + num_str",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        var num_str = \"\"\n        var alpha_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) {\n                num_str += test_str(i)\n            } else {\n                alpha_str += test_str(i)\n            }\n        }\n        return alpha_str + num_str",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var i = 0\n        var j = str_arr.length - 1\n        while (i < j) {\n            if (nums.contains(str_arr(i))) {\n                while (i < j && nums.contains(str_arr(j))) {\n                    j -= 1\n                }\n                val tmp = str_arr(i)\n                str_arr(i) = str_arr(j)\n                str_arr(j) = tmp\n            }\n            i += 1\n        }\n        str_arr.mkString",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        return chars + nums",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = new ArrayBuffer[Char]\n        var str_arr2 = new ArrayBuffer[Char]\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) num_arr += str_arr(i)\n            else str_arr2 += str_arr(i)\n        }\n        str_arr2.mkString + num_arr.mkString",
    "        val num_list = ListBuffer[Char]()\n        val char_list = ListBuffer[Char]()\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_list += test_str(i)\n            else char_list += test_str(i)\n        }\n        return char_list.mkString + num_list.mkString",
    "        val nums = new StringBuilder\n        val chars = new StringBuilder\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        chars.toString + nums.toString",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        val str_arr = test_str.toCharArray\n        val num_arr = new ArrayBuffer[Char]()\n        val char_arr = new ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).isDigit) num_arr += str_arr(i)\n            else char_arr += str_arr(i)\n        }\n        char_arr ++= num_arr\n        char_arr.mkString",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = ArrayBuffer[Char]()\n        var str_arr_new = ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) {\n                num_arr += str_arr(i)\n            } else {\n                str_arr_new += str_arr(i)\n            }\n        }\n        str_arr_new ++= num_arr\n        str_arr_new.mkString",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else char_str += test_str(i)\n        }\n        char_str + num_str",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(!_.isDigit)\n        char_str + num_str",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 to str.length - 1) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val num_str = test_str.filter(x => x.isDigit)\n        val char_str = test_str.filter(x => !x.isDigit)\n        char_str + num_str",
    "        val num_arr = test_str.split(\"[^0-9]\")\n        val char_arr = test_str.split(\"[0-9]\")\n        val num_str = num_arr.mkString(\"\")\n        val char_str = char_arr.mkString(\"\")\n        char_str + num_str",
    "        var nums = new StringBuilder\n        var chars = new StringBuilder\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) nums += test_str(i)\n            else chars += test_str(i)\n        }\n        return chars.toString + nums.toString",
    "        val nums = new StringBuilder\n        val chars = new StringBuilder\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        chars.append(nums)\n        chars.toString",
    "        val nums = new ListBuffer[Char]\n        val chars = new ListBuffer[Char]\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        chars.mkString + nums.mkString",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 to str.length - 1) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        val nums = ListBuffer[Char]()\n        val chars = ListBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        (chars ++ nums).mkString",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val num_arr = ArrayBuffer[Char]()\n        val str_arr = ArrayBuffer[Char]()\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_arr += test_str(i)\n            else str_arr += test_str(i)\n        }\n        str_arr.mkString + num_arr.mkString",
    "        val str_arr = test_str.split(\"\")\n        val num_arr = new ArrayBuffer[String]()\n        val char_arr = new ArrayBuffer[String]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).matches(\"[0-9]\")) {\n                num_arr += str_arr(i)\n            } else {\n                char_arr += str_arr(i)\n            }\n        }\n        return char_arr.mkString(\"\") + num_arr.mkString(\"\")",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toArray\n        val num_arr = str_arr.filter(x => nums.contains(x))\n        val str_arr2 = str_arr.filter(x => !nums.contains(x))\n        return str_arr2.mkString + num_arr.mkString",
    "        val str_arr = test_str.toCharArray\n        val num_arr = new ArrayBuffer[Char]()\n        val char_arr = new ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).isDigit) num_arr += str_arr(i)\n            else char_arr += str_arr(i)\n        }\n        char_arr.mkString + num_arr.mkString",
    "        val nums = test_str.filter(x => x.isDigit)\n        val chars = test_str.filter(x => !x.isDigit)\n        chars + nums",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val str_arr = test_str.split(\"\")\n        val num_arr = ArrayBuffer[String]()\n        val char_arr = ArrayBuffer[String]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).matches(\"[0-9]\")) {\n                num_arr += str_arr(i)\n            } else {\n                char_arr += str_arr(i)\n            }\n        }\n        char_arr.mkString + num_arr.mkString",
    "        val num_arr = test_str.split(\"[^0-9]+\")\n        val char_arr = test_str.split(\"[0-9]+\")\n        val num_str = num_arr.mkString(\"\")\n        val char_str = char_arr.mkString(\"\")\n        char_str + num_str",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else char_str += test_str(i)\n        }\n        return char_str + num_str",
    "        val num_list = ListBuffer[Char]()\n        val char_list = ListBuffer[Char]()\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_list += test_str(i)\n            else char_list += test_str(i)\n        }\n        return (char_list ++ num_list).mkString",
    "        val str_arr = test_str.split(\"\")\n        val num_arr = str_arr.filter(x => x.matches(\"[0-9]\"))\n        val char_arr = str_arr.filter(x => !x.matches(\"[0-9]\"))\n        val result = char_arr ++ num_arr\n        result.mkString(\"\")",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        chars + nums",
    "        var str = test_str\n        var nums = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                nums += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + nums",
    "        val str_arr = test_str.split(\"\")\n        val num_arr = ArrayBuffer[String]()\n        val char_arr = ArrayBuffer[String]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i) >= \"0\" && str_arr(i) <= \"9\") num_arr += str_arr(i)\n            else char_arr += str_arr(i)\n        }\n        return char_arr.mkString(\"\") + num_arr.mkString(\"\")",
    "        val num = \"0123456789\"\n        val str = test_str.toCharArray\n        var i = 0\n        var j = str.length - 1\n        while (i < j) {\n            while (i < j && !num.contains(str(i))) i += 1\n            while (i < j && num.contains(str(j))) j -= 1\n            if (i < j) {\n                val temp = str(i)\n                str(i) = str(j)\n                str(j) = temp\n            }\n        }\n        str.mkString",
    "        val nums = new ArrayBuffer[Char]()\n        val chars = new ArrayBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        chars.mkString + nums.mkString",
    "        val num_str = test_str.filter(c => c >= '0' && c <= '9')\n        val char_str = test_str.filter(c => c < '0' || c > '9')\n        return char_str + num_str",
    "        val num_str = test_str.filter(x => x.isDigit)\n        val alpha_str = test_str.filter(x => x.isLetter)\n        return alpha_str + num_str",
    "        var num_str = \"\"\n        var alpha_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else alpha_str += test_str(i)\n        }\n        return alpha_str + num_str",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) {\n                num_str += test_str(i)\n            } else {\n                char_str += test_str(i)\n            }\n        }\n        char_str + num_str",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val num_arr = test_str.split(\"[^0-9]\")\n        val char_arr = test_str.split(\"[0-9]\")\n        val num_str = num_arr.filter(x => x != \"\").mkString(\"\")\n        val char_str = char_arr.filter(x => x != \"\").mkString(\"\")\n        char_str + num_str",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => c.isLetter)\n        return chars + nums",
    "        val num_arr = new ArrayBuffer[Char]()\n        val char_arr = new ArrayBuffer[Char]()\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_arr += test_str(i)\n            else char_arr += test_str(i)\n        }\n        char_arr.mkString + num_arr.mkString",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = new ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) {\n                num_arr += str_arr(i)\n            }\n        }\n        val str_arr2 = str_arr.filter(x => !nums.contains(x))\n        str_arr2.mkString + num_arr.mkString",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        chars + nums",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        var num_str = \"\"\n        var char_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else char_str += test_str(i)\n        }\n        return char_str + num_str",
    "        var str = test_str\n        var nums = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                nums += str(i)\n                str = str.substring(0, i) + str.substring(i + 1, str.length)\n                i -= 1\n            }\n        }\n        str + nums",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            } else {\n                i += 1\n            }\n        }\n        str + num_str",
    "        val num_arr = ArrayBuffer[Char]()\n        val char_arr = ArrayBuffer[Char]()\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_arr += test_str(i)\n            else char_arr += test_str(i)\n        }\n        return char_arr.mkString + num_arr.mkString",
    "        val nums = new ArrayBuffer[Char]()\n        val chars = new ArrayBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        chars.mkString + nums.mkString",
    "        val num_str = test_str.filter(_.isDigit)\n        val alpha_str = test_str.filter(_.isLetter)\n        alpha_str + num_str",
    "        val num_str = \"0123456789\"\n        val num_arr = new ArrayBuffer[Char]()\n        val char_arr = new ArrayBuffer[Char]()\n        for (i <- 0 until test_str.length) {\n            if (num_str.contains(test_str(i))) {\n                num_arr += test_str(i)\n            } else {\n                char_arr += test_str(i)\n            }\n        }\n        return char_arr.mkString + num_arr.mkString",
    "        val nums = new ArrayBuffer[Char]()\n        val chars = new ArrayBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) nums += c\n            else chars += c\n        }\n        return chars.mkString + nums.mkString",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            else i += 1\n        }\n        str + num_str",
    "        var str = test_str\n        var nums = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                nums += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + nums",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        return char_str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val non_num_str = test_str.filter(c => !c.isDigit)\n        non_num_str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => c.isLetter)\n        char_str + num_str",
    "        var str = test_str\n        var nums = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                nums += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            else i += 1\n        }\n        str + nums",
    "        val str_arr = test_str.split(\"\")\n        val num_arr = new ArrayBuffer[String]()\n        val char_arr = new ArrayBuffer[String]()\n        for (i <- 0 until str_arr.length) {\n            if (str_arr(i).matches(\"\\\\d\")) num_arr += str_arr(i)\n            else char_arr += str_arr(i)\n        }\n        char_arr ++= num_arr\n        char_arr.mkString(\"\")",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => c.isLetter)\n        char_str + num_str",
    "        val nums = \"0123456789\"\n        val num_list = new ListBuffer[Char]()\n        val char_list = new ListBuffer[Char]()\n        for (i <- 0 until test_str.length) {\n            if (nums.contains(test_str(i))) num_list += test_str(i)\n            else char_list += test_str(i)\n        }\n        char_list.mkString + num_list.mkString",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(!_.isDigit)\n        char_str + num_str",
    "        var str = test_str\n        var nums = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                nums += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + nums",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        return chars + nums",
    "        val nums = test_str.filter(c => c.isDigit)\n        val chars = test_str.filter(c => !c.isDigit)\n        return chars + nums",
    "        val nums = test_str.filter(x => x.isDigit)\n        val chars = test_str.filter(x => !x.isDigit)\n        chars + nums",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        return chars + nums",
    "        var num_str = \"\"\n        var alpha_str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_str += test_str(i)\n            else alpha_str += test_str(i)\n        }\n        return alpha_str + num_str",
    "        var num_str = \"\"\n        var str = \"\"\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) {\n                num_str += test_str(i)\n            } else {\n                str += test_str(i)\n            }\n        }\n        return str + num_str",
    "        val num_str = test_str.filter(_.isDigit)\n        val char_str = test_str.filter(_.isLetter)\n        char_str + num_str",
    "        val num_str = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = ArrayBuffer[Char]()\n        var str_arr_new = ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (num_str.contains(str_arr(i))) {\n                num_arr += str_arr(i)\n            } else {\n                str_arr_new += str_arr(i)\n            }\n        }\n        str_arr_new.mkString + num_arr.mkString",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(!_.isDigit)\n        chars + nums",
    "        val str_arr = test_str.split(\"\")\n        val num_arr = str_arr.filter(x => x.matches(\"[0-9]\"))\n        val char_arr = str_arr.filter(x => !x.matches(\"[0-9]\"))\n        (char_arr ++ num_arr).mkString(\"\")",
    "        var result = \"\"\n        var nums = \"\"\n        for (i <- 0 to test_str.length - 1) {\n            if (test_str(i).isDigit) nums += test_str(i)\n            else result += test_str(i)\n        }\n        result + nums",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = new ArrayBuffer[Char]()\n        var str_arr_new = new ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) num_arr += str_arr(i)\n            else str_arr_new += str_arr(i)\n        }\n        str_arr_new ++= num_arr\n        str_arr_new.mkString",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1, str.length)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        val nums = test_str.filter(x => x.isDigit)\n        val chars = test_str.filter(x => !x.isDigit)\n        return chars + nums",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val nums = new ArrayBuffer[Char]()\n        val chars = new ArrayBuffer[Char]()\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) nums += test_str(i)\n            else chars += test_str(i)\n        }\n        return chars.mkString + nums.mkString",
    "        val num_list = ListBuffer[Char]()\n        val char_list = ListBuffer[Char]()\n        for (c <- test_str) {\n            if (c.isDigit) num_list += c\n            else char_list += c\n        }\n        return char_list.mkString + num_list.mkString",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        char_str + num_str",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            } else {\n                i += 1\n            }\n        }\n        str + num_str",
    "        val num_str = test_str.filter(x => x.isDigit)\n        val char_str = test_str.filter(x => x.isLetter)\n        return char_str + num_str",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        val str_arr_len = str_arr.length\n        var i = 0\n        var j = str_arr_len - 1\n        while (i < j) {\n            while (i < str_arr_len && !nums.contains(str_arr(i))) {\n                i += 1\n            }\n            while (j >= 0 && nums.contains(str_arr(j))) {\n                j -= 1\n            }\n            if (i < j) {\n                val temp = str_arr(i)\n                str_arr(i) = str_arr(j)\n                str_arr(j) = temp\n            }\n        }\n        str_arr.mkString",
    "        var str = test_str\n        var num_str = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            else i += 1\n        }\n        str + num_str",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.split(\"\")\n        val num_arr = ArrayBuffer[String]()\n        val str_arr_new = ArrayBuffer[String]()\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) {\n                num_arr += str_arr(i)\n            } else {\n                str_arr_new += str_arr(i)\n            }\n        }\n        str_arr_new.mkString(\"\") + num_arr.mkString(\"\")",
    "        var num_list = List[Char]()\n        var char_list = List[Char]()\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isDigit) num_list = num_list :+ test_str(i)\n            else char_list = char_list :+ test_str(i)\n        }\n        return char_list.mkString + num_list.mkString",
    "        var str = test_str\n        var num_str = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                num_str += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + num_str",
    "        val nums = test_str.filter(_.isDigit)\n        val chars = test_str.filter(_.isLetter)\n        chars + nums",
    "        val num_str = test_str.filter(c => c.isDigit)\n        val char_str = test_str.filter(c => !c.isDigit)\n        return char_str + num_str",
    "        var str = test_str\n        var num = \"\"\n        var i = 0\n        while (i < str.length) {\n            if (str(i).isDigit) {\n                num += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            else i += 1\n        }\n        str + num",
    "        var str = test_str\n        var nums = \"\"\n        for (i <- 0 until str.length) {\n            if (str(i).isDigit) {\n                nums += str(i)\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n        }\n        str + nums",
    "        val num_str = test_str.filter(_.isDigit)\n        val alpha_str = test_str.filter(_.isLetter)\n        alpha_str + num_str",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = new ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) {\n                num_arr += str_arr(i)\n            }\n        }\n        var str_arr_new = new ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (!nums.contains(str_arr(i))) {\n                str_arr_new += str_arr(i)\n            }\n        }\n        str_arr_new ++= num_arr\n        str_arr_new.mkString",
    "        val nums = \"0123456789\"\n        val str = test_str.toList\n        val (n, s) = str.partition(nums.contains(_))\n        s.mkString + n.mkString",
    "        val num_arr = test_str.split(\"[a-zA-Z]+\")\n        val char_arr = test_str.split(\"[0-9]+\")\n        val num_str = num_arr.mkString(\"\")\n        val char_str = char_arr.mkString(\"\")\n        char_str + num_str",
    "        val nums = \"0123456789\"\n        val str_arr = test_str.toCharArray\n        var num_arr = new ArrayBuffer[Char]()\n        var str_arr_new = new ArrayBuffer[Char]()\n        for (i <- 0 until str_arr.length) {\n            if (nums.contains(str_arr(i))) {\n                num_arr += str_arr(i)\n            } else {\n                str_arr_new += str_arr(i)\n            }\n        }\n        str_arr_new ++= num_arr\n        str_arr_new.mkString",
    "        val num_str = \"0123456789\"\n        val num_arr = new Array[Char](test_str.length)\n        var num_count = 0\n        for (i <- 0 until test_str.length) {\n            if (num_str.contains(test_str(i))) {\n                num_arr(num_count) = test_str(i)\n                num_count += 1\n            }\n        }\n        val char_arr = new Array[Char](test_str.length - num_count)\n        var char_count = 0\n        for (i <- 0 until test_str.length) {\n            if (!num_str.contains(test_str(i))) {\n                char_arr(char_count) = test_str(i)\n                char_count += 1\n            }\n        }\n        return char_arr.mkString + num_arr.mkString",
    "        var nums = new ListBuffer[Char]()\n        var chars = new ListBuffer[Char]()\n        for (c <- test_str) {\n            if (c >= '0' && c <= '9') nums += c\n            else chars += c\n        }\n        return chars.mkString + nums.mkString"
  ]
}