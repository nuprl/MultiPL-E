{
  "name": "mbpp_724_power_base_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    def powerBaseSum(base : Long, power : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(powerBaseSum((2l), (100l)) == (115l));\n    assert(powerBaseSum((8l), (10l)) == (37l));\n    assert(powerBaseSum((8l), (15l)) == (62l));\n    assert(powerBaseSum((3l), (3l)) == (9l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var sum = 0L\n        var p = pow(base, power).toLong\n        while (p != 0) {\n            sum += p % 10\n            p /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        var n = pow(base, power).toLong\n        while (n > 0) {\n            sum += n % 10\n            n /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var p = base\n        for (i <- 1 to power.toInt) {\n            p *= base\n            sum += p.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b = b * base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            sum += n.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var result = BigInt(base).pow(power)\n        while (result > 0) {\n            sum += result % 10\n            result /= 10\n        }\n        sum",
    "        var sum = 0L\n        var p = base\n        for (i <- 1 to power) {\n            p = p * base\n            sum += p.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var temp = base\n        for (i <- 1 to power) {\n            temp = temp * base\n            sum += temp.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = base\n        }\n        sum",
    "        var result = BigInt(base).pow(power).toString.map(_.asDigit).sum\n        return result",
    "        var sum = 0L\n        var p = base\n        for (i <- 1 to power.toInt) {\n            p *= base\n            sum += p.toString.map(_.asDigit).sum\n        }\n        sum",
    "        def powerBaseSum(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else powerBaseSum(base, power - 1, sum + base)\n        }\n        powerBaseSum(base, power, 0)",
    "        var sum = 0L\n        var num = pow(base, power).toLong\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        sum",
    "        def powerBaseSum(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else powerBaseSum(base, power - 1, sum + base)\n        }\n        powerBaseSum(base, power, 0)",
    "        def powerBaseSum(base : Long, power : Long, acc : Long) : Long = {\n            if (power == 0) acc\n            else powerBaseSum(base, power - 1, acc + base)\n        }\n        powerBaseSum(base, power, 0)",
    "        var sum = 0L\n        var num = base\n        for (i <- 1 to power) {\n            num *= base\n            sum += num.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var x = base\n        for (i <- 1 to power) {\n            x *= base\n            sum += x.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var temp = base\n        for (i <- 1 to power) {\n            temp *= base\n            sum += temp.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var result = BigInt(base).pow(power).toString.map(_.asDigit).sum\n        return result"
  ]
}