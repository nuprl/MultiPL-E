{
  "name": "mbpp_69_is_sublist",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check whether a list contains the given sublist or not.\n    def isSublist(l : List[Long], s : List[Long]) : Boolean = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isSublist((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)), (List[Long](3l.toLong, 7l.toLong))) == (false));\n    assert(isSublist((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)), (List[Long](4l.toLong, 3l.toLong))) == (true));\n    assert(isSublist((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)), (List[Long](1l.toLong, 6l.toLong))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (l.length < s.length) false\n        else if (l.take(s.length) == s) true\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var matchFound = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    matchFound = false\n                    break\n                }\n            }\n            if (matchFound) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var isSub = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    isSub = false\n                    break\n                }\n            }\n            if (isSub) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        for (i <- 0 until l.length - s.length + 1) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        for (i <- 0 to l.length - s.length) {\n            var isSub = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    isSub = false\n                    break\n                }\n            }\n            if (isSub) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var isSub = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    isSub = false\n                    break\n                }\n            }\n            if (isSub) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        for (i <- 0 until l.length - s.length + 1) {\n            var flag = true\n            for (j <- 0 until s.length) {\n                if (l(i + j) != s(j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var found = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var flag = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        var i = 0\n        var j = 0\n        while (i < l.length && j < s.length) {\n            if (l(i) == s(j)) j += 1\n            i += 1\n        }\n        return j == s.length",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var flag = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        val l2 = l.sliding(s.length).toList\n        l2.exists(x => x == s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var isSub = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    isSub = false\n                    break\n                }\n            }\n            if (isSub) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var isSub = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    isSub = false\n                    break\n                }\n            }\n            if (isSub) return true\n        }\n        return false",
    "        if (s.length > l.length) return false\n        if (s.length == 0) return true\n        val l2 = l.dropWhile(e => e != s.head)\n        if (l2.length == 0) return false\n        if (l2.length < s.length) return false\n        val l3 = l2.take(s.length)\n        if (l3 == s) return true\n        isSublist(l2.tail, s)",
    "        if (s.length > l.length) return false\n        if (s.length == 0) return true\n        if (l.length == 0) return false\n        if (l.head == s.head) return isSublist(l.tail, s.tail)\n        return isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.head == s.head) {\n            val l2 = l.tail\n            val s2 = s.tail\n            if (s2.isEmpty) return true\n            return isSublist(l2, s2)\n        }\n        return isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        val l1 = l.sliding(s.length).toList\n        l1.exists(x => x == s)",
    "        if (l.size < s.size) return false\n        val l2 = l.sliding(s.size).toList\n        l2.contains(s)",
    "        if (s.length > l.length) return false\n        if (s.length == 0) return true\n        var i = 0\n        while (i < l.length) {\n            if (l(i) == s(0)) {\n                var j = 0\n                while (j < s.length && i + j < l.length && l(i + j) == s(j)) j += 1\n                if (j == s.length) return true\n            }\n            i += 1\n        }\n        false",
    "        if (s.length > l.length) return false\n        var i = 0\n        while (i < l.length - s.length + 1) {\n            var j = 0\n            while (j < s.length && l(i + j) == s(j)) j += 1\n            if (j == s.length) return true\n            i += 1\n        }\n        return false",
    "        if (l.length < s.length) return false\n        val n = l.length - s.length\n        for (i <- 0 to n) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (s.length > l.length) return false\n        val l2 = l.sliding(s.length).toList\n        l2.exists(x => x == s)",
    "        if (l.size < s.size) return false\n        for (i <- 0 to l.size - s.size) {\n            if (l.slice(i, i + s.size) == s) return true\n        }\n        false",
    "        if (l.length < s.length) return false\n        val l2 = l.sliding(s.length).toList\n        l2.exists(x => x == s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (s.length > l.length) false\n        else {\n            val sublists = for (i <- 0 to l.length - s.length) yield l.slice(i, i + s.length)\n            sublists.contains(s)\n        }",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        val l2 = l.sliding(s.length).toList\n        l2.exists(x => x == s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        val l2 = l.sliding(s.length).toList\n        l2.exists(x => x == s)",
    "        if (l.length < s.length) false\n        else if (l.take(s.length) == s) true\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) return true\n        if (l.isEmpty) return false\n        if (l.head == s.head) return isSublist(l.tail, s.tail)\n        return isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        if (s.length == 0) return true\n        if (l.length == 0) return false\n        if (l.head == s.head) {\n            if (isSublist(l.tail, s.tail)) return true\n        }\n        return isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var flag = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        return false",
    "        if (l.size < s.size) return false\n        val l1 = l.sliding(s.size).toList\n        l1.exists(x => x == s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var flag = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (l.length < s.length) false\n        else if (l.take(s.length) == s) true\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        val l2 = l.sliding(s.length).toList\n        l2.exists(x => x == s)",
    "        if (l.length < s.length) false\n        else if (l.take(s.length) == s) true\n        else isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        if (s.length == 0) return true\n        if (s.head == l.head) {\n            if (s.length == 1) return true\n            return isSublist(l.tail, s.tail)\n        }\n        return isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        val l1 = l.zipWithIndex.filter(x => x._1 == s.head)\n        if (l1.length == 0) return false\n        for (i <- l1) {\n            var flag = true\n            for (j <- 0 until s.length) {\n                if (i._2 + j >= l.length) {\n                    flag = false\n                    break\n                }\n                if (l(i._2 + j) != s(j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        if (s.length == 0) return true\n        if (l.length == 0) return false\n        if (l.head == s.head) {\n            if (isSublist(l.tail, s.tail)) return true\n        }\n        isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var isSub = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    isSub = false\n                    break\n                }\n            }\n            if (isSub) return true\n        }\n        return false",
    "        if (s.length > l.length) return false\n        if (s.length == 0) return true\n        if (l.length == 0) return false\n        if (l.head == s.head) {\n            if (isSublist(l.tail, s.tail)) return true\n        }\n        return isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var match = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    match = false\n                    break\n                }\n            }\n            if (match) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        val l1 = l.take(s.length)\n        if (l1 == s) return true\n        isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        false",
    "        if (s.length > l.length) return false\n        var i = 0\n        while (i <= l.length - s.length) {\n            var j = 0\n            while (j < s.length && l(i + j) == s(j)) j += 1\n            if (j == s.length) return true\n            i += 1\n        }\n        return false",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var flag = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        return false",
    "        if (l.size < s.size) return false\n        for (i <- 0 until l.size - s.size + 1) {\n            var found = true\n            for (j <- 0 until s.size) {\n                if (l(i + j) != s(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        def isSublist(l : List[Long], s : List[Long], i : Int) : Boolean = {\n            if (s.isEmpty) true\n            else if (l.isEmpty) false\n            else if (l.head == s.head) isSublist(l.tail, s.tail, i + 1)\n            else isSublist(l.tail, s, i + 1)\n        }\n        isSublist(l, s, 0)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (s.length > l.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        val m = l.sliding(s.length).toList\n        m.exists(x => x == s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.head == s.head) {\n            if (l.length == s.length) return true\n            else return isSublist(l.tail, s.tail)\n        }\n        else return isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        val l1 = l.toArray\n        val s1 = s.toArray\n        val n = l1.length\n        val m = s1.length\n        for (i <- 0 to n - m) {\n            var j = 0\n            while (j < m && l1(i + j) == s1(j)) j += 1\n            if (j == m) return true\n        }\n        false",
    "        if (l.length < s.length) return false\n        else if (l.length == s.length) return l == s\n        else {\n            if (l.head == s.head) {\n                var i = 0\n                var j = 0\n                while (i < l.length && j < s.length) {\n                    if (l(i) != s(j)) return false\n                    i += 1\n                    j += 1\n                }\n                return true\n            }\n            else return isSublist(l.tail, s)\n        }",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        val l1 = l.sliding(s.length).toList\n        l1.exists(x => x == s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (s.length > l.length) false\n        else {\n            val sublists = l.sliding(s.length).toList\n            sublists.contains(s)\n        }",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.size < s.size) return false\n        val sz = s.size\n        for (i <- 0 to l.size - sz) {\n            if (l.slice(i, i + sz) == s) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (s.length > l.length) false\n        else {\n            val l2 = l.sliding(s.length).toList\n            l2.exists(x => x == s)\n        }",
    "        if (l.length < s.length) return false\n        for (i <- 0 until l.length - s.length + 1) {\n            var found = true\n            for (j <- 0 until s.length) {\n                if (l(i + j) != s(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        if (s.isEmpty) return true\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        false",
    "        if (l.length < s.length) return false\n        var i = 0\n        var j = 0\n        while (i < l.length && j < s.length) {\n            if (l(i) == s(j)) {\n                i += 1\n                j += 1\n            } else {\n                i += 1\n                j = 0\n            }\n        }\n        if (j == s.length) return true\n        return false",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        val l1 = l.take(s.length)\n        if (l1 == s) return true\n        isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.head == s.head) {\n            if (isSublist(l.tail, s.tail)) return true\n        }\n        isSublist(l.tail, s)",
    "        if (l.size < s.size) return false\n        val l2 = l.sliding(s.size).toList\n        l2.exists(x => x == s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        var i = 0\n        while (i <= l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n            i += 1\n        }\n        return false",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var flag = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        val l2 = l.sliding(s.length).toList\n        l2.exists(x => x == s)",
    "        def isSublist(l : List[Long], s : List[Long], i : Int) : Boolean = {\n            if (s.isEmpty) true\n            else if (l.isEmpty) false\n            else if (l.head == s.head) isSublist(l.tail, s.tail, i + 1)\n            else isSublist(l.tail, s, i + 1)\n        }\n        isSublist(l, s, 0)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var flag = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        return false",
    "        if (s.length > l.length) return false\n        def isSublist(l : List[Long], s : List[Long], i : Int) : Boolean = {\n            if (i + s.length > l.length) return false\n            if (l.slice(i, i + s.length) == s) return true\n            isSublist(l, s, i + 1)\n        }\n        isSublist(l, s, 0)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var found = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    found = false\n                    break\n                }\n            }\n            if (found) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var flag = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        return false",
    "        if (l.size < s.size) return false\n        val l2 = l.sliding(s.size).toList\n        l2.exists(x => x == s)",
    "        if (l.length < s.length) return false\n        var i = 0\n        while (i <= l.length - s.length) {\n            var j = 0\n            while (j < s.length && l(i + j) == s(j)) j += 1\n            if (j == s.length) return true\n            i += 1\n        }\n        false",
    "        if (l.size < s.size) return false\n        if (l.size == s.size) return l == s\n        if (l.head == s.head) {\n            val t = l.tail\n            val st = s.tail\n            if (t.size < st.size) return false\n            if (t.size == st.size) return t == st\n            return isSublist(t, st)\n        }\n        return isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (s.length > l.length) return false\n        if (s.length == 0) return true\n        if (l.length == 0) return false\n        if (l.head == s.head) {\n            if (s.length == 1) return true\n            return isSublist(l.tail, s.tail)\n        }\n        return isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        val n = l.length - s.length\n        for (i <- 0 to n) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        if (s.length == 0) return true\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (l.length < s.length) false\n        else {\n            var i = 0\n            var j = 0\n            while (i < l.length && j < s.length) {\n                if (l(i) == s(j)) {\n                    i += 1\n                    j += 1\n                }\n                else {\n                    i += 1\n                    j = 0\n                }\n            }\n            if (j == s.length) true\n            else false\n        }",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        return false",
    "        if (l.length < s.length) return false\n        var i = 0\n        var j = 0\n        while (i < l.length && j < s.length) {\n            if (l(i) == s(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == s.length) return true\n        else return false",
    "        if (l.length < s.length) return false\n        var i = 0\n        while (i <= l.length - s.length) {\n            var j = 0\n            while (j < s.length && l(i + j) == s(j)) j += 1\n            if (j == s.length) return true\n            i += 1\n        }\n        return false",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var isSub = true\n            for (j <- 0 to s.length - 1) {\n                if (l(i + j) != s(j)) {\n                    isSub = false\n                    break\n                }\n            }\n            if (isSub) return true\n        }\n        return false",
    "        if (l.length < s.length) false\n        else if (l.take(s.length) == s) true\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var j = 0\n            while (j < s.length && l(i + j) == s(j)) j += 1\n            if (j == s.length) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        for (i <- 0 to l.length - s.length) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) false\n        else if (l.take(s.length) == s) true\n        else isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        val l2 = l.sliding(s.length).toList\n        l2.exists(x => x == s)",
    "        def isSublist(l : List[Long], s : List[Long], i : Int) : Boolean = {\n            if (s.isEmpty) true\n            else if (i + s.length > l.length) false\n            else if (l.slice(i, i + s.length) == s) true\n            else isSublist(l, s, i + 1)\n        }\n        isSublist(l, s, 0)",
    "        if (l.length < s.length) false\n        else if (l.take(s.length) == s) true\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.length > l.length) return false\n        val l2 = l.sliding(s.length).toList\n        l2.exists(x => x == s)",
    "        if (l.size < s.size) return false\n        for (i <- 0 until l.size - s.size + 1) {\n            var flag = true\n            for (j <- 0 until s.size) {\n                if (l(i + j) != s(j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.take(s.length) == s) return true\n        isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        for (i <- 0 to l.length - s.length) {\n            var j = 0\n            while (j < s.length && l(i + j) == s(j)) j += 1\n            if (j == s.length) return true\n        }\n        return false",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        if (l.length == s.length) return l == s\n        if (l.head == s.head) {\n            if (isSublist(l.tail, s.tail)) return true\n        }\n        return isSublist(l.tail, s)",
    "        if (l.length < s.length) return false\n        val n = l.length - s.length\n        for (i <- 0 to n) {\n            if (l.slice(i, i + s.length) == s) return true\n        }\n        false",
    "        if (s.size > l.size) return false\n        else {\n            val l1 = l.sliding(s.size).toList\n            l1.exists(x => x == s)\n        }",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (s.isEmpty) true\n        else if (l.isEmpty) false\n        else if (l.head == s.head) isSublist(l.tail, s.tail)\n        else isSublist(l.tail, s)",
    "        if (l.size < s.size) return false\n        if (l.size == s.size) return l == s\n        if (l.take(s.size) == s) return true\n        isSublist(l.tail, s)"
  ]
}