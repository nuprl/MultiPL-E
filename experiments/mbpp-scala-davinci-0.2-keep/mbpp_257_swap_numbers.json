{
  "name": "mbpp_257_swap_numbers",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    def swapNumbers(a : Long, b : Long) : Long = {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py",
  "prompt_terminology": "verbatim",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(swapNumbers((10l), (20l)) == (20l, 10l));\n    assert(swapNumbers((15l), (17l)) == (17l, 15l));\n    assert(swapNumbers((100l), (200l)) == (200l, 100l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val c = a\n        val d = b\n        val e = c\n        val f = d\n        val g = e\n        val h = f\n        val i = g\n        val j = h\n        val k = i\n        val l = j\n        val m = k\n        val n = l\n        val o = m\n        val p = n\n        val q = o\n        val r = p\n        val s = q\n        val t = r\n        val u = s\n        val v = t\n        val w = u\n        val x = v\n        val y = w\n        val z = x\n        val aa = y\n        val bb = z\n        val cc = aa\n        val dd = bb\n        val ee = cc\n        val ff = dd\n        val gg = ee\n        val hh = ff\n        val ii = gg\n        val jj = hh\n        val kk = ii\n        val ll = jj\n        val mm = kk\n        val nn = ll\n        val oo = mm\n        val pp = nn\n        val qq = oo\n        val rr = pp\n        val ss = qq\n        val tt = rr\n        val uu = ss\n        val vv = tt\n        val ww = uu\n        val xx = vv\n        val yy = ww\n        val zz = xx\n        val aaa = yy\n        val bbb = zz\n        val ccc = aaa\n        val ddd = bbb\n        val eee = ccc\n        val fff = ddd\n        val ggg = eee\n        val hhh = fff\n        val iii = ggg\n        val jjj = hhh\n        val kkk = iii\n        val lll = jjj\n        val mmm = kkk\n        val nnn = lll\n        val ooo = mmm\n        val ppp = nnn\n        val qqq = ooo\n        val rrr = ppp\n        val sss = qqq\n        val ttt = rrr\n        val uuu = sss\n        val vvv = ttt\n        val www = u",
    "        return b * pow(10, (a.toString.length)) + a",
    "        return b * pow(10, floor(log10(a)).toInt + 1) + a",
    "        return b * pow(10, log10(a).toInt + 1).toLong + a",
    "        // Write your code here\n        return 0",
    "        return b * pow(10, (log10(a) + 1).toInt) + a",
    "        return b * pow(10, (a.toString.length)).toLong + a",
    "        return b * pow(10, (log10(a) + 1).toInt) + a",
    "        var temp = a\n        a = b\n        b = temp\n        return a",
    "        return b * pow(10, (a.toString.length)).toLong + a",
    "        return b * pow(10, (a.toString.length)).toLong + a",
    "        val c = a\n        a = b\n        b = c\n        return b",
    "        return b * pow(10, (a.toString.length)).toLong + a",
    "        return b * pow(10, floor(log10(a) + 1)).toLong + a",
    "        return b * pow(10, floor(log10(a)).toInt + 1).toLong + a",
    "        var c = a\n        a = b\n        b = c\n        return b",
    "        var result : Long = 0\n        result = b * pow(10, (log10(a) + 1)).toLong + a\n        return result",
    "        return b * pow(10, (log10(a) + 1).toInt) + a",
    "        return b + a * pow(10, floor(log10(a)).toInt + 1).toLong",
    "        return b * pow(10, (log10(a) + 1).toInt) + a"
  ]
}